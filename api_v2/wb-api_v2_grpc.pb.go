// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: wb-api_v2.proto

package cerasus_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WB_APIClient is the client API for WB_API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WB_APIClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	GetWarehouses(ctx context.Context, in *WBAuthParams, opts ...grpc.CallOption) (*Warehouses, error)
	LoadApiOrders(ctx context.Context, in *ApiOrdersRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetApiOrders(ctx context.Context, in *ApiOrdersRequest, opts ...grpc.CallOption) (*ApiOrders, error)
	LoadApiSales(ctx context.Context, in *ApiOrdersRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetApiSales(ctx context.Context, in *ApiOrdersRequest, opts ...grpc.CallOption) (*ApiSales, error)
	LoadApiProducts(ctx context.Context, in *WBAuthParams, opts ...grpc.CallOption) (*StatusReply, error)
	GetApiProducts(ctx context.Context, in *WBAuthParams, opts ...grpc.CallOption) (*ApiProducts, error)
	LoadApiStocks(ctx context.Context, in *ApiStockRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetApiStocks(ctx context.Context, in *WBAuthParams, opts ...grpc.CallOption) (*ApiStockData, error)
}

type wB_APIClient struct {
	cc grpc.ClientConnInterface
}

func NewWB_APIClient(cc grpc.ClientConnInterface) WB_APIClient {
	return &wB_APIClient{cc}
}

func (c *wB_APIClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.WB_API/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wB_APIClient) GetWarehouses(ctx context.Context, in *WBAuthParams, opts ...grpc.CallOption) (*Warehouses, error) {
	out := new(Warehouses)
	err := c.cc.Invoke(ctx, "/cerasusV2.WB_API/GetWarehouses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wB_APIClient) LoadApiOrders(ctx context.Context, in *ApiOrdersRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.WB_API/LoadApiOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wB_APIClient) GetApiOrders(ctx context.Context, in *ApiOrdersRequest, opts ...grpc.CallOption) (*ApiOrders, error) {
	out := new(ApiOrders)
	err := c.cc.Invoke(ctx, "/cerasusV2.WB_API/GetApiOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wB_APIClient) LoadApiSales(ctx context.Context, in *ApiOrdersRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.WB_API/LoadApiSales", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wB_APIClient) GetApiSales(ctx context.Context, in *ApiOrdersRequest, opts ...grpc.CallOption) (*ApiSales, error) {
	out := new(ApiSales)
	err := c.cc.Invoke(ctx, "/cerasusV2.WB_API/GetApiSales", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wB_APIClient) LoadApiProducts(ctx context.Context, in *WBAuthParams, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.WB_API/LoadApiProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wB_APIClient) GetApiProducts(ctx context.Context, in *WBAuthParams, opts ...grpc.CallOption) (*ApiProducts, error) {
	out := new(ApiProducts)
	err := c.cc.Invoke(ctx, "/cerasusV2.WB_API/GetApiProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wB_APIClient) LoadApiStocks(ctx context.Context, in *ApiStockRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.WB_API/LoadApiStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wB_APIClient) GetApiStocks(ctx context.Context, in *WBAuthParams, opts ...grpc.CallOption) (*ApiStockData, error) {
	out := new(ApiStockData)
	err := c.cc.Invoke(ctx, "/cerasusV2.WB_API/GetApiStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WB_APIServer is the server API for WB_API service.
// All implementations must embed UnimplementedWB_APIServer
// for forward compatibility
type WB_APIServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	GetWarehouses(context.Context, *WBAuthParams) (*Warehouses, error)
	LoadApiOrders(context.Context, *ApiOrdersRequest) (*StatusReply, error)
	GetApiOrders(context.Context, *ApiOrdersRequest) (*ApiOrders, error)
	LoadApiSales(context.Context, *ApiOrdersRequest) (*StatusReply, error)
	GetApiSales(context.Context, *ApiOrdersRequest) (*ApiSales, error)
	LoadApiProducts(context.Context, *WBAuthParams) (*StatusReply, error)
	GetApiProducts(context.Context, *WBAuthParams) (*ApiProducts, error)
	LoadApiStocks(context.Context, *ApiStockRequest) (*StatusReply, error)
	GetApiStocks(context.Context, *WBAuthParams) (*ApiStockData, error)
	mustEmbedUnimplementedWB_APIServer()
}

// UnimplementedWB_APIServer must be embedded to have forward compatible implementations.
type UnimplementedWB_APIServer struct {
}

func (UnimplementedWB_APIServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedWB_APIServer) GetWarehouses(context.Context, *WBAuthParams) (*Warehouses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarehouses not implemented")
}
func (UnimplementedWB_APIServer) LoadApiOrders(context.Context, *ApiOrdersRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadApiOrders not implemented")
}
func (UnimplementedWB_APIServer) GetApiOrders(context.Context, *ApiOrdersRequest) (*ApiOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiOrders not implemented")
}
func (UnimplementedWB_APIServer) LoadApiSales(context.Context, *ApiOrdersRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadApiSales not implemented")
}
func (UnimplementedWB_APIServer) GetApiSales(context.Context, *ApiOrdersRequest) (*ApiSales, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiSales not implemented")
}
func (UnimplementedWB_APIServer) LoadApiProducts(context.Context, *WBAuthParams) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadApiProducts not implemented")
}
func (UnimplementedWB_APIServer) GetApiProducts(context.Context, *WBAuthParams) (*ApiProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiProducts not implemented")
}
func (UnimplementedWB_APIServer) LoadApiStocks(context.Context, *ApiStockRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadApiStocks not implemented")
}
func (UnimplementedWB_APIServer) GetApiStocks(context.Context, *WBAuthParams) (*ApiStockData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiStocks not implemented")
}
func (UnimplementedWB_APIServer) mustEmbedUnimplementedWB_APIServer() {}

// UnsafeWB_APIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WB_APIServer will
// result in compilation errors.
type UnsafeWB_APIServer interface {
	mustEmbedUnimplementedWB_APIServer()
}

func RegisterWB_APIServer(s grpc.ServiceRegistrar, srv WB_APIServer) {
	s.RegisterService(&WB_API_ServiceDesc, srv)
}

func _WB_API_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WB_APIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.WB_API/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WB_APIServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WB_API_GetWarehouses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WBAuthParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WB_APIServer).GetWarehouses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.WB_API/GetWarehouses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WB_APIServer).GetWarehouses(ctx, req.(*WBAuthParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WB_API_LoadApiOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WB_APIServer).LoadApiOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.WB_API/LoadApiOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WB_APIServer).LoadApiOrders(ctx, req.(*ApiOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WB_API_GetApiOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WB_APIServer).GetApiOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.WB_API/GetApiOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WB_APIServer).GetApiOrders(ctx, req.(*ApiOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WB_API_LoadApiSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WB_APIServer).LoadApiSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.WB_API/LoadApiSales",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WB_APIServer).LoadApiSales(ctx, req.(*ApiOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WB_API_GetApiSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WB_APIServer).GetApiSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.WB_API/GetApiSales",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WB_APIServer).GetApiSales(ctx, req.(*ApiOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WB_API_LoadApiProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WBAuthParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WB_APIServer).LoadApiProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.WB_API/LoadApiProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WB_APIServer).LoadApiProducts(ctx, req.(*WBAuthParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WB_API_GetApiProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WBAuthParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WB_APIServer).GetApiProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.WB_API/GetApiProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WB_APIServer).GetApiProducts(ctx, req.(*WBAuthParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WB_API_LoadApiStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WB_APIServer).LoadApiStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.WB_API/LoadApiStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WB_APIServer).LoadApiStocks(ctx, req.(*ApiStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WB_API_GetApiStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WBAuthParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WB_APIServer).GetApiStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.WB_API/GetApiStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WB_APIServer).GetApiStocks(ctx, req.(*WBAuthParams))
	}
	return interceptor(ctx, in, info, handler)
}

// WB_API_ServiceDesc is the grpc.ServiceDesc for WB_API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WB_API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cerasusV2.WB_API",
	HandlerType: (*WB_APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _WB_API_Ping_Handler,
		},
		{
			MethodName: "GetWarehouses",
			Handler:    _WB_API_GetWarehouses_Handler,
		},
		{
			MethodName: "LoadApiOrders",
			Handler:    _WB_API_LoadApiOrders_Handler,
		},
		{
			MethodName: "GetApiOrders",
			Handler:    _WB_API_GetApiOrders_Handler,
		},
		{
			MethodName: "LoadApiSales",
			Handler:    _WB_API_LoadApiSales_Handler,
		},
		{
			MethodName: "GetApiSales",
			Handler:    _WB_API_GetApiSales_Handler,
		},
		{
			MethodName: "LoadApiProducts",
			Handler:    _WB_API_LoadApiProducts_Handler,
		},
		{
			MethodName: "GetApiProducts",
			Handler:    _WB_API_GetApiProducts_Handler,
		},
		{
			MethodName: "LoadApiStocks",
			Handler:    _WB_API_LoadApiStocks_Handler,
		},
		{
			MethodName: "GetApiStocks",
			Handler:    _WB_API_GetApiStocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wb-api_v2.proto",
}
