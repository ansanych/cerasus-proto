// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: counter_v2.proto

package cerasus_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CounterClient is the client API for Counter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CounterClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	GetProductCount(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*ProductCount, error)
	SetProductCount(ctx context.Context, in *ProductCount, opts ...grpc.CallOption) (*StatusReply, error)
	GetParamsForPricer(ctx context.Context, in *PricerRequest, opts ...grpc.CallOption) (*ParamsForPricer, error)
	GetProductsWithCounter(ctx context.Context, in *Company, opts ...grpc.CallOption) (*ReplyID, error)
	DeleteCerasusProductData(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*StatusReply, error)
}

type counterClient struct {
	cc grpc.ClientConnInterface
}

func NewCounterClient(cc grpc.ClientConnInterface) CounterClient {
	return &counterClient{cc}
}

func (c *counterClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Counter/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) GetProductCount(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*ProductCount, error) {
	out := new(ProductCount)
	err := c.cc.Invoke(ctx, "/cerasusV2.Counter/GetProductCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) SetProductCount(ctx context.Context, in *ProductCount, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Counter/SetProductCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) GetParamsForPricer(ctx context.Context, in *PricerRequest, opts ...grpc.CallOption) (*ParamsForPricer, error) {
	out := new(ParamsForPricer)
	err := c.cc.Invoke(ctx, "/cerasusV2.Counter/GetParamsForPricer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) GetProductsWithCounter(ctx context.Context, in *Company, opts ...grpc.CallOption) (*ReplyID, error) {
	out := new(ReplyID)
	err := c.cc.Invoke(ctx, "/cerasusV2.Counter/GetProductsWithCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) DeleteCerasusProductData(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Counter/DeleteCerasusProductData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterServer is the server API for Counter service.
// All implementations must embed UnimplementedCounterServer
// for forward compatibility
type CounterServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	GetProductCount(context.Context, *RequestByID) (*ProductCount, error)
	SetProductCount(context.Context, *ProductCount) (*StatusReply, error)
	GetParamsForPricer(context.Context, *PricerRequest) (*ParamsForPricer, error)
	GetProductsWithCounter(context.Context, *Company) (*ReplyID, error)
	DeleteCerasusProductData(context.Context, *RequestByID) (*StatusReply, error)
	mustEmbedUnimplementedCounterServer()
}

// UnimplementedCounterServer must be embedded to have forward compatible implementations.
type UnimplementedCounterServer struct {
}

func (UnimplementedCounterServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCounterServer) GetProductCount(context.Context, *RequestByID) (*ProductCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCount not implemented")
}
func (UnimplementedCounterServer) SetProductCount(context.Context, *ProductCount) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProductCount not implemented")
}
func (UnimplementedCounterServer) GetParamsForPricer(context.Context, *PricerRequest) (*ParamsForPricer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParamsForPricer not implemented")
}
func (UnimplementedCounterServer) GetProductsWithCounter(context.Context, *Company) (*ReplyID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsWithCounter not implemented")
}
func (UnimplementedCounterServer) DeleteCerasusProductData(context.Context, *RequestByID) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCerasusProductData not implemented")
}
func (UnimplementedCounterServer) mustEmbedUnimplementedCounterServer() {}

// UnsafeCounterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CounterServer will
// result in compilation errors.
type UnsafeCounterServer interface {
	mustEmbedUnimplementedCounterServer()
}

func RegisterCounterServer(s grpc.ServiceRegistrar, srv CounterServer) {
	s.RegisterService(&Counter_ServiceDesc, srv)
}

func _Counter_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Counter/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_GetProductCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).GetProductCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Counter/GetProductCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).GetProductCount(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_SetProductCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).SetProductCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Counter/SetProductCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).SetProductCount(ctx, req.(*ProductCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_GetParamsForPricer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PricerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).GetParamsForPricer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Counter/GetParamsForPricer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).GetParamsForPricer(ctx, req.(*PricerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_GetProductsWithCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).GetProductsWithCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Counter/GetProductsWithCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).GetProductsWithCounter(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_DeleteCerasusProductData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).DeleteCerasusProductData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Counter/DeleteCerasusProductData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).DeleteCerasusProductData(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

// Counter_ServiceDesc is the grpc.ServiceDesc for Counter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Counter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cerasusV2.Counter",
	HandlerType: (*CounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Counter_Ping_Handler,
		},
		{
			MethodName: "GetProductCount",
			Handler:    _Counter_GetProductCount_Handler,
		},
		{
			MethodName: "SetProductCount",
			Handler:    _Counter_SetProductCount_Handler,
		},
		{
			MethodName: "GetParamsForPricer",
			Handler:    _Counter_GetParamsForPricer_Handler,
		},
		{
			MethodName: "GetProductsWithCounter",
			Handler:    _Counter_GetProductsWithCounter_Handler,
		},
		{
			MethodName: "DeleteCerasusProductData",
			Handler:    _Counter_DeleteCerasusProductData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "counter_v2.proto",
}
