// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: brand_v2.proto

package cerasus_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunStringItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datetime string  `protobuf:"bytes,1,opt,name=datetime,proto3" json:"datetime,omitempty"`
	Seller   string  `protobuf:"bytes,2,opt,name=seller,proto3" json:"seller,omitempty"`
	Product  string  `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	Price    float32 `protobuf:"fixed32,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *RunStringItem) Reset() {
	*x = RunStringItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunStringItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunStringItem) ProtoMessage() {}

func (x *RunStringItem) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunStringItem.ProtoReflect.Descriptor instead.
func (*RunStringItem) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{0}
}

func (x *RunStringItem) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *RunStringItem) GetSeller() string {
	if x != nil {
		return x.Seller
	}
	return ""
}

func (x *RunStringItem) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *RunStringItem) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type RunString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*RunStringItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RunString) Reset() {
	*x = RunString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunString) ProtoMessage() {}

func (x *RunString) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunString.ProtoReflect.Descriptor instead.
func (*RunString) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{1}
}

func (x *RunString) GetData() []*RunStringItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type DumpingSeller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seller  *Seller `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	Raiting float32 `protobuf:"fixed32,2,opt,name=raiting,proto3" json:"raiting,omitempty"`
}

func (x *DumpingSeller) Reset() {
	*x = DumpingSeller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingSeller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingSeller) ProtoMessage() {}

func (x *DumpingSeller) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingSeller.ProtoReflect.Descriptor instead.
func (*DumpingSeller) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{2}
}

func (x *DumpingSeller) GetSeller() *Seller {
	if x != nil {
		return x.Seller
	}
	return nil
}

func (x *DumpingSeller) GetRaiting() float32 {
	if x != nil {
		return x.Raiting
	}
	return 0
}

type DumpingSellersLeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DumpingSeller `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DumpingSellersLeaders) Reset() {
	*x = DumpingSellersLeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingSellersLeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingSellersLeaders) ProtoMessage() {}

func (x *DumpingSellersLeaders) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingSellersLeaders.ProtoReflect.Descriptor instead.
func (*DumpingSellersLeaders) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{3}
}

func (x *DumpingSellersLeaders) GetData() []*DumpingSeller {
	if x != nil {
		return x.Data
	}
	return nil
}

type MonitorMonthData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Old  int32  `protobuf:"varint,2,opt,name=old,proto3" json:"old,omitempty"`
	New  int32  `protobuf:"varint,3,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *MonitorMonthData) Reset() {
	*x = MonitorMonthData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorMonthData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorMonthData) ProtoMessage() {}

func (x *MonitorMonthData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorMonthData.ProtoReflect.Descriptor instead.
func (*MonitorMonthData) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{4}
}

func (x *MonitorMonthData) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *MonitorMonthData) GetOld() int32 {
	if x != nil {
		return x.Old
	}
	return 0
}

func (x *MonitorMonthData) GetNew() int32 {
	if x != nil {
		return x.New
	}
	return 0
}

type DumpingUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth         *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	DumpingType  string `protobuf:"bytes,2,opt,name=dumpingType,proto3" json:"dumpingType,omitempty"`
	ID           int64  `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
	Viewed       bool   `protobuf:"varint,4,opt,name=viewed,proto3" json:"viewed,omitempty"`
	CheckedMatch bool   `protobuf:"varint,5,opt,name=checkedMatch,proto3" json:"checkedMatch,omitempty"`
}

func (x *DumpingUpdateRequest) Reset() {
	*x = DumpingUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingUpdateRequest) ProtoMessage() {}

func (x *DumpingUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingUpdateRequest.ProtoReflect.Descriptor instead.
func (*DumpingUpdateRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{5}
}

func (x *DumpingUpdateRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *DumpingUpdateRequest) GetDumpingType() string {
	if x != nil {
		return x.DumpingType
	}
	return ""
}

func (x *DumpingUpdateRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DumpingUpdateRequest) GetViewed() bool {
	if x != nil {
		return x.Viewed
	}
	return false
}

func (x *DumpingUpdateRequest) GetCheckedMatch() bool {
	if x != nil {
		return x.CheckedMatch
	}
	return false
}

type DumpingDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DumpingType  string        `protobuf:"bytes,1,opt,name=dumpingType,proto3" json:"dumpingType,omitempty"`
	ID           int64         `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Product      *BrandProduct `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	Seller       *Seller       `protobuf:"bytes,4,opt,name=seller,proto3" json:"seller,omitempty"`
	BrandPrice   float32       `protobuf:"fixed32,5,opt,name=brandPrice,proto3" json:"brandPrice,omitempty"`
	ParsePrice   float32       `protobuf:"fixed32,6,opt,name=parsePrice,proto3" json:"parsePrice,omitempty"`
	Shop         string        `protobuf:"bytes,7,opt,name=shop,proto3" json:"shop,omitempty"`
	Url          string        `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	PricerMin    float32       `protobuf:"fixed32,9,opt,name=pricerMin,proto3" json:"pricerMin,omitempty"`
	PricerMax    float32       `protobuf:"fixed32,10,opt,name=pricerMax,proto3" json:"pricerMax,omitempty"`
	Screenshot   []byte        `protobuf:"bytes,11,opt,name=screenshot,proto3" json:"screenshot,omitempty"`
	Viewed       bool          `protobuf:"varint,12,opt,name=viewed,proto3" json:"viewed,omitempty"`
	CheckedMatch bool          `protobuf:"varint,13,opt,name=checkedMatch,proto3" json:"checkedMatch,omitempty"`
	Datetime     string        `protobuf:"bytes,14,opt,name=datetime,proto3" json:"datetime,omitempty"`
	NotFinded    bool          `protobuf:"varint,15,opt,name=notFinded,proto3" json:"notFinded,omitempty"`
}

func (x *DumpingDetail) Reset() {
	*x = DumpingDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingDetail) ProtoMessage() {}

func (x *DumpingDetail) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingDetail.ProtoReflect.Descriptor instead.
func (*DumpingDetail) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{6}
}

func (x *DumpingDetail) GetDumpingType() string {
	if x != nil {
		return x.DumpingType
	}
	return ""
}

func (x *DumpingDetail) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DumpingDetail) GetProduct() *BrandProduct {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *DumpingDetail) GetSeller() *Seller {
	if x != nil {
		return x.Seller
	}
	return nil
}

func (x *DumpingDetail) GetBrandPrice() float32 {
	if x != nil {
		return x.BrandPrice
	}
	return 0
}

func (x *DumpingDetail) GetParsePrice() float32 {
	if x != nil {
		return x.ParsePrice
	}
	return 0
}

func (x *DumpingDetail) GetShop() string {
	if x != nil {
		return x.Shop
	}
	return ""
}

func (x *DumpingDetail) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DumpingDetail) GetPricerMin() float32 {
	if x != nil {
		return x.PricerMin
	}
	return 0
}

func (x *DumpingDetail) GetPricerMax() float32 {
	if x != nil {
		return x.PricerMax
	}
	return 0
}

func (x *DumpingDetail) GetScreenshot() []byte {
	if x != nil {
		return x.Screenshot
	}
	return nil
}

func (x *DumpingDetail) GetViewed() bool {
	if x != nil {
		return x.Viewed
	}
	return false
}

func (x *DumpingDetail) GetCheckedMatch() bool {
	if x != nil {
		return x.CheckedMatch
	}
	return false
}

func (x *DumpingDetail) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *DumpingDetail) GetNotFinded() bool {
	if x != nil {
		return x.NotFinded
	}
	return false
}

type DumpingItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth        *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	DumpingType string `protobuf:"bytes,2,opt,name=dumpingType,proto3" json:"dumpingType,omitempty"`
	ID          int64  `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DumpingItemRequest) Reset() {
	*x = DumpingItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingItemRequest) ProtoMessage() {}

func (x *DumpingItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingItemRequest.ProtoReflect.Descriptor instead.
func (*DumpingItemRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{7}
}

func (x *DumpingItemRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *DumpingItemRequest) GetDumpingType() string {
	if x != nil {
		return x.DumpingType
	}
	return ""
}

func (x *DumpingItemRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type DumpingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DumpingDetail `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DumpingList) Reset() {
	*x = DumpingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingList) ProtoMessage() {}

func (x *DumpingList) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingList.ProtoReflect.Descriptor instead.
func (*DumpingList) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{8}
}

func (x *DumpingList) GetData() []*DumpingDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type DumpingListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth        *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	DumpingType string `protobuf:"bytes,2,opt,name=dumpingType,proto3" json:"dumpingType,omitempty"`
	Datetime    string `protobuf:"bytes,3,opt,name=datetime,proto3" json:"datetime,omitempty"`
	Viewed      bool   `protobuf:"varint,4,opt,name=viewed,proto3" json:"viewed,omitempty"`
	NotViewed   bool   `protobuf:"varint,5,opt,name=notViewed,proto3" json:"notViewed,omitempty"`
	NotFinded   bool   `protobuf:"varint,6,opt,name=notFinded,proto3" json:"notFinded,omitempty"`
}

func (x *DumpingListRequest) Reset() {
	*x = DumpingListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingListRequest) ProtoMessage() {}

func (x *DumpingListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingListRequest.ProtoReflect.Descriptor instead.
func (*DumpingListRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{9}
}

func (x *DumpingListRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *DumpingListRequest) GetDumpingType() string {
	if x != nil {
		return x.DumpingType
	}
	return ""
}

func (x *DumpingListRequest) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *DumpingListRequest) GetViewed() bool {
	if x != nil {
		return x.Viewed
	}
	return false
}

func (x *DumpingListRequest) GetNotViewed() bool {
	if x != nil {
		return x.NotViewed
	}
	return false
}

func (x *DumpingListRequest) GetNotFinded() bool {
	if x != nil {
		return x.NotFinded
	}
	return false
}

type DumpingDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date      string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Dumping   int32  `protobuf:"varint,2,opt,name=dumping,proto3" json:"dumping,omitempty"`
	Empty     int32  `protobuf:"varint,3,opt,name=empty,proto3" json:"empty,omitempty"`
	Allcount  int32  `protobuf:"varint,4,opt,name=allcount,proto3" json:"allcount,omitempty"`
	NotViewed int32  `protobuf:"varint,5,opt,name=notViewed,proto3" json:"notViewed,omitempty"`
}

func (x *DumpingDay) Reset() {
	*x = DumpingDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingDay) ProtoMessage() {}

func (x *DumpingDay) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingDay.ProtoReflect.Descriptor instead.
func (*DumpingDay) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{10}
}

func (x *DumpingDay) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DumpingDay) GetDumping() int32 {
	if x != nil {
		return x.Dumping
	}
	return 0
}

func (x *DumpingDay) GetEmpty() int32 {
	if x != nil {
		return x.Empty
	}
	return 0
}

func (x *DumpingDay) GetAllcount() int32 {
	if x != nil {
		return x.Allcount
	}
	return 0
}

func (x *DumpingDay) GetNotViewed() int32 {
	if x != nil {
		return x.NotViewed
	}
	return 0
}

type DumpingDays struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DumpingDay `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DumpingDays) Reset() {
	*x = DumpingDays{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingDays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingDays) ProtoMessage() {}

func (x *DumpingDays) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingDays.ProtoReflect.Descriptor instead.
func (*DumpingDays) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{11}
}

func (x *DumpingDays) GetData() []*DumpingDay {
	if x != nil {
		return x.Data
	}
	return nil
}

type BrandCountWidget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BrandCountWidget) Reset() {
	*x = BrandCountWidget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandCountWidget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandCountWidget) ProtoMessage() {}

func (x *BrandCountWidget) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandCountWidget.ProtoReflect.Descriptor instead.
func (*BrandCountWidget) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{12}
}

func (x *BrandCountWidget) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BrandCountWidget) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type BrandCountWidgets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*BrandCountWidget `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BrandCountWidgets) Reset() {
	*x = BrandCountWidgets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandCountWidgets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandCountWidgets) ProtoMessage() {}

func (x *BrandCountWidgets) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandCountWidgets.ProtoReflect.Descriptor instead.
func (*BrandCountWidgets) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{13}
}

func (x *BrandCountWidgets) GetData() []*BrandCountWidget {
	if x != nil {
		return x.Data
	}
	return nil
}

type Seller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   int64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Comment              string  `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Person               string  `protobuf:"bytes,4,opt,name=person,proto3" json:"person,omitempty"`
	Phone                string  `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Email                string  `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Active               bool    `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`
	LinkedCompaniesCount int32   `protobuf:"varint,8,opt,name=linkedCompaniesCount,proto3" json:"linkedCompaniesCount,omitempty"`
	Pricer               bool    `protobuf:"varint,9,opt,name=pricer,proto3" json:"pricer,omitempty"`
	OrderSum             float32 `protobuf:"fixed32,10,opt,name=orderSum,proto3" json:"orderSum,omitempty"`
	OrderCount           int32   `protobuf:"varint,11,opt,name=orderCount,proto3" json:"orderCount,omitempty"`
}

func (x *Seller) Reset() {
	*x = Seller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Seller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Seller) ProtoMessage() {}

func (x *Seller) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Seller.ProtoReflect.Descriptor instead.
func (*Seller) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{14}
}

func (x *Seller) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Seller) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Seller) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Seller) GetPerson() string {
	if x != nil {
		return x.Person
	}
	return ""
}

func (x *Seller) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Seller) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Seller) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Seller) GetLinkedCompaniesCount() int32 {
	if x != nil {
		return x.LinkedCompaniesCount
	}
	return 0
}

func (x *Seller) GetPricer() bool {
	if x != nil {
		return x.Pricer
	}
	return false
}

func (x *Seller) GetOrderSum() float32 {
	if x != nil {
		return x.OrderSum
	}
	return 0
}

func (x *Seller) GetOrderCount() int32 {
	if x != nil {
		return x.OrderCount
	}
	return 0
}

type Sellers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sellers    []*Seller   `protobuf:"bytes,1,rep,name=sellers,proto3" json:"sellers,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *Sellers) Reset() {
	*x = Sellers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sellers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sellers) ProtoMessage() {}

func (x *Sellers) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sellers.ProtoReflect.Descriptor instead.
func (*Sellers) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{15}
}

func (x *Sellers) GetSellers() []*Seller {
	if x != nil {
		return x.Sellers
	}
	return nil
}

func (x *Sellers) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SellerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *Auth   `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Seller *Seller `protobuf:"bytes,2,opt,name=seller,proto3" json:"seller,omitempty"`
}

func (x *SellerRequest) Reset() {
	*x = SellerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerRequest) ProtoMessage() {}

func (x *SellerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerRequest.ProtoReflect.Descriptor instead.
func (*SellerRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{16}
}

func (x *SellerRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SellerRequest) GetSeller() *Seller {
	if x != nil {
		return x.Seller
	}
	return nil
}

type SellerProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	SellerID  int64 `protobuf:"varint,2,opt,name=sellerID,proto3" json:"sellerID,omitempty"`
	Page      int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Unsorted  bool  `protobuf:"varint,4,opt,name=unsorted,proto3" json:"unsorted,omitempty"`
	ProductID int64 `protobuf:"varint,5,opt,name=productID,proto3" json:"productID,omitempty"`
	CompanyID int64 `protobuf:"varint,6,opt,name=companyID,proto3" json:"companyID,omitempty"`
}

func (x *SellerProductsRequest) Reset() {
	*x = SellerProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerProductsRequest) ProtoMessage() {}

func (x *SellerProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerProductsRequest.ProtoReflect.Descriptor instead.
func (*SellerProductsRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{17}
}

func (x *SellerProductsRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SellerProductsRequest) GetSellerID() int64 {
	if x != nil {
		return x.SellerID
	}
	return 0
}

func (x *SellerProductsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SellerProductsRequest) GetUnsorted() bool {
	if x != nil {
		return x.Unsorted
	}
	return false
}

func (x *SellerProductsRequest) GetProductID() int64 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

func (x *SellerProductsRequest) GetCompanyID() int64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

type SellerProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products   []*SellerProduct `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
	Pagination *Pagination      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *SellerProducts) Reset() {
	*x = SellerProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerProducts) ProtoMessage() {}

func (x *SellerProducts) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerProducts.ProtoReflect.Descriptor instead.
func (*SellerProducts) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{18}
}

func (x *SellerProducts) GetProducts() []*SellerProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *SellerProducts) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SellerProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product        *Product `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
	BrandProductID int64    `protobuf:"varint,2,opt,name=brandProductID,proto3" json:"brandProductID,omitempty"`
	PricerShops    []string `protobuf:"bytes,3,rep,name=pricerShops,proto3" json:"pricerShops,omitempty"`
}

func (x *SellerProduct) Reset() {
	*x = SellerProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerProduct) ProtoMessage() {}

func (x *SellerProduct) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerProduct.ProtoReflect.Descriptor instead.
func (*SellerProduct) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{19}
}

func (x *SellerProduct) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *SellerProduct) GetBrandProductID() int64 {
	if x != nil {
		return x.BrandProductID
	}
	return 0
}

func (x *SellerProduct) GetPricerShops() []string {
	if x != nil {
		return x.PricerShops
	}
	return nil
}

type BrandProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products   []*BrandProduct `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
	Pagination *Pagination     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *BrandProducts) Reset() {
	*x = BrandProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandProducts) ProtoMessage() {}

func (x *BrandProducts) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandProducts.ProtoReflect.Descriptor instead.
func (*BrandProducts) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{20}
}

func (x *BrandProducts) GetProducts() []*BrandProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *BrandProducts) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type BrandProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Article string `protobuf:"bytes,3,opt,name=article,proto3" json:"article,omitempty"`
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	Preview string `protobuf:"bytes,5,opt,name=preview,proto3" json:"preview,omitempty"`
	Active  bool   `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	Updated string `protobuf:"bytes,7,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *BrandProduct) Reset() {
	*x = BrandProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandProduct) ProtoMessage() {}

func (x *BrandProduct) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandProduct.ProtoReflect.Descriptor instead.
func (*BrandProduct) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{21}
}

func (x *BrandProduct) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BrandProduct) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BrandProduct) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *BrandProduct) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BrandProduct) GetPreview() string {
	if x != nil {
		return x.Preview
	}
	return ""
}

func (x *BrandProduct) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *BrandProduct) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

type ProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *Auth         `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Product *BrandProduct `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
}

func (x *ProductRequest) Reset() {
	*x = ProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductRequest) ProtoMessage() {}

func (x *ProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductRequest.ProtoReflect.Descriptor instead.
func (*ProductRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{22}
}

func (x *ProductRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ProductRequest) GetProduct() *BrandProduct {
	if x != nil {
		return x.Product
	}
	return nil
}

type SellerProductLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth            *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	SellerID        int64 `protobuf:"varint,2,opt,name=sellerID,proto3" json:"sellerID,omitempty"`
	CompanyID       int64 `protobuf:"varint,3,opt,name=companyID,proto3" json:"companyID,omitempty"`
	SellerProductID int64 `protobuf:"varint,4,opt,name=sellerProductID,proto3" json:"sellerProductID,omitempty"`
	BrandProductID  int64 `protobuf:"varint,5,opt,name=brandProductID,proto3" json:"brandProductID,omitempty"`
}

func (x *SellerProductLinkRequest) Reset() {
	*x = SellerProductLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerProductLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerProductLinkRequest) ProtoMessage() {}

func (x *SellerProductLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerProductLinkRequest.ProtoReflect.Descriptor instead.
func (*SellerProductLinkRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{23}
}

func (x *SellerProductLinkRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SellerProductLinkRequest) GetSellerID() int64 {
	if x != nil {
		return x.SellerID
	}
	return 0
}

func (x *SellerProductLinkRequest) GetCompanyID() int64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *SellerProductLinkRequest) GetSellerProductID() int64 {
	if x != nil {
		return x.SellerProductID
	}
	return 0
}

func (x *SellerProductLinkRequest) GetBrandProductID() int64 {
	if x != nil {
		return x.BrandProductID
	}
	return 0
}

type BrandUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	ProductID int64  `protobuf:"varint,2,opt,name=productID,proto3" json:"productID,omitempty"`
	Chunk     []byte `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	FileName  string `protobuf:"bytes,4,opt,name=fileName,proto3" json:"fileName,omitempty"`
	Type      string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *BrandUploadRequest) Reset() {
	*x = BrandUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandUploadRequest) ProtoMessage() {}

func (x *BrandUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandUploadRequest.ProtoReflect.Descriptor instead.
func (*BrandUploadRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{24}
}

func (x *BrandUploadRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BrandUploadRequest) GetProductID() int64 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

func (x *BrandUploadRequest) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *BrandUploadRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *BrandUploadRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ProductPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	ProductID int64  `protobuf:"varint,2,opt,name=productID,proto3" json:"productID,omitempty"`
	Price     int32  `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	Date      string `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *ProductPriceRequest) Reset() {
	*x = ProductPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductPriceRequest) ProtoMessage() {}

func (x *ProductPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductPriceRequest.ProtoReflect.Descriptor instead.
func (*ProductPriceRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{25}
}

func (x *ProductPriceRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ProductPriceRequest) GetProductID() int64 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

func (x *ProductPriceRequest) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductPriceRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type ProductPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price int32  `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	Date  string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *ProductPrice) Reset() {
	*x = ProductPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductPrice) ProtoMessage() {}

func (x *ProductPrice) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductPrice.ProtoReflect.Descriptor instead.
func (*ProductPrice) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{26}
}

func (x *ProductPrice) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductPrice) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type ProductPrices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prices []*ProductPrice `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices,omitempty"`
}

func (x *ProductPrices) Reset() {
	*x = ProductPrices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductPrices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductPrices) ProtoMessage() {}

func (x *ProductPrices) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductPrices.ProtoReflect.Descriptor instead.
func (*ProductPrices) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{27}
}

func (x *ProductPrices) GetPrices() []*ProductPrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

type DataStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Error   bool   `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	Sort    int32  `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *DataStep) Reset() {
	*x = DataStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataStep) ProtoMessage() {}

func (x *DataStep) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataStep.ProtoReflect.Descriptor instead.
func (*DataStep) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{28}
}

func (x *DataStep) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DataStep) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *DataStep) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type DataByCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shop         string        `protobuf:"bytes,1,opt,name=shop,proto3" json:"shop,omitempty"`
	ShopProduct  *ShopProduct  `protobuf:"bytes,2,opt,name=shopProduct,proto3" json:"shopProduct,omitempty"`
	Product      *Product      `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	BrandProduct *BrandProduct `protobuf:"bytes,4,opt,name=brandProduct,proto3" json:"brandProduct,omitempty"`
	Company      *Company      `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
	Seller       *Seller       `protobuf:"bytes,6,opt,name=seller,proto3" json:"seller,omitempty"`
	Steps        []*DataStep   `protobuf:"bytes,7,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *DataByCode) Reset() {
	*x = DataByCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataByCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataByCode) ProtoMessage() {}

func (x *DataByCode) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataByCode.ProtoReflect.Descriptor instead.
func (*DataByCode) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{29}
}

func (x *DataByCode) GetShop() string {
	if x != nil {
		return x.Shop
	}
	return ""
}

func (x *DataByCode) GetShopProduct() *ShopProduct {
	if x != nil {
		return x.ShopProduct
	}
	return nil
}

func (x *DataByCode) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *DataByCode) GetBrandProduct() *BrandProduct {
	if x != nil {
		return x.BrandProduct
	}
	return nil
}

func (x *DataByCode) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *DataByCode) GetSeller() *Seller {
	if x != nil {
		return x.Seller
	}
	return nil
}

func (x *DataByCode) GetSteps() []*DataStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

type AnalyzeSellersProductData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product *BrandProduct `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
	Sum     float32       `protobuf:"fixed32,2,opt,name=sum,proto3" json:"sum,omitempty"`
	Count   int32         `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AnalyzeSellersProductData) Reset() {
	*x = AnalyzeSellersProductData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeSellersProductData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeSellersProductData) ProtoMessage() {}

func (x *AnalyzeSellersProductData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeSellersProductData.ProtoReflect.Descriptor instead.
func (*AnalyzeSellersProductData) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{30}
}

func (x *AnalyzeSellersProductData) GetProduct() *BrandProduct {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *AnalyzeSellersProductData) GetSum() float32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *AnalyzeSellersProductData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AnalyzeSellersProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AnalyzeSellersProductData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AnalyzeSellersProduct) Reset() {
	*x = AnalyzeSellersProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeSellersProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeSellersProduct) ProtoMessage() {}

func (x *AnalyzeSellersProduct) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeSellersProduct.ProtoReflect.Descriptor instead.
func (*AnalyzeSellersProduct) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{31}
}

func (x *AnalyzeSellersProduct) GetData() []*AnalyzeSellersProductData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProductData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product *BrandProduct `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
	Count   int32         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Sum     float32       `protobuf:"fixed32,3,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (x *ProductData) Reset() {
	*x = ProductData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductData) ProtoMessage() {}

func (x *ProductData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductData.ProtoReflect.Descriptor instead.
func (*ProductData) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{32}
}

func (x *ProductData) GetProduct() *BrandProduct {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *ProductData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ProductData) GetSum() float32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

type ProductsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ProductData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ProductsData) Reset() {
	*x = ProductsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsData) ProtoMessage() {}

func (x *ProductsData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsData.ProtoReflect.Descriptor instead.
func (*ProductsData) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{33}
}

func (x *ProductsData) GetData() []*ProductData {
	if x != nil {
		return x.Data
	}
	return nil
}

type Assortiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrandCount  int32 `protobuf:"varint,1,opt,name=brandCount,proto3" json:"brandCount,omitempty"`
	SellerCount int32 `protobuf:"varint,2,opt,name=sellerCount,proto3" json:"sellerCount,omitempty"`
}

func (x *Assortiment) Reset() {
	*x = Assortiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assortiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assortiment) ProtoMessage() {}

func (x *Assortiment) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assortiment.ProtoReflect.Descriptor instead.
func (*Assortiment) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{34}
}

func (x *Assortiment) GetBrandCount() int32 {
	if x != nil {
		return x.BrandCount
	}
	return 0
}

func (x *Assortiment) GetSellerCount() int32 {
	if x != nil {
		return x.SellerCount
	}
	return 0
}

type OutProductUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID  int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *OutProductUrl) Reset() {
	*x = OutProductUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutProductUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutProductUrl) ProtoMessage() {}

func (x *OutProductUrl) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutProductUrl.ProtoReflect.Descriptor instead.
func (*OutProductUrl) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{35}
}

func (x *OutProductUrl) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *OutProductUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type OutProductUrlData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shop string           `protobuf:"bytes,1,opt,name=shop,proto3" json:"shop,omitempty"`
	Urls []*OutProductUrl `protobuf:"bytes,2,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *OutProductUrlData) Reset() {
	*x = OutProductUrlData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutProductUrlData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutProductUrlData) ProtoMessage() {}

func (x *OutProductUrlData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutProductUrlData.ProtoReflect.Descriptor instead.
func (*OutProductUrlData) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{36}
}

func (x *OutProductUrlData) GetShop() string {
	if x != nil {
		return x.Shop
	}
	return ""
}

func (x *OutProductUrlData) GetUrls() []*OutProductUrl {
	if x != nil {
		return x.Urls
	}
	return nil
}

type OutProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Product *BrandProduct        `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
	UrlData []*OutProductUrlData `protobuf:"bytes,3,rep,name=urlData,proto3" json:"urlData,omitempty"`
}

func (x *OutProduct) Reset() {
	*x = OutProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutProduct) ProtoMessage() {}

func (x *OutProduct) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutProduct.ProtoReflect.Descriptor instead.
func (*OutProduct) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{37}
}

func (x *OutProduct) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *OutProduct) GetProduct() *BrandProduct {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *OutProduct) GetUrlData() []*OutProductUrlData {
	if x != nil {
		return x.UrlData
	}
	return nil
}

type OutProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products   []*OutProduct `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
	Pagination *Pagination   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *OutProducts) Reset() {
	*x = OutProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutProducts) ProtoMessage() {}

func (x *OutProducts) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutProducts.ProtoReflect.Descriptor instead.
func (*OutProducts) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{38}
}

func (x *OutProducts) GetProducts() []*OutProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *OutProducts) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type OutProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	SellerID int64 `protobuf:"varint,2,opt,name=sellerID,proto3" json:"sellerID,omitempty"`
	Page     int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *OutProductsRequest) Reset() {
	*x = OutProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutProductsRequest) ProtoMessage() {}

func (x *OutProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutProductsRequest.ProtoReflect.Descriptor instead.
func (*OutProductsRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{39}
}

func (x *OutProductsRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *OutProductsRequest) GetSellerID() int64 {
	if x != nil {
		return x.SellerID
	}
	return 0
}

func (x *OutProductsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type SellerOutProductUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	ID   int64  `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Shop string `protobuf:"bytes,3,opt,name=shop,proto3" json:"shop,omitempty"`
	Url  string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *SellerOutProductUrlRequest) Reset() {
	*x = SellerOutProductUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerOutProductUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerOutProductUrlRequest) ProtoMessage() {}

func (x *SellerOutProductUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerOutProductUrlRequest.ProtoReflect.Descriptor instead.
func (*SellerOutProductUrlRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{40}
}

func (x *SellerOutProductUrlRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SellerOutProductUrlRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *SellerOutProductUrlRequest) GetShop() string {
	if x != nil {
		return x.Shop
	}
	return ""
}

func (x *SellerOutProductUrlRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SellerOutProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	SellerID  int64 `protobuf:"varint,2,opt,name=sellerID,proto3" json:"sellerID,omitempty"`
	ProductID int64 `protobuf:"varint,3,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *SellerOutProductRequest) Reset() {
	*x = SellerOutProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerOutProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerOutProductRequest) ProtoMessage() {}

func (x *SellerOutProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerOutProductRequest.ProtoReflect.Descriptor instead.
func (*SellerOutProductRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{41}
}

func (x *SellerOutProductRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SellerOutProductRequest) GetSellerID() int64 {
	if x != nil {
		return x.SellerID
	}
	return 0
}

func (x *SellerOutProductRequest) GetProductID() int64 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

var File_brand_v2_proto protoreflect.FileDescriptor

var file_brand_v2_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x1a, 0x10, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a,
	0x0d, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x39, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a,
	0x0d, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x22, 0x45, 0x0a, 0x15, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x10, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6f, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x22, 0xa9, 0x01, 0x0a, 0x14, 0x44, 0x75, 0x6d, 0x70, 0x69,
	0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x75, 0x6d, 0x70, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x22, 0xd7, 0x03, 0x0a, 0x0d, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x75, 0x6d, 0x70, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x72, 0x4d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x6b, 0x0a, 0x12,
	0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x75, 0x6d, 0x70, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x75,
	0x6d, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x3b, 0x0a, 0x0b, 0x44, 0x75, 0x6d,
	0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcb, 0x01, 0x0a, 0x12, 0x44, 0x75, 0x6d, 0x70, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x74,
	0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x0a, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x6d, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x75, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x56, 0x69, 0x65, 0x77, 0x65,
	0x64, 0x22, 0x38, 0x0a, 0x0b, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3c, 0x0a, 0x10, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x11, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x12, 0x2f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xaa, 0x02, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x07,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x0d, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0xc4, 0x01, 0x0a,
	0x15, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x6e, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75,
	0x6e, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x44, 0x22, 0x7d, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x22, 0x7b, 0x0a, 0x0d,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x33, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x01, 0x0a, 0x0c, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x68, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x18, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56,
	0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x38, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x40, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x65, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xc9, 0x02, 0x0a, 0x0a, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x70, 0x12, 0x38, 0x0a, 0x0b,
	0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x68,
	0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x70, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x0c, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x29, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0x76, 0x0a, 0x19, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x51, 0x0a,
	0x15, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x68, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x31, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0x3a, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x6f, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x55, 0x0a, 0x11, 0x4f, 0x75,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x68, 0x6f, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x4f, 0x75,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x04, 0x75, 0x72, 0x6c,
	0x73, 0x22, 0x87, 0x01, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x31, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x77, 0x0a, 0x0b, 0x4f,
	0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x35, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x12, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22,
	0x77, 0x0a, 0x1a, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x68, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x78, 0x0a, 0x17, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x32, 0x97, 0x1e, 0x0a, 0x07, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x12, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x1c, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61,
	0x67, 0x65, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56,
	0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x11, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73,
	0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x56, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x67,
	0x65, 0x1a, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x19,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x11, 0x4c, 0x69,
	0x6e, 0x6b, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x23, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x17,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x56, 0x32, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x22, 0x00, 0x12,
	0x3b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x12, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x1a, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12,
	0x50, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x19, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x20, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x19, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x17, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x4c, 0x69,
	0x6e, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x73, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x41, 0x73, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x56, 0x32, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x79, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e,
	0x41, 0x73, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56,
	0x32, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56,
	0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x15, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x22, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x16, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x19, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x4e, 0x6f, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x79, 0x49, 0x44, 0x1a, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12,
	0x44, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x4a, 0x6f, 0x62, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x1b, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x73, 0x1a,
	0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x44, 0x75, 0x6d, 0x70,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x1f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x44,
	0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a,
	0x0c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x0f, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x10,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x64,
	0x61, 0x72, 0x12, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x1a, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e,
	0x4c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x12, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x1a, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x4c, 0x69,
	0x6e, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x0f, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x1b, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x15,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56,
	0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x75, 0x6d, 0x70,
	0x69, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x0f, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x20, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12,
	0x3b, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x1a, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x42, 0x23, 0x5a, 0x21,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x73, 0x61, 0x6e,
	0x79, 0x63, 0x68, 0x2f, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brand_v2_proto_rawDescOnce sync.Once
	file_brand_v2_proto_rawDescData = file_brand_v2_proto_rawDesc
)

func file_brand_v2_proto_rawDescGZIP() []byte {
	file_brand_v2_proto_rawDescOnce.Do(func() {
		file_brand_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_brand_v2_proto_rawDescData)
	})
	return file_brand_v2_proto_rawDescData
}

var file_brand_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_brand_v2_proto_goTypes = []interface{}{
	(*RunStringItem)(nil),              // 0: cerasusV2.RunStringItem
	(*RunString)(nil),                  // 1: cerasusV2.RunString
	(*DumpingSeller)(nil),              // 2: cerasusV2.DumpingSeller
	(*DumpingSellersLeaders)(nil),      // 3: cerasusV2.DumpingSellersLeaders
	(*MonitorMonthData)(nil),           // 4: cerasusV2.MonitorMonthData
	(*DumpingUpdateRequest)(nil),       // 5: cerasusV2.DumpingUpdateRequest
	(*DumpingDetail)(nil),              // 6: cerasusV2.DumpingDetail
	(*DumpingItemRequest)(nil),         // 7: cerasusV2.DumpingItemRequest
	(*DumpingList)(nil),                // 8: cerasusV2.DumpingList
	(*DumpingListRequest)(nil),         // 9: cerasusV2.DumpingListRequest
	(*DumpingDay)(nil),                 // 10: cerasusV2.DumpingDay
	(*DumpingDays)(nil),                // 11: cerasusV2.DumpingDays
	(*BrandCountWidget)(nil),           // 12: cerasusV2.BrandCountWidget
	(*BrandCountWidgets)(nil),          // 13: cerasusV2.BrandCountWidgets
	(*Seller)(nil),                     // 14: cerasusV2.Seller
	(*Sellers)(nil),                    // 15: cerasusV2.Sellers
	(*SellerRequest)(nil),              // 16: cerasusV2.SellerRequest
	(*SellerProductsRequest)(nil),      // 17: cerasusV2.SellerProductsRequest
	(*SellerProducts)(nil),             // 18: cerasusV2.SellerProducts
	(*SellerProduct)(nil),              // 19: cerasusV2.SellerProduct
	(*BrandProducts)(nil),              // 20: cerasusV2.BrandProducts
	(*BrandProduct)(nil),               // 21: cerasusV2.BrandProduct
	(*ProductRequest)(nil),             // 22: cerasusV2.ProductRequest
	(*SellerProductLinkRequest)(nil),   // 23: cerasusV2.SellerProductLinkRequest
	(*BrandUploadRequest)(nil),         // 24: cerasusV2.BrandUploadRequest
	(*ProductPriceRequest)(nil),        // 25: cerasusV2.ProductPriceRequest
	(*ProductPrice)(nil),               // 26: cerasusV2.ProductPrice
	(*ProductPrices)(nil),              // 27: cerasusV2.ProductPrices
	(*DataStep)(nil),                   // 28: cerasusV2.DataStep
	(*DataByCode)(nil),                 // 29: cerasusV2.DataByCode
	(*AnalyzeSellersProductData)(nil),  // 30: cerasusV2.AnalyzeSellersProductData
	(*AnalyzeSellersProduct)(nil),      // 31: cerasusV2.AnalyzeSellersProduct
	(*ProductData)(nil),                // 32: cerasusV2.ProductData
	(*ProductsData)(nil),               // 33: cerasusV2.ProductsData
	(*Assortiment)(nil),                // 34: cerasusV2.Assortiment
	(*OutProductUrl)(nil),              // 35: cerasusV2.OutProductUrl
	(*OutProductUrlData)(nil),          // 36: cerasusV2.OutProductUrlData
	(*OutProduct)(nil),                 // 37: cerasusV2.OutProduct
	(*OutProducts)(nil),                // 38: cerasusV2.OutProducts
	(*OutProductsRequest)(nil),         // 39: cerasusV2.OutProductsRequest
	(*SellerOutProductUrlRequest)(nil), // 40: cerasusV2.SellerOutProductUrlRequest
	(*SellerOutProductRequest)(nil),    // 41: cerasusV2.SellerOutProductRequest
	(*Auth)(nil),                       // 42: cerasusV2.Auth
	(*Pagination)(nil),                 // 43: cerasusV2.Pagination
	(*Product)(nil),                    // 44: cerasusV2.Product
	(*ShopProduct)(nil),                // 45: cerasusV2.ShopProduct
	(*Company)(nil),                    // 46: cerasusV2.Company
	(*PingRequest)(nil),                // 47: cerasusV2.PingRequest
	(*RequestByPage)(nil),              // 48: cerasusV2.RequestByPage
	(*RequestByID)(nil),                // 49: cerasusV2.RequestByID
	(*ImageRequest)(nil),               // 50: cerasusV2.ImageRequest
	(*SearchRequest)(nil),              // 51: cerasusV2.SearchRequest
	(*LineGraphRequest)(nil),           // 52: cerasusV2.LineGraphRequest
	(*RequestByDates)(nil),             // 53: cerasusV2.RequestByDates
	(*ParserGetRequest)(nil),           // 54: cerasusV2.ParserGetRequest
	(*ParserSetRequest)(nil),           // 55: cerasusV2.ParserSetRequest
	(*DetectorGetRequest)(nil),         // 56: cerasusV2.DetectorGetRequest
	(*DetectorSetRequest)(nil),         // 57: cerasusV2.DetectorSetRequest
	(*PingReply)(nil),                  // 58: cerasusV2.PingReply
	(*StatusReply)(nil),                // 59: cerasusV2.StatusReply
	(*CompanyList)(nil),                // 60: cerasusV2.CompanyList
	(*ImageReply)(nil),                 // 61: cerasusV2.ImageReply
	(*LineGraphics)(nil),               // 62: cerasusV2.LineGraphics
	(*RoundGraphic)(nil),               // 63: cerasusV2.RoundGraphic
	(*ParserJob)(nil),                  // 64: cerasusV2.ParserJob
	(*DetectorGetReply)(nil),           // 65: cerasusV2.DetectorGetReply
	(*LineGraph)(nil),                  // 66: cerasusV2.LineGraph
	(*Count)(nil),                      // 67: cerasusV2.Count
	(*OrderLeaders)(nil),               // 68: cerasusV2.OrderLeaders
}
var file_brand_v2_proto_depIdxs = []int32{
	0,  // 0: cerasusV2.RunString.data:type_name -> cerasusV2.RunStringItem
	14, // 1: cerasusV2.DumpingSeller.seller:type_name -> cerasusV2.Seller
	2,  // 2: cerasusV2.DumpingSellersLeaders.data:type_name -> cerasusV2.DumpingSeller
	42, // 3: cerasusV2.DumpingUpdateRequest.auth:type_name -> cerasusV2.Auth
	21, // 4: cerasusV2.DumpingDetail.product:type_name -> cerasusV2.BrandProduct
	14, // 5: cerasusV2.DumpingDetail.seller:type_name -> cerasusV2.Seller
	42, // 6: cerasusV2.DumpingItemRequest.auth:type_name -> cerasusV2.Auth
	6,  // 7: cerasusV2.DumpingList.data:type_name -> cerasusV2.DumpingDetail
	42, // 8: cerasusV2.DumpingListRequest.auth:type_name -> cerasusV2.Auth
	10, // 9: cerasusV2.DumpingDays.data:type_name -> cerasusV2.DumpingDay
	12, // 10: cerasusV2.BrandCountWidgets.data:type_name -> cerasusV2.BrandCountWidget
	14, // 11: cerasusV2.Sellers.sellers:type_name -> cerasusV2.Seller
	43, // 12: cerasusV2.Sellers.pagination:type_name -> cerasusV2.Pagination
	42, // 13: cerasusV2.SellerRequest.auth:type_name -> cerasusV2.Auth
	14, // 14: cerasusV2.SellerRequest.seller:type_name -> cerasusV2.Seller
	42, // 15: cerasusV2.SellerProductsRequest.auth:type_name -> cerasusV2.Auth
	19, // 16: cerasusV2.SellerProducts.products:type_name -> cerasusV2.SellerProduct
	43, // 17: cerasusV2.SellerProducts.pagination:type_name -> cerasusV2.Pagination
	44, // 18: cerasusV2.SellerProduct.product:type_name -> cerasusV2.Product
	21, // 19: cerasusV2.BrandProducts.products:type_name -> cerasusV2.BrandProduct
	43, // 20: cerasusV2.BrandProducts.pagination:type_name -> cerasusV2.Pagination
	42, // 21: cerasusV2.ProductRequest.auth:type_name -> cerasusV2.Auth
	21, // 22: cerasusV2.ProductRequest.product:type_name -> cerasusV2.BrandProduct
	42, // 23: cerasusV2.SellerProductLinkRequest.auth:type_name -> cerasusV2.Auth
	42, // 24: cerasusV2.BrandUploadRequest.auth:type_name -> cerasusV2.Auth
	42, // 25: cerasusV2.ProductPriceRequest.auth:type_name -> cerasusV2.Auth
	26, // 26: cerasusV2.ProductPrices.prices:type_name -> cerasusV2.ProductPrice
	45, // 27: cerasusV2.DataByCode.shopProduct:type_name -> cerasusV2.ShopProduct
	44, // 28: cerasusV2.DataByCode.product:type_name -> cerasusV2.Product
	21, // 29: cerasusV2.DataByCode.brandProduct:type_name -> cerasusV2.BrandProduct
	46, // 30: cerasusV2.DataByCode.company:type_name -> cerasusV2.Company
	14, // 31: cerasusV2.DataByCode.seller:type_name -> cerasusV2.Seller
	28, // 32: cerasusV2.DataByCode.steps:type_name -> cerasusV2.DataStep
	21, // 33: cerasusV2.AnalyzeSellersProductData.product:type_name -> cerasusV2.BrandProduct
	30, // 34: cerasusV2.AnalyzeSellersProduct.data:type_name -> cerasusV2.AnalyzeSellersProductData
	21, // 35: cerasusV2.ProductData.product:type_name -> cerasusV2.BrandProduct
	32, // 36: cerasusV2.ProductsData.data:type_name -> cerasusV2.ProductData
	35, // 37: cerasusV2.OutProductUrlData.urls:type_name -> cerasusV2.OutProductUrl
	21, // 38: cerasusV2.OutProduct.product:type_name -> cerasusV2.BrandProduct
	36, // 39: cerasusV2.OutProduct.urlData:type_name -> cerasusV2.OutProductUrlData
	37, // 40: cerasusV2.OutProducts.products:type_name -> cerasusV2.OutProduct
	43, // 41: cerasusV2.OutProducts.pagination:type_name -> cerasusV2.Pagination
	42, // 42: cerasusV2.OutProductsRequest.auth:type_name -> cerasusV2.Auth
	42, // 43: cerasusV2.SellerOutProductUrlRequest.auth:type_name -> cerasusV2.Auth
	42, // 44: cerasusV2.SellerOutProductRequest.auth:type_name -> cerasusV2.Auth
	47, // 45: cerasusV2.Brander.Ping:input_type -> cerasusV2.PingRequest
	42, // 46: cerasusV2.Brander.GetCountWidgets:input_type -> cerasusV2.Auth
	48, // 47: cerasusV2.Brander.GetSellers:input_type -> cerasusV2.RequestByPage
	49, // 48: cerasusV2.Brander.GetSeller:input_type -> cerasusV2.RequestByID
	16, // 49: cerasusV2.Brander.CreateSeller:input_type -> cerasusV2.SellerRequest
	16, // 50: cerasusV2.Brander.UpdateSeller:input_type -> cerasusV2.SellerRequest
	49, // 51: cerasusV2.Brander.GetSellerCompanies:input_type -> cerasusV2.RequestByID
	17, // 52: cerasusV2.Brander.GetSellerProducts:input_type -> cerasusV2.SellerProductsRequest
	17, // 53: cerasusV2.Brander.GetSellerProduct:input_type -> cerasusV2.SellerProductsRequest
	48, // 54: cerasusV2.Brander.GetProducts:input_type -> cerasusV2.RequestByPage
	22, // 55: cerasusV2.Brander.CreateProduct:input_type -> cerasusV2.ProductRequest
	49, // 56: cerasusV2.Brander.GetProduct:input_type -> cerasusV2.RequestByID
	22, // 57: cerasusV2.Brander.UpdateProduct:input_type -> cerasusV2.ProductRequest
	23, // 58: cerasusV2.Brander.LinkSellerProduct:input_type -> cerasusV2.SellerProductLinkRequest
	50, // 59: cerasusV2.Brander.GetImage:input_type -> cerasusV2.ImageRequest
	24, // 60: cerasusV2.Brander.UploadFile:input_type -> cerasusV2.BrandUploadRequest
	49, // 61: cerasusV2.Brander.GetProductPrice:input_type -> cerasusV2.RequestByID
	49, // 62: cerasusV2.Brander.GetProductPrices:input_type -> cerasusV2.RequestByID
	25, // 63: cerasusV2.Brander.SetProductPrice:input_type -> cerasusV2.ProductPriceRequest
	51, // 64: cerasusV2.Brander.SearchDataByCode:input_type -> cerasusV2.SearchRequest
	52, // 65: cerasusV2.Brander.GetOrdersGraph:input_type -> cerasusV2.LineGraphRequest
	42, // 66: cerasusV2.Brander.GetShopsGraph:input_type -> cerasusV2.Auth
	53, // 67: cerasusV2.Brander.GetSellersData:input_type -> cerasusV2.RequestByDates
	52, // 68: cerasusV2.Brander.GetSellerAnalyzeOrders:input_type -> cerasusV2.LineGraphRequest
	53, // 69: cerasusV2.Brander.GetSellerAnalyzeProducts:input_type -> cerasusV2.RequestByDates
	53, // 70: cerasusV2.Brander.GetProductsData:input_type -> cerasusV2.RequestByDates
	52, // 71: cerasusV2.Brander.GetProductsAnalyzeOrders:input_type -> cerasusV2.LineGraphRequest
	53, // 72: cerasusV2.Brander.GetProductsAnalyzeSellers:input_type -> cerasusV2.RequestByDates
	49, // 73: cerasusV2.Brander.GetSellerAssortiment:input_type -> cerasusV2.RequestByID
	49, // 74: cerasusV2.Brander.GetProductSellersCount:input_type -> cerasusV2.RequestByID
	39, // 75: cerasusV2.Brander.GetSellerOutProducts:input_type -> cerasusV2.OutProductsRequest
	49, // 76: cerasusV2.Brander.GetSellerOutProduct:input_type -> cerasusV2.RequestByID
	41, // 77: cerasusV2.Brander.CreateSellerOutProduct:input_type -> cerasusV2.SellerOutProductRequest
	49, // 78: cerasusV2.Brander.DeleteSellerOutProduct:input_type -> cerasusV2.RequestByID
	40, // 79: cerasusV2.Brander.SellerOutProductSetUrl:input_type -> cerasusV2.SellerOutProductUrlRequest
	49, // 80: cerasusV2.Brander.SellerOutProductDeleteUrl:input_type -> cerasusV2.RequestByID
	49, // 81: cerasusV2.Brander.GetProductsNoSeller:input_type -> cerasusV2.RequestByID
	54, // 82: cerasusV2.Brander.GetParserData:input_type -> cerasusV2.ParserGetRequest
	55, // 83: cerasusV2.Brander.SetParserData:input_type -> cerasusV2.ParserSetRequest
	56, // 84: cerasusV2.Brander.GetDetectorData:input_type -> cerasusV2.DetectorGetRequest
	57, // 85: cerasusV2.Brander.SetDetectorData:input_type -> cerasusV2.DetectorSetRequest
	52, // 86: cerasusV2.Brander.GetDumpingGraph:input_type -> cerasusV2.LineGraphRequest
	53, // 87: cerasusV2.Brander.GetDumpingDays:input_type -> cerasusV2.RequestByDates
	9,  // 88: cerasusV2.Brander.GetDumpingList:input_type -> cerasusV2.DumpingListRequest
	7,  // 89: cerasusV2.Brander.GetDumpingListDetail:input_type -> cerasusV2.DumpingItemRequest
	5,  // 90: cerasusV2.Brander.UpdateDumpingListDetail:input_type -> cerasusV2.DumpingUpdateRequest
	42, // 91: cerasusV2.Brander.MonitorAlert:input_type -> cerasusV2.Auth
	42, // 92: cerasusV2.Brander.MonitorRadar:input_type -> cerasusV2.Auth
	42, // 93: cerasusV2.Brander.MonitorGraphic:input_type -> cerasusV2.Auth
	42, // 94: cerasusV2.Brander.MonitorMonth:input_type -> cerasusV2.Auth
	42, // 95: cerasusV2.Brander.MonitorProductLeaders:input_type -> cerasusV2.Auth
	42, // 96: cerasusV2.Brander.MonitorDumpingLeaders:input_type -> cerasusV2.Auth
	42, // 97: cerasusV2.Brander.MonitorRunString:input_type -> cerasusV2.Auth
	58, // 98: cerasusV2.Brander.Ping:output_type -> cerasusV2.PingReply
	13, // 99: cerasusV2.Brander.GetCountWidgets:output_type -> cerasusV2.BrandCountWidgets
	15, // 100: cerasusV2.Brander.GetSellers:output_type -> cerasusV2.Sellers
	14, // 101: cerasusV2.Brander.GetSeller:output_type -> cerasusV2.Seller
	59, // 102: cerasusV2.Brander.CreateSeller:output_type -> cerasusV2.StatusReply
	59, // 103: cerasusV2.Brander.UpdateSeller:output_type -> cerasusV2.StatusReply
	60, // 104: cerasusV2.Brander.GetSellerCompanies:output_type -> cerasusV2.CompanyList
	18, // 105: cerasusV2.Brander.GetSellerProducts:output_type -> cerasusV2.SellerProducts
	19, // 106: cerasusV2.Brander.GetSellerProduct:output_type -> cerasusV2.SellerProduct
	20, // 107: cerasusV2.Brander.GetProducts:output_type -> cerasusV2.BrandProducts
	59, // 108: cerasusV2.Brander.CreateProduct:output_type -> cerasusV2.StatusReply
	21, // 109: cerasusV2.Brander.GetProduct:output_type -> cerasusV2.BrandProduct
	59, // 110: cerasusV2.Brander.UpdateProduct:output_type -> cerasusV2.StatusReply
	59, // 111: cerasusV2.Brander.LinkSellerProduct:output_type -> cerasusV2.StatusReply
	61, // 112: cerasusV2.Brander.GetImage:output_type -> cerasusV2.ImageReply
	59, // 113: cerasusV2.Brander.UploadFile:output_type -> cerasusV2.StatusReply
	26, // 114: cerasusV2.Brander.GetProductPrice:output_type -> cerasusV2.ProductPrice
	27, // 115: cerasusV2.Brander.GetProductPrices:output_type -> cerasusV2.ProductPrices
	59, // 116: cerasusV2.Brander.SetProductPrice:output_type -> cerasusV2.StatusReply
	29, // 117: cerasusV2.Brander.SearchDataByCode:output_type -> cerasusV2.DataByCode
	62, // 118: cerasusV2.Brander.GetOrdersGraph:output_type -> cerasusV2.LineGraphics
	63, // 119: cerasusV2.Brander.GetShopsGraph:output_type -> cerasusV2.RoundGraphic
	15, // 120: cerasusV2.Brander.GetSellersData:output_type -> cerasusV2.Sellers
	62, // 121: cerasusV2.Brander.GetSellerAnalyzeOrders:output_type -> cerasusV2.LineGraphics
	31, // 122: cerasusV2.Brander.GetSellerAnalyzeProducts:output_type -> cerasusV2.AnalyzeSellersProduct
	33, // 123: cerasusV2.Brander.GetProductsData:output_type -> cerasusV2.ProductsData
	62, // 124: cerasusV2.Brander.GetProductsAnalyzeOrders:output_type -> cerasusV2.LineGraphics
	15, // 125: cerasusV2.Brander.GetProductsAnalyzeSellers:output_type -> cerasusV2.Sellers
	34, // 126: cerasusV2.Brander.GetSellerAssortiment:output_type -> cerasusV2.Assortiment
	34, // 127: cerasusV2.Brander.GetProductSellersCount:output_type -> cerasusV2.Assortiment
	38, // 128: cerasusV2.Brander.GetSellerOutProducts:output_type -> cerasusV2.OutProducts
	37, // 129: cerasusV2.Brander.GetSellerOutProduct:output_type -> cerasusV2.OutProduct
	59, // 130: cerasusV2.Brander.CreateSellerOutProduct:output_type -> cerasusV2.StatusReply
	59, // 131: cerasusV2.Brander.DeleteSellerOutProduct:output_type -> cerasusV2.StatusReply
	59, // 132: cerasusV2.Brander.SellerOutProductSetUrl:output_type -> cerasusV2.StatusReply
	59, // 133: cerasusV2.Brander.SellerOutProductDeleteUrl:output_type -> cerasusV2.StatusReply
	20, // 134: cerasusV2.Brander.GetProductsNoSeller:output_type -> cerasusV2.BrandProducts
	64, // 135: cerasusV2.Brander.GetParserData:output_type -> cerasusV2.ParserJob
	59, // 136: cerasusV2.Brander.SetParserData:output_type -> cerasusV2.StatusReply
	65, // 137: cerasusV2.Brander.GetDetectorData:output_type -> cerasusV2.DetectorGetReply
	59, // 138: cerasusV2.Brander.SetDetectorData:output_type -> cerasusV2.StatusReply
	66, // 139: cerasusV2.Brander.GetDumpingGraph:output_type -> cerasusV2.LineGraph
	11, // 140: cerasusV2.Brander.GetDumpingDays:output_type -> cerasusV2.DumpingDays
	8,  // 141: cerasusV2.Brander.GetDumpingList:output_type -> cerasusV2.DumpingList
	6,  // 142: cerasusV2.Brander.GetDumpingListDetail:output_type -> cerasusV2.DumpingDetail
	59, // 143: cerasusV2.Brander.UpdateDumpingListDetail:output_type -> cerasusV2.StatusReply
	67, // 144: cerasusV2.Brander.MonitorAlert:output_type -> cerasusV2.Count
	62, // 145: cerasusV2.Brander.MonitorRadar:output_type -> cerasusV2.LineGraphics
	62, // 146: cerasusV2.Brander.MonitorGraphic:output_type -> cerasusV2.LineGraphics
	4,  // 147: cerasusV2.Brander.MonitorMonth:output_type -> cerasusV2.MonitorMonthData
	68, // 148: cerasusV2.Brander.MonitorProductLeaders:output_type -> cerasusV2.OrderLeaders
	3,  // 149: cerasusV2.Brander.MonitorDumpingLeaders:output_type -> cerasusV2.DumpingSellersLeaders
	1,  // 150: cerasusV2.Brander.MonitorRunString:output_type -> cerasusV2.RunString
	98, // [98:151] is the sub-list for method output_type
	45, // [45:98] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_brand_v2_proto_init() }
func file_brand_v2_proto_init() {
	if File_brand_v2_proto != nil {
		return
	}
	file_cerasus_v2_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_brand_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunStringItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingSeller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingSellersLeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorMonthData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingDays); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandCountWidget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandCountWidgets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Seller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sellers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerProductLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductPrices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataByCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeSellersProductData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeSellersProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assortiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutProductUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutProductUrlData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerOutProductUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerOutProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brand_v2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brand_v2_proto_goTypes,
		DependencyIndexes: file_brand_v2_proto_depIdxs,
		MessageInfos:      file_brand_v2_proto_msgTypes,
	}.Build()
	File_brand_v2_proto = out.File
	file_brand_v2_proto_rawDesc = nil
	file_brand_v2_proto_goTypes = nil
	file_brand_v2_proto_depIdxs = nil
}
