// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: brand_v2.proto

package cerasus_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataByCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shop         string        `protobuf:"bytes,1,opt,name=shop,proto3" json:"shop,omitempty"`
	ShopProduct  *ShopProduct  `protobuf:"bytes,2,opt,name=shopProduct,proto3" json:"shopProduct,omitempty"`
	Product      *Product      `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	BrandProduct *BrandProduct `protobuf:"bytes,4,opt,name=brandProduct,proto3" json:"brandProduct,omitempty"`
	Company      *Company      `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
	Seller       *Seller       `protobuf:"bytes,6,opt,name=seller,proto3" json:"seller,omitempty"`
}

func (x *DataByCode) Reset() {
	*x = DataByCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataByCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataByCode) ProtoMessage() {}

func (x *DataByCode) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataByCode.ProtoReflect.Descriptor instead.
func (*DataByCode) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{0}
}

func (x *DataByCode) GetShop() string {
	if x != nil {
		return x.Shop
	}
	return ""
}

func (x *DataByCode) GetShopProduct() *ShopProduct {
	if x != nil {
		return x.ShopProduct
	}
	return nil
}

func (x *DataByCode) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *DataByCode) GetBrandProduct() *BrandProduct {
	if x != nil {
		return x.BrandProduct
	}
	return nil
}

func (x *DataByCode) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *DataByCode) GetSeller() *Seller {
	if x != nil {
		return x.Seller
	}
	return nil
}

type BrandUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	ProductID int64  `protobuf:"varint,2,opt,name=productID,proto3" json:"productID,omitempty"`
	Chunk     []byte `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	FileName  string `protobuf:"bytes,4,opt,name=fileName,proto3" json:"fileName,omitempty"`
	Type      string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *BrandUploadRequest) Reset() {
	*x = BrandUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandUploadRequest) ProtoMessage() {}

func (x *BrandUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandUploadRequest.ProtoReflect.Descriptor instead.
func (*BrandUploadRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{1}
}

func (x *BrandUploadRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BrandUploadRequest) GetProductID() int64 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

func (x *BrandUploadRequest) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *BrandUploadRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *BrandUploadRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type BrandCountWidget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BrandCountWidget) Reset() {
	*x = BrandCountWidget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandCountWidget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandCountWidget) ProtoMessage() {}

func (x *BrandCountWidget) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandCountWidget.ProtoReflect.Descriptor instead.
func (*BrandCountWidget) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{2}
}

func (x *BrandCountWidget) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BrandCountWidget) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type BrandCountWidgets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*BrandCountWidget `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BrandCountWidgets) Reset() {
	*x = BrandCountWidgets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandCountWidgets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandCountWidgets) ProtoMessage() {}

func (x *BrandCountWidgets) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandCountWidgets.ProtoReflect.Descriptor instead.
func (*BrandCountWidgets) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{3}
}

func (x *BrandCountWidgets) GetData() []*BrandCountWidget {
	if x != nil {
		return x.Data
	}
	return nil
}

type SellerOutProductUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	ID   int64  `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Shop string `protobuf:"bytes,3,opt,name=shop,proto3" json:"shop,omitempty"`
	Url  string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *SellerOutProductUrlRequest) Reset() {
	*x = SellerOutProductUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerOutProductUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerOutProductUrlRequest) ProtoMessage() {}

func (x *SellerOutProductUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerOutProductUrlRequest.ProtoReflect.Descriptor instead.
func (*SellerOutProductUrlRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{4}
}

func (x *SellerOutProductUrlRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SellerOutProductUrlRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *SellerOutProductUrlRequest) GetShop() string {
	if x != nil {
		return x.Shop
	}
	return ""
}

func (x *SellerOutProductUrlRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SellerOutProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	SellerID  int64 `protobuf:"varint,2,opt,name=sellerID,proto3" json:"sellerID,omitempty"`
	ProductID int64 `protobuf:"varint,3,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *SellerOutProductRequest) Reset() {
	*x = SellerOutProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerOutProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerOutProductRequest) ProtoMessage() {}

func (x *SellerOutProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerOutProductRequest.ProtoReflect.Descriptor instead.
func (*SellerOutProductRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{5}
}

func (x *SellerOutProductRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SellerOutProductRequest) GetSellerID() int64 {
	if x != nil {
		return x.SellerID
	}
	return 0
}

func (x *SellerOutProductRequest) GetProductID() int64 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

type OutProductUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID  int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *OutProductUrl) Reset() {
	*x = OutProductUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutProductUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutProductUrl) ProtoMessage() {}

func (x *OutProductUrl) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutProductUrl.ProtoReflect.Descriptor instead.
func (*OutProductUrl) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{6}
}

func (x *OutProductUrl) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *OutProductUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type OutProductUrlData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shop string           `protobuf:"bytes,1,opt,name=shop,proto3" json:"shop,omitempty"`
	Urls []*OutProductUrl `protobuf:"bytes,2,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *OutProductUrlData) Reset() {
	*x = OutProductUrlData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutProductUrlData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutProductUrlData) ProtoMessage() {}

func (x *OutProductUrlData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutProductUrlData.ProtoReflect.Descriptor instead.
func (*OutProductUrlData) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{7}
}

func (x *OutProductUrlData) GetShop() string {
	if x != nil {
		return x.Shop
	}
	return ""
}

func (x *OutProductUrlData) GetUrls() []*OutProductUrl {
	if x != nil {
		return x.Urls
	}
	return nil
}

type OutProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Product *BrandProduct        `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
	UrlData []*OutProductUrlData `protobuf:"bytes,3,rep,name=urlData,proto3" json:"urlData,omitempty"`
}

func (x *OutProduct) Reset() {
	*x = OutProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutProduct) ProtoMessage() {}

func (x *OutProduct) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutProduct.ProtoReflect.Descriptor instead.
func (*OutProduct) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{8}
}

func (x *OutProduct) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *OutProduct) GetProduct() *BrandProduct {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *OutProduct) GetUrlData() []*OutProductUrlData {
	if x != nil {
		return x.UrlData
	}
	return nil
}

type OutProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products   []*OutProduct `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
	Pagination *Pagination   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *OutProducts) Reset() {
	*x = OutProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutProducts) ProtoMessage() {}

func (x *OutProducts) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutProducts.ProtoReflect.Descriptor instead.
func (*OutProducts) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{9}
}

func (x *OutProducts) GetProducts() []*OutProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *OutProducts) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type OutProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	SellerID int64 `protobuf:"varint,2,opt,name=sellerID,proto3" json:"sellerID,omitempty"`
	Page     int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *OutProductsRequest) Reset() {
	*x = OutProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutProductsRequest) ProtoMessage() {}

func (x *OutProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutProductsRequest.ProtoReflect.Descriptor instead.
func (*OutProductsRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{10}
}

func (x *OutProductsRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *OutProductsRequest) GetSellerID() int64 {
	if x != nil {
		return x.SellerID
	}
	return 0
}

func (x *OutProductsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type SellerProductLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth            *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	SellerID        int64 `protobuf:"varint,2,opt,name=sellerID,proto3" json:"sellerID,omitempty"`
	CompanyID       int64 `protobuf:"varint,3,opt,name=companyID,proto3" json:"companyID,omitempty"`
	SellerProductID int64 `protobuf:"varint,4,opt,name=sellerProductID,proto3" json:"sellerProductID,omitempty"`
	BrandProductID  int64 `protobuf:"varint,5,opt,name=brandProductID,proto3" json:"brandProductID,omitempty"`
}

func (x *SellerProductLinkRequest) Reset() {
	*x = SellerProductLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerProductLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerProductLinkRequest) ProtoMessage() {}

func (x *SellerProductLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerProductLinkRequest.ProtoReflect.Descriptor instead.
func (*SellerProductLinkRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{11}
}

func (x *SellerProductLinkRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SellerProductLinkRequest) GetSellerID() int64 {
	if x != nil {
		return x.SellerID
	}
	return 0
}

func (x *SellerProductLinkRequest) GetCompanyID() int64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *SellerProductLinkRequest) GetSellerProductID() int64 {
	if x != nil {
		return x.SellerProductID
	}
	return 0
}

func (x *SellerProductLinkRequest) GetBrandProductID() int64 {
	if x != nil {
		return x.BrandProductID
	}
	return 0
}

type SellerProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	SellerID  int64 `protobuf:"varint,2,opt,name=sellerID,proto3" json:"sellerID,omitempty"`
	Page      int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Unsorted  bool  `protobuf:"varint,4,opt,name=unsorted,proto3" json:"unsorted,omitempty"`
	ProductID int64 `protobuf:"varint,5,opt,name=productID,proto3" json:"productID,omitempty"`
	CompanyID int64 `protobuf:"varint,6,opt,name=companyID,proto3" json:"companyID,omitempty"`
}

func (x *SellerProductsRequest) Reset() {
	*x = SellerProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerProductsRequest) ProtoMessage() {}

func (x *SellerProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerProductsRequest.ProtoReflect.Descriptor instead.
func (*SellerProductsRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{12}
}

func (x *SellerProductsRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SellerProductsRequest) GetSellerID() int64 {
	if x != nil {
		return x.SellerID
	}
	return 0
}

func (x *SellerProductsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SellerProductsRequest) GetUnsorted() bool {
	if x != nil {
		return x.Unsorted
	}
	return false
}

func (x *SellerProductsRequest) GetProductID() int64 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

func (x *SellerProductsRequest) GetCompanyID() int64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

type SellerProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products   []*SellerProduct `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
	Pagination *Pagination      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *SellerProducts) Reset() {
	*x = SellerProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerProducts) ProtoMessage() {}

func (x *SellerProducts) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerProducts.ProtoReflect.Descriptor instead.
func (*SellerProducts) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{13}
}

func (x *SellerProducts) GetProducts() []*SellerProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *SellerProducts) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SellerProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product        *Product `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
	BrandProductID int64    `protobuf:"varint,2,opt,name=brandProductID,proto3" json:"brandProductID,omitempty"`
}

func (x *SellerProduct) Reset() {
	*x = SellerProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerProduct) ProtoMessage() {}

func (x *SellerProduct) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerProduct.ProtoReflect.Descriptor instead.
func (*SellerProduct) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{14}
}

func (x *SellerProduct) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *SellerProduct) GetBrandProductID() int64 {
	if x != nil {
		return x.BrandProductID
	}
	return 0
}

type ProductPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	ProductID int64  `protobuf:"varint,2,opt,name=productID,proto3" json:"productID,omitempty"`
	Price     int32  `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	Date      string `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *ProductPriceRequest) Reset() {
	*x = ProductPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductPriceRequest) ProtoMessage() {}

func (x *ProductPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductPriceRequest.ProtoReflect.Descriptor instead.
func (*ProductPriceRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{15}
}

func (x *ProductPriceRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ProductPriceRequest) GetProductID() int64 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

func (x *ProductPriceRequest) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductPriceRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type ProductPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price int32  `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	Date  string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *ProductPrice) Reset() {
	*x = ProductPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductPrice) ProtoMessage() {}

func (x *ProductPrice) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductPrice.ProtoReflect.Descriptor instead.
func (*ProductPrice) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{16}
}

func (x *ProductPrice) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductPrice) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type ProductPrices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prices []*ProductPrice `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices,omitempty"`
}

func (x *ProductPrices) Reset() {
	*x = ProductPrices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductPrices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductPrices) ProtoMessage() {}

func (x *ProductPrices) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductPrices.ProtoReflect.Descriptor instead.
func (*ProductPrices) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{17}
}

func (x *ProductPrices) GetPrices() []*ProductPrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

type ProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *Auth         `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Product *BrandProduct `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
}

func (x *ProductRequest) Reset() {
	*x = ProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductRequest) ProtoMessage() {}

func (x *ProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductRequest.ProtoReflect.Descriptor instead.
func (*ProductRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{18}
}

func (x *ProductRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ProductRequest) GetProduct() *BrandProduct {
	if x != nil {
		return x.Product
	}
	return nil
}

type BrandProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products   []*BrandProduct `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
	Pagination *Pagination     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *BrandProducts) Reset() {
	*x = BrandProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandProducts) ProtoMessage() {}

func (x *BrandProducts) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandProducts.ProtoReflect.Descriptor instead.
func (*BrandProducts) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{19}
}

func (x *BrandProducts) GetProducts() []*BrandProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *BrandProducts) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type BrandProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Article string `protobuf:"bytes,3,opt,name=article,proto3" json:"article,omitempty"`
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	Preview string `protobuf:"bytes,5,opt,name=preview,proto3" json:"preview,omitempty"`
	Active  bool   `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	Updated string `protobuf:"bytes,7,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *BrandProduct) Reset() {
	*x = BrandProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandProduct) ProtoMessage() {}

func (x *BrandProduct) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandProduct.ProtoReflect.Descriptor instead.
func (*BrandProduct) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{20}
}

func (x *BrandProduct) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BrandProduct) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BrandProduct) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *BrandProduct) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BrandProduct) GetPreview() string {
	if x != nil {
		return x.Preview
	}
	return ""
}

func (x *BrandProduct) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *BrandProduct) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

type Seller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Comment              string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Person               string `protobuf:"bytes,4,opt,name=person,proto3" json:"person,omitempty"`
	Phone                string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Email                string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Active               bool   `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`
	LinkedCompaniesCount int32  `protobuf:"varint,8,opt,name=linkedCompaniesCount,proto3" json:"linkedCompaniesCount,omitempty"`
	Pricer               bool   `protobuf:"varint,9,opt,name=pricer,proto3" json:"pricer,omitempty"`
}

func (x *Seller) Reset() {
	*x = Seller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Seller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Seller) ProtoMessage() {}

func (x *Seller) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Seller.ProtoReflect.Descriptor instead.
func (*Seller) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{21}
}

func (x *Seller) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Seller) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Seller) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Seller) GetPerson() string {
	if x != nil {
		return x.Person
	}
	return ""
}

func (x *Seller) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Seller) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Seller) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Seller) GetLinkedCompaniesCount() int32 {
	if x != nil {
		return x.LinkedCompaniesCount
	}
	return 0
}

func (x *Seller) GetPricer() bool {
	if x != nil {
		return x.Pricer
	}
	return false
}

type Sellers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sellers    []*Seller   `protobuf:"bytes,1,rep,name=sellers,proto3" json:"sellers,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *Sellers) Reset() {
	*x = Sellers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sellers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sellers) ProtoMessage() {}

func (x *Sellers) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sellers.ProtoReflect.Descriptor instead.
func (*Sellers) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{22}
}

func (x *Sellers) GetSellers() []*Seller {
	if x != nil {
		return x.Sellers
	}
	return nil
}

func (x *Sellers) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SellerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *Auth   `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Seller *Seller `protobuf:"bytes,2,opt,name=seller,proto3" json:"seller,omitempty"`
}

func (x *SellerRequest) Reset() {
	*x = SellerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_v2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerRequest) ProtoMessage() {}

func (x *SellerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_v2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerRequest.ProtoReflect.Descriptor instead.
func (*SellerRequest) Descriptor() ([]byte, []int) {
	return file_brand_v2_proto_rawDescGZIP(), []int{23}
}

func (x *SellerRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SellerRequest) GetSeller() *Seller {
	if x != nil {
		return x.Seller
	}
	return nil
}

var File_brand_v2_proto protoreflect.FileDescriptor

var file_brand_v2_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x1a, 0x10, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x02,
	0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x70,
	0x12, 0x38, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56,
	0x32, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x73,
	0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x9d,
	0x01, 0x0a, 0x12, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3c,
	0x0a, 0x10, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x11,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x77, 0x0a, 0x1a, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x78, 0x0a, 0x17, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x31, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x55, 0x0a, 0x11, 0x4f, 0x75, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x68, 0x6f,
	0x70, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x4f, 0x75, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22,
	0x87, 0x01, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x31,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x36, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x4f,
	0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x07, 0x75, 0x72, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x77, 0x0a, 0x0b, 0x4f, 0x75, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x12, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xcb, 0x01,
	0x0a, 0x18, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0xc4, 0x01, 0x0a, 0x15,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e,
	0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x6e,
	0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x44, 0x22, 0x7d, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x65, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x82, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x38, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x40, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x12, 0x31, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x22, 0x7b, 0x0a, 0x0d, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xb4, 0x01, 0x0a, 0x0c, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x72, 0x22, 0x6d, 0x0a, 0x07, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x29, 0x0a,
	0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x32, 0xca, 0x12, 0x0a, 0x07, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x1a, 0x1c, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x18,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x79, 0x49, 0x44, 0x1a, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x16,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x20, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x20, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x18, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a,
	0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56,
	0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x1a, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x18, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56,
	0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x1a,
	0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56,
	0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56,
	0x32, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x15,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x22, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56,
	0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x4a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x16, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56,
	0x32, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x19, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x56, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x73, 0x61, 0x6e, 0x79, 0x63, 0x68, 0x2f, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_brand_v2_proto_rawDescOnce sync.Once
	file_brand_v2_proto_rawDescData = file_brand_v2_proto_rawDesc
)

func file_brand_v2_proto_rawDescGZIP() []byte {
	file_brand_v2_proto_rawDescOnce.Do(func() {
		file_brand_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_brand_v2_proto_rawDescData)
	})
	return file_brand_v2_proto_rawDescData
}

var file_brand_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_brand_v2_proto_goTypes = []interface{}{
	(*DataByCode)(nil),                 // 0: cerasusV2.DataByCode
	(*BrandUploadRequest)(nil),         // 1: cerasusV2.BrandUploadRequest
	(*BrandCountWidget)(nil),           // 2: cerasusV2.BrandCountWidget
	(*BrandCountWidgets)(nil),          // 3: cerasusV2.BrandCountWidgets
	(*SellerOutProductUrlRequest)(nil), // 4: cerasusV2.SellerOutProductUrlRequest
	(*SellerOutProductRequest)(nil),    // 5: cerasusV2.SellerOutProductRequest
	(*OutProductUrl)(nil),              // 6: cerasusV2.OutProductUrl
	(*OutProductUrlData)(nil),          // 7: cerasusV2.OutProductUrlData
	(*OutProduct)(nil),                 // 8: cerasusV2.OutProduct
	(*OutProducts)(nil),                // 9: cerasusV2.OutProducts
	(*OutProductsRequest)(nil),         // 10: cerasusV2.OutProductsRequest
	(*SellerProductLinkRequest)(nil),   // 11: cerasusV2.SellerProductLinkRequest
	(*SellerProductsRequest)(nil),      // 12: cerasusV2.SellerProductsRequest
	(*SellerProducts)(nil),             // 13: cerasusV2.SellerProducts
	(*SellerProduct)(nil),              // 14: cerasusV2.SellerProduct
	(*ProductPriceRequest)(nil),        // 15: cerasusV2.ProductPriceRequest
	(*ProductPrice)(nil),               // 16: cerasusV2.ProductPrice
	(*ProductPrices)(nil),              // 17: cerasusV2.ProductPrices
	(*ProductRequest)(nil),             // 18: cerasusV2.ProductRequest
	(*BrandProducts)(nil),              // 19: cerasusV2.BrandProducts
	(*BrandProduct)(nil),               // 20: cerasusV2.BrandProduct
	(*Seller)(nil),                     // 21: cerasusV2.Seller
	(*Sellers)(nil),                    // 22: cerasusV2.Sellers
	(*SellerRequest)(nil),              // 23: cerasusV2.SellerRequest
	(*ShopProduct)(nil),                // 24: cerasusV2.ShopProduct
	(*Product)(nil),                    // 25: cerasusV2.Product
	(*Company)(nil),                    // 26: cerasusV2.Company
	(*Auth)(nil),                       // 27: cerasusV2.Auth
	(*Pagination)(nil),                 // 28: cerasusV2.Pagination
	(*PingRequest)(nil),                // 29: cerasusV2.PingRequest
	(*RequestByPage)(nil),              // 30: cerasusV2.RequestByPage
	(*RequestByID)(nil),                // 31: cerasusV2.RequestByID
	(*ImageRequest)(nil),               // 32: cerasusV2.ImageRequest
	(*SearchRequest)(nil),              // 33: cerasusV2.SearchRequest
	(*UpdateBrandRequest)(nil),         // 34: cerasusV2.UpdateBrandRequest
	(*PingReply)(nil),                  // 35: cerasusV2.PingReply
	(*StatusReply)(nil),                // 36: cerasusV2.StatusReply
	(*CompanyList)(nil),                // 37: cerasusV2.CompanyList
	(*ImageReply)(nil),                 // 38: cerasusV2.ImageReply
	(*Brand)(nil),                      // 39: cerasusV2.Brand
}
var file_brand_v2_proto_depIdxs = []int32{
	24, // 0: cerasusV2.DataByCode.shopProduct:type_name -> cerasusV2.ShopProduct
	25, // 1: cerasusV2.DataByCode.product:type_name -> cerasusV2.Product
	20, // 2: cerasusV2.DataByCode.brandProduct:type_name -> cerasusV2.BrandProduct
	26, // 3: cerasusV2.DataByCode.company:type_name -> cerasusV2.Company
	21, // 4: cerasusV2.DataByCode.seller:type_name -> cerasusV2.Seller
	27, // 5: cerasusV2.BrandUploadRequest.auth:type_name -> cerasusV2.Auth
	2,  // 6: cerasusV2.BrandCountWidgets.data:type_name -> cerasusV2.BrandCountWidget
	27, // 7: cerasusV2.SellerOutProductUrlRequest.auth:type_name -> cerasusV2.Auth
	27, // 8: cerasusV2.SellerOutProductRequest.auth:type_name -> cerasusV2.Auth
	6,  // 9: cerasusV2.OutProductUrlData.urls:type_name -> cerasusV2.OutProductUrl
	20, // 10: cerasusV2.OutProduct.product:type_name -> cerasusV2.BrandProduct
	7,  // 11: cerasusV2.OutProduct.urlData:type_name -> cerasusV2.OutProductUrlData
	8,  // 12: cerasusV2.OutProducts.products:type_name -> cerasusV2.OutProduct
	28, // 13: cerasusV2.OutProducts.pagination:type_name -> cerasusV2.Pagination
	27, // 14: cerasusV2.OutProductsRequest.auth:type_name -> cerasusV2.Auth
	27, // 15: cerasusV2.SellerProductLinkRequest.auth:type_name -> cerasusV2.Auth
	27, // 16: cerasusV2.SellerProductsRequest.auth:type_name -> cerasusV2.Auth
	14, // 17: cerasusV2.SellerProducts.products:type_name -> cerasusV2.SellerProduct
	28, // 18: cerasusV2.SellerProducts.pagination:type_name -> cerasusV2.Pagination
	25, // 19: cerasusV2.SellerProduct.product:type_name -> cerasusV2.Product
	27, // 20: cerasusV2.ProductPriceRequest.auth:type_name -> cerasusV2.Auth
	16, // 21: cerasusV2.ProductPrices.prices:type_name -> cerasusV2.ProductPrice
	27, // 22: cerasusV2.ProductRequest.auth:type_name -> cerasusV2.Auth
	20, // 23: cerasusV2.ProductRequest.product:type_name -> cerasusV2.BrandProduct
	20, // 24: cerasusV2.BrandProducts.products:type_name -> cerasusV2.BrandProduct
	28, // 25: cerasusV2.BrandProducts.pagination:type_name -> cerasusV2.Pagination
	21, // 26: cerasusV2.Sellers.sellers:type_name -> cerasusV2.Seller
	28, // 27: cerasusV2.Sellers.pagination:type_name -> cerasusV2.Pagination
	27, // 28: cerasusV2.SellerRequest.auth:type_name -> cerasusV2.Auth
	21, // 29: cerasusV2.SellerRequest.seller:type_name -> cerasusV2.Seller
	29, // 30: cerasusV2.Brander.Ping:input_type -> cerasusV2.PingRequest
	27, // 31: cerasusV2.Brander.GetCountWidgets:input_type -> cerasusV2.Auth
	30, // 32: cerasusV2.Brander.GetSellers:input_type -> cerasusV2.RequestByPage
	31, // 33: cerasusV2.Brander.GetSeller:input_type -> cerasusV2.RequestByID
	23, // 34: cerasusV2.Brander.CreateSeller:input_type -> cerasusV2.SellerRequest
	23, // 35: cerasusV2.Brander.UpdateSeller:input_type -> cerasusV2.SellerRequest
	31, // 36: cerasusV2.Brander.GetSellerCompanies:input_type -> cerasusV2.RequestByID
	12, // 37: cerasusV2.Brander.GetSellerProducts:input_type -> cerasusV2.SellerProductsRequest
	12, // 38: cerasusV2.Brander.GetSellerProduct:input_type -> cerasusV2.SellerProductsRequest
	30, // 39: cerasusV2.Brander.GetProducts:input_type -> cerasusV2.RequestByPage
	18, // 40: cerasusV2.Brander.CreateProduct:input_type -> cerasusV2.ProductRequest
	31, // 41: cerasusV2.Brander.GetProduct:input_type -> cerasusV2.RequestByID
	18, // 42: cerasusV2.Brander.UpdateProduct:input_type -> cerasusV2.ProductRequest
	11, // 43: cerasusV2.Brander.LinkSellerProduct:input_type -> cerasusV2.SellerProductLinkRequest
	32, // 44: cerasusV2.Brander.GetImage:input_type -> cerasusV2.ImageRequest
	1,  // 45: cerasusV2.Brander.UploadFile:input_type -> cerasusV2.BrandUploadRequest
	31, // 46: cerasusV2.Brander.GetProductPrice:input_type -> cerasusV2.RequestByID
	31, // 47: cerasusV2.Brander.GetProductPrices:input_type -> cerasusV2.RequestByID
	15, // 48: cerasusV2.Brander.SetProductPrice:input_type -> cerasusV2.ProductPriceRequest
	33, // 49: cerasusV2.Brander.SearchDataByCode:input_type -> cerasusV2.SearchRequest
	27, // 50: cerasusV2.Brander.GetBrand:input_type -> cerasusV2.Auth
	34, // 51: cerasusV2.Brander.UpdateBrand:input_type -> cerasusV2.UpdateBrandRequest
	30, // 52: cerasusV2.Brander.GetCompaniesWithBrandProducts:input_type -> cerasusV2.RequestByPage
	33, // 53: cerasusV2.Brander.SearchSeller:input_type -> cerasusV2.SearchRequest
	18, // 54: cerasusV2.Brander.DeleteProduct:input_type -> cerasusV2.ProductRequest
	33, // 55: cerasusV2.Brander.SearchProduct:input_type -> cerasusV2.SearchRequest
	31, // 56: cerasusV2.Brander.DeleteProductPrice:input_type -> cerasusV2.RequestByID
	10, // 57: cerasusV2.Brander.GetSellerOutProducts:input_type -> cerasusV2.OutProductsRequest
	31, // 58: cerasusV2.Brander.GetSellerOutProduct:input_type -> cerasusV2.RequestByID
	5,  // 59: cerasusV2.Brander.CreateSellerOutProduct:input_type -> cerasusV2.SellerOutProductRequest
	31, // 60: cerasusV2.Brander.DeleteSellerOutProduct:input_type -> cerasusV2.RequestByID
	4,  // 61: cerasusV2.Brander.SellerOutProductSetUrl:input_type -> cerasusV2.SellerOutProductUrlRequest
	31, // 62: cerasusV2.Brander.SellerOutProductDeleteUrl:input_type -> cerasusV2.RequestByID
	35, // 63: cerasusV2.Brander.Ping:output_type -> cerasusV2.PingReply
	3,  // 64: cerasusV2.Brander.GetCountWidgets:output_type -> cerasusV2.BrandCountWidgets
	22, // 65: cerasusV2.Brander.GetSellers:output_type -> cerasusV2.Sellers
	21, // 66: cerasusV2.Brander.GetSeller:output_type -> cerasusV2.Seller
	36, // 67: cerasusV2.Brander.CreateSeller:output_type -> cerasusV2.StatusReply
	36, // 68: cerasusV2.Brander.UpdateSeller:output_type -> cerasusV2.StatusReply
	37, // 69: cerasusV2.Brander.GetSellerCompanies:output_type -> cerasusV2.CompanyList
	13, // 70: cerasusV2.Brander.GetSellerProducts:output_type -> cerasusV2.SellerProducts
	14, // 71: cerasusV2.Brander.GetSellerProduct:output_type -> cerasusV2.SellerProduct
	19, // 72: cerasusV2.Brander.GetProducts:output_type -> cerasusV2.BrandProducts
	36, // 73: cerasusV2.Brander.CreateProduct:output_type -> cerasusV2.StatusReply
	20, // 74: cerasusV2.Brander.GetProduct:output_type -> cerasusV2.BrandProduct
	36, // 75: cerasusV2.Brander.UpdateProduct:output_type -> cerasusV2.StatusReply
	36, // 76: cerasusV2.Brander.LinkSellerProduct:output_type -> cerasusV2.StatusReply
	38, // 77: cerasusV2.Brander.GetImage:output_type -> cerasusV2.ImageReply
	36, // 78: cerasusV2.Brander.UploadFile:output_type -> cerasusV2.StatusReply
	16, // 79: cerasusV2.Brander.GetProductPrice:output_type -> cerasusV2.ProductPrice
	17, // 80: cerasusV2.Brander.GetProductPrices:output_type -> cerasusV2.ProductPrices
	36, // 81: cerasusV2.Brander.SetProductPrice:output_type -> cerasusV2.StatusReply
	0,  // 82: cerasusV2.Brander.SearchDataByCode:output_type -> cerasusV2.DataByCode
	39, // 83: cerasusV2.Brander.GetBrand:output_type -> cerasusV2.Brand
	36, // 84: cerasusV2.Brander.UpdateBrand:output_type -> cerasusV2.StatusReply
	37, // 85: cerasusV2.Brander.GetCompaniesWithBrandProducts:output_type -> cerasusV2.CompanyList
	22, // 86: cerasusV2.Brander.SearchSeller:output_type -> cerasusV2.Sellers
	36, // 87: cerasusV2.Brander.DeleteProduct:output_type -> cerasusV2.StatusReply
	19, // 88: cerasusV2.Brander.SearchProduct:output_type -> cerasusV2.BrandProducts
	36, // 89: cerasusV2.Brander.DeleteProductPrice:output_type -> cerasusV2.StatusReply
	9,  // 90: cerasusV2.Brander.GetSellerOutProducts:output_type -> cerasusV2.OutProducts
	8,  // 91: cerasusV2.Brander.GetSellerOutProduct:output_type -> cerasusV2.OutProduct
	36, // 92: cerasusV2.Brander.CreateSellerOutProduct:output_type -> cerasusV2.StatusReply
	36, // 93: cerasusV2.Brander.DeleteSellerOutProduct:output_type -> cerasusV2.StatusReply
	36, // 94: cerasusV2.Brander.SellerOutProductSetUrl:output_type -> cerasusV2.StatusReply
	36, // 95: cerasusV2.Brander.SellerOutProductDeleteUrl:output_type -> cerasusV2.StatusReply
	63, // [63:96] is the sub-list for method output_type
	30, // [30:63] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_brand_v2_proto_init() }
func file_brand_v2_proto_init() {
	if File_brand_v2_proto != nil {
		return
	}
	file_cerasus_v2_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_brand_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataByCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandCountWidget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandCountWidgets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerOutProductUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerOutProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutProductUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutProductUrlData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerProductLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductPrices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Seller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sellers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_v2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brand_v2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brand_v2_proto_goTypes,
		DependencyIndexes: file_brand_v2_proto_depIdxs,
		MessageInfos:      file_brand_v2_proto_msgTypes,
	}.Build()
	File_brand_v2_proto = out.File
	file_brand_v2_proto_rawDesc = nil
	file_brand_v2_proto_goTypes = nil
	file_brand_v2_proto_depIdxs = nil
}
