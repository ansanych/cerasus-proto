// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: parsers_v2.proto

package cerasus_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParsersClient is the client API for Parsers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParsersClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	RegisterParser(ctx context.Context, in *Parser, opts ...grpc.CallOption) (*StatusReply, error)
	CheckParser(ctx context.Context, in *Parser, opts ...grpc.CallOption) (*StatusReply, error)
	RestartParser(ctx context.Context, in *Parser, opts ...grpc.CallOption) (*StatusReply, error)
	DeleteParser(ctx context.Context, in *Parser, opts ...grpc.CallOption) (*StatusReply, error)
}

type parsersClient struct {
	cc grpc.ClientConnInterface
}

func NewParsersClient(cc grpc.ClientConnInterface) ParsersClient {
	return &parsersClient{cc}
}

func (c *parsersClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Parsers/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parsersClient) RegisterParser(ctx context.Context, in *Parser, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Parsers/RegisterParser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parsersClient) CheckParser(ctx context.Context, in *Parser, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Parsers/CheckParser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parsersClient) RestartParser(ctx context.Context, in *Parser, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Parsers/RestartParser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parsersClient) DeleteParser(ctx context.Context, in *Parser, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Parsers/DeleteParser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParsersServer is the server API for Parsers service.
// All implementations must embed UnimplementedParsersServer
// for forward compatibility
type ParsersServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	RegisterParser(context.Context, *Parser) (*StatusReply, error)
	CheckParser(context.Context, *Parser) (*StatusReply, error)
	RestartParser(context.Context, *Parser) (*StatusReply, error)
	DeleteParser(context.Context, *Parser) (*StatusReply, error)
	mustEmbedUnimplementedParsersServer()
}

// UnimplementedParsersServer must be embedded to have forward compatible implementations.
type UnimplementedParsersServer struct {
}

func (UnimplementedParsersServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedParsersServer) RegisterParser(context.Context, *Parser) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterParser not implemented")
}
func (UnimplementedParsersServer) CheckParser(context.Context, *Parser) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckParser not implemented")
}
func (UnimplementedParsersServer) RestartParser(context.Context, *Parser) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartParser not implemented")
}
func (UnimplementedParsersServer) DeleteParser(context.Context, *Parser) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParser not implemented")
}
func (UnimplementedParsersServer) mustEmbedUnimplementedParsersServer() {}

// UnsafeParsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParsersServer will
// result in compilation errors.
type UnsafeParsersServer interface {
	mustEmbedUnimplementedParsersServer()
}

func RegisterParsersServer(s grpc.ServiceRegistrar, srv ParsersServer) {
	s.RegisterService(&Parsers_ServiceDesc, srv)
}

func _Parsers_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParsersServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Parsers/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParsersServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parsers_RegisterParser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParsersServer).RegisterParser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Parsers/RegisterParser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParsersServer).RegisterParser(ctx, req.(*Parser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parsers_CheckParser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParsersServer).CheckParser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Parsers/CheckParser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParsersServer).CheckParser(ctx, req.(*Parser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parsers_RestartParser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParsersServer).RestartParser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Parsers/RestartParser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParsersServer).RestartParser(ctx, req.(*Parser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parsers_DeleteParser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParsersServer).DeleteParser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Parsers/DeleteParser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParsersServer).DeleteParser(ctx, req.(*Parser))
	}
	return interceptor(ctx, in, info, handler)
}

// Parsers_ServiceDesc is the grpc.ServiceDesc for Parsers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Parsers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cerasusV2.Parsers",
	HandlerType: (*ParsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Parsers_Ping_Handler,
		},
		{
			MethodName: "RegisterParser",
			Handler:    _Parsers_RegisterParser_Handler,
		},
		{
			MethodName: "CheckParser",
			Handler:    _Parsers_CheckParser_Handler,
		},
		{
			MethodName: "RestartParser",
			Handler:    _Parsers_RestartParser_Handler,
		},
		{
			MethodName: "DeleteParser",
			Handler:    _Parsers_DeleteParser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parsers_v2.proto",
}
