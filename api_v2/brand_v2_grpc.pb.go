// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: brand_v2.proto

package cerasus_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BranderClient is the client API for Brander service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BranderClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	GetCountWidgets(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*BrandCountWidgets, error)
	GetSellers(ctx context.Context, in *RequestByPage, opts ...grpc.CallOption) (*Sellers, error)
	GetSeller(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Seller, error)
	CreateSeller(ctx context.Context, in *SellerRequest, opts ...grpc.CallOption) (*StatusReply, error)
	UpdateSeller(ctx context.Context, in *SellerRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetSellerCompanies(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*CompanyList, error)
	GetSellerProducts(ctx context.Context, in *SellerProductsRequest, opts ...grpc.CallOption) (*SellerProducts, error)
	GetSellerProduct(ctx context.Context, in *SellerProductsRequest, opts ...grpc.CallOption) (*SellerProduct, error)
	GetProducts(ctx context.Context, in *RequestByPage, opts ...grpc.CallOption) (*BrandProducts, error)
	CreateProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BrandProduct, error)
	UpdateProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*StatusReply, error)
	LinkSellerProduct(ctx context.Context, in *SellerProductLinkRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageReply, error)
	UploadFile(ctx context.Context, in *BrandUploadRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetProductPrice(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*ProductPrice, error)
	GetProductPrices(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*ProductPrices, error)
	SetProductPrice(ctx context.Context, in *ProductPriceRequest, opts ...grpc.CallOption) (*StatusReply, error)
	SearchDataByCode(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*DataByCode, error)
	GetOrdersGraph(ctx context.Context, in *LineGraphRequest, opts ...grpc.CallOption) (*LineGraphics, error)
	GetShopsGraph(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*RoundGraphic, error)
	GetSellersData(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*Sellers, error)
	GetSellerAnalyzeOrders(ctx context.Context, in *LineGraphRequest, opts ...grpc.CallOption) (*LineGraphics, error)
	GetSellerAnalyzeProducts(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*AnalyzeSellersProduct, error)
	GetProductsData(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*ProductsData, error)
	GetProductsAnalyzeOrders(ctx context.Context, in *LineGraphRequest, opts ...grpc.CallOption) (*LineGraphics, error)
	GetProductsAnalyzeSellers(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*Sellers, error)
	GetSellerAssortiment(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Assortiment, error)
	GetProductSellersCount(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Assortiment, error)
	GetSellerOutProducts(ctx context.Context, in *OutProductsRequest, opts ...grpc.CallOption) (*OutProducts, error)
	GetSellerOutProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*OutProduct, error)
	CreateSellerOutProduct(ctx context.Context, in *SellerOutProductRequest, opts ...grpc.CallOption) (*StatusReply, error)
	DeleteSellerOutProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*StatusReply, error)
	SellerOutProductSetUrl(ctx context.Context, in *SellerOutProductUrlRequest, opts ...grpc.CallOption) (*StatusReply, error)
	SellerOutProductDeleteUrl(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*StatusReply, error)
	GetProductsNoSeller(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BrandProducts, error)
	GetParserData(ctx context.Context, in *ParserGetRequest, opts ...grpc.CallOption) (*ParserJob, error)
	SetParserData(ctx context.Context, in *ParserSetRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetDetectorData(ctx context.Context, in *DetectorGetRequest, opts ...grpc.CallOption) (*DetectorGetReply, error)
	SetDetectorData(ctx context.Context, in *DetectorSetRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetDumpingGraph(ctx context.Context, in *LineGraphRequest, opts ...grpc.CallOption) (*LineGraph, error)
	GetDumpingDays(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*DumpingDays, error)
	GetDumpingList(ctx context.Context, in *DumpingListRequest, opts ...grpc.CallOption) (*DumpingList, error)
	GetDumpingListDetail(ctx context.Context, in *DumpingItemRequest, opts ...grpc.CallOption) (*DumpingDetail, error)
	UpdateDumpingListDetail(ctx context.Context, in *DumpingUpdateRequest, opts ...grpc.CallOption) (*StatusReply, error)
	MonitorAlert(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Count, error)
	MonitorRadar(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*LineGraphics, error)
	MonitorGraphic(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*LineGraphics, error)
	MonitorMonth(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*MonitorMonthData, error)
	MonitorProductLeaders(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*OrderLeaders, error)
	GetDumpingLeaders(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*DumpingSellersLeaders, error)
	MonitorRunString(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*RunString, error)
	DeleteCerasusProductData(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*StatusReply, error)
	DeleteCerasusProductDataByShop(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*StatusReply, error)
}

type branderClient struct {
	cc grpc.ClientConnInterface
}

func NewBranderClient(cc grpc.ClientConnInterface) BranderClient {
	return &branderClient{cc}
}

func (c *branderClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetCountWidgets(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*BrandCountWidgets, error) {
	out := new(BrandCountWidgets)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetCountWidgets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellers(ctx context.Context, in *RequestByPage, opts ...grpc.CallOption) (*Sellers, error) {
	out := new(Sellers)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSeller(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Seller, error) {
	out := new(Seller)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) CreateSeller(ctx context.Context, in *SellerRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/CreateSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) UpdateSeller(ctx context.Context, in *SellerRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/UpdateSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellerCompanies(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*CompanyList, error) {
	out := new(CompanyList)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellerCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellerProducts(ctx context.Context, in *SellerProductsRequest, opts ...grpc.CallOption) (*SellerProducts, error) {
	out := new(SellerProducts)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellerProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellerProduct(ctx context.Context, in *SellerProductsRequest, opts ...grpc.CallOption) (*SellerProduct, error) {
	out := new(SellerProduct)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellerProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetProducts(ctx context.Context, in *RequestByPage, opts ...grpc.CallOption) (*BrandProducts, error) {
	out := new(BrandProducts)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) CreateProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BrandProduct, error) {
	out := new(BrandProduct)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) UpdateProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) LinkSellerProduct(ctx context.Context, in *SellerProductLinkRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/LinkSellerProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageReply, error) {
	out := new(ImageReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) UploadFile(ctx context.Context, in *BrandUploadRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetProductPrice(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*ProductPrice, error) {
	out := new(ProductPrice)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetProductPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetProductPrices(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*ProductPrices, error) {
	out := new(ProductPrices)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetProductPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) SetProductPrice(ctx context.Context, in *ProductPriceRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/SetProductPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) SearchDataByCode(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*DataByCode, error) {
	out := new(DataByCode)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/SearchDataByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetOrdersGraph(ctx context.Context, in *LineGraphRequest, opts ...grpc.CallOption) (*LineGraphics, error) {
	out := new(LineGraphics)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetOrdersGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetShopsGraph(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*RoundGraphic, error) {
	out := new(RoundGraphic)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetShopsGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellersData(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*Sellers, error) {
	out := new(Sellers)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellersData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellerAnalyzeOrders(ctx context.Context, in *LineGraphRequest, opts ...grpc.CallOption) (*LineGraphics, error) {
	out := new(LineGraphics)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellerAnalyzeOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellerAnalyzeProducts(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*AnalyzeSellersProduct, error) {
	out := new(AnalyzeSellersProduct)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellerAnalyzeProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetProductsData(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*ProductsData, error) {
	out := new(ProductsData)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetProductsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetProductsAnalyzeOrders(ctx context.Context, in *LineGraphRequest, opts ...grpc.CallOption) (*LineGraphics, error) {
	out := new(LineGraphics)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetProductsAnalyzeOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetProductsAnalyzeSellers(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*Sellers, error) {
	out := new(Sellers)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetProductsAnalyzeSellers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellerAssortiment(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Assortiment, error) {
	out := new(Assortiment)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellerAssortiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetProductSellersCount(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Assortiment, error) {
	out := new(Assortiment)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetProductSellersCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellerOutProducts(ctx context.Context, in *OutProductsRequest, opts ...grpc.CallOption) (*OutProducts, error) {
	out := new(OutProducts)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellerOutProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellerOutProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*OutProduct, error) {
	out := new(OutProduct)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellerOutProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) CreateSellerOutProduct(ctx context.Context, in *SellerOutProductRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/CreateSellerOutProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) DeleteSellerOutProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/DeleteSellerOutProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) SellerOutProductSetUrl(ctx context.Context, in *SellerOutProductUrlRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/SellerOutProductSetUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) SellerOutProductDeleteUrl(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/SellerOutProductDeleteUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetProductsNoSeller(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BrandProducts, error) {
	out := new(BrandProducts)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetProductsNoSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetParserData(ctx context.Context, in *ParserGetRequest, opts ...grpc.CallOption) (*ParserJob, error) {
	out := new(ParserJob)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetParserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) SetParserData(ctx context.Context, in *ParserSetRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/SetParserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetDetectorData(ctx context.Context, in *DetectorGetRequest, opts ...grpc.CallOption) (*DetectorGetReply, error) {
	out := new(DetectorGetReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetDetectorData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) SetDetectorData(ctx context.Context, in *DetectorSetRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/SetDetectorData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetDumpingGraph(ctx context.Context, in *LineGraphRequest, opts ...grpc.CallOption) (*LineGraph, error) {
	out := new(LineGraph)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetDumpingGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetDumpingDays(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*DumpingDays, error) {
	out := new(DumpingDays)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetDumpingDays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetDumpingList(ctx context.Context, in *DumpingListRequest, opts ...grpc.CallOption) (*DumpingList, error) {
	out := new(DumpingList)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetDumpingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetDumpingListDetail(ctx context.Context, in *DumpingItemRequest, opts ...grpc.CallOption) (*DumpingDetail, error) {
	out := new(DumpingDetail)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetDumpingListDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) UpdateDumpingListDetail(ctx context.Context, in *DumpingUpdateRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/UpdateDumpingListDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) MonitorAlert(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/MonitorAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) MonitorRadar(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*LineGraphics, error) {
	out := new(LineGraphics)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/MonitorRadar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) MonitorGraphic(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*LineGraphics, error) {
	out := new(LineGraphics)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/MonitorGraphic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) MonitorMonth(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*MonitorMonthData, error) {
	out := new(MonitorMonthData)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/MonitorMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) MonitorProductLeaders(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*OrderLeaders, error) {
	out := new(OrderLeaders)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/MonitorProductLeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetDumpingLeaders(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*DumpingSellersLeaders, error) {
	out := new(DumpingSellersLeaders)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetDumpingLeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) MonitorRunString(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*RunString, error) {
	out := new(RunString)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/MonitorRunString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) DeleteCerasusProductData(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/DeleteCerasusProductData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) DeleteCerasusProductDataByShop(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/DeleteCerasusProductDataByShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BranderServer is the server API for Brander service.
// All implementations must embed UnimplementedBranderServer
// for forward compatibility
type BranderServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	GetCountWidgets(context.Context, *Auth) (*BrandCountWidgets, error)
	GetSellers(context.Context, *RequestByPage) (*Sellers, error)
	GetSeller(context.Context, *RequestByID) (*Seller, error)
	CreateSeller(context.Context, *SellerRequest) (*StatusReply, error)
	UpdateSeller(context.Context, *SellerRequest) (*StatusReply, error)
	GetSellerCompanies(context.Context, *RequestByID) (*CompanyList, error)
	GetSellerProducts(context.Context, *SellerProductsRequest) (*SellerProducts, error)
	GetSellerProduct(context.Context, *SellerProductsRequest) (*SellerProduct, error)
	GetProducts(context.Context, *RequestByPage) (*BrandProducts, error)
	CreateProduct(context.Context, *ProductRequest) (*StatusReply, error)
	GetProduct(context.Context, *RequestByID) (*BrandProduct, error)
	UpdateProduct(context.Context, *ProductRequest) (*StatusReply, error)
	LinkSellerProduct(context.Context, *SellerProductLinkRequest) (*StatusReply, error)
	GetImage(context.Context, *ImageRequest) (*ImageReply, error)
	UploadFile(context.Context, *BrandUploadRequest) (*StatusReply, error)
	GetProductPrice(context.Context, *RequestByID) (*ProductPrice, error)
	GetProductPrices(context.Context, *RequestByID) (*ProductPrices, error)
	SetProductPrice(context.Context, *ProductPriceRequest) (*StatusReply, error)
	SearchDataByCode(context.Context, *SearchRequest) (*DataByCode, error)
	GetOrdersGraph(context.Context, *LineGraphRequest) (*LineGraphics, error)
	GetShopsGraph(context.Context, *Auth) (*RoundGraphic, error)
	GetSellersData(context.Context, *RequestByDates) (*Sellers, error)
	GetSellerAnalyzeOrders(context.Context, *LineGraphRequest) (*LineGraphics, error)
	GetSellerAnalyzeProducts(context.Context, *RequestByDates) (*AnalyzeSellersProduct, error)
	GetProductsData(context.Context, *RequestByDates) (*ProductsData, error)
	GetProductsAnalyzeOrders(context.Context, *LineGraphRequest) (*LineGraphics, error)
	GetProductsAnalyzeSellers(context.Context, *RequestByDates) (*Sellers, error)
	GetSellerAssortiment(context.Context, *RequestByID) (*Assortiment, error)
	GetProductSellersCount(context.Context, *RequestByID) (*Assortiment, error)
	GetSellerOutProducts(context.Context, *OutProductsRequest) (*OutProducts, error)
	GetSellerOutProduct(context.Context, *RequestByID) (*OutProduct, error)
	CreateSellerOutProduct(context.Context, *SellerOutProductRequest) (*StatusReply, error)
	DeleteSellerOutProduct(context.Context, *RequestByID) (*StatusReply, error)
	SellerOutProductSetUrl(context.Context, *SellerOutProductUrlRequest) (*StatusReply, error)
	SellerOutProductDeleteUrl(context.Context, *RequestByID) (*StatusReply, error)
	GetProductsNoSeller(context.Context, *RequestByID) (*BrandProducts, error)
	GetParserData(context.Context, *ParserGetRequest) (*ParserJob, error)
	SetParserData(context.Context, *ParserSetRequest) (*StatusReply, error)
	GetDetectorData(context.Context, *DetectorGetRequest) (*DetectorGetReply, error)
	SetDetectorData(context.Context, *DetectorSetRequest) (*StatusReply, error)
	GetDumpingGraph(context.Context, *LineGraphRequest) (*LineGraph, error)
	GetDumpingDays(context.Context, *RequestByDates) (*DumpingDays, error)
	GetDumpingList(context.Context, *DumpingListRequest) (*DumpingList, error)
	GetDumpingListDetail(context.Context, *DumpingItemRequest) (*DumpingDetail, error)
	UpdateDumpingListDetail(context.Context, *DumpingUpdateRequest) (*StatusReply, error)
	MonitorAlert(context.Context, *Auth) (*Count, error)
	MonitorRadar(context.Context, *Auth) (*LineGraphics, error)
	MonitorGraphic(context.Context, *Auth) (*LineGraphics, error)
	MonitorMonth(context.Context, *Auth) (*MonitorMonthData, error)
	MonitorProductLeaders(context.Context, *Auth) (*OrderLeaders, error)
	GetDumpingLeaders(context.Context, *Auth) (*DumpingSellersLeaders, error)
	MonitorRunString(context.Context, *Auth) (*RunString, error)
	DeleteCerasusProductData(context.Context, *RequestByID) (*StatusReply, error)
	DeleteCerasusProductDataByShop(context.Context, *RequestByID) (*StatusReply, error)
	mustEmbedUnimplementedBranderServer()
}

// UnimplementedBranderServer must be embedded to have forward compatible implementations.
type UnimplementedBranderServer struct {
}

func (UnimplementedBranderServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBranderServer) GetCountWidgets(context.Context, *Auth) (*BrandCountWidgets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountWidgets not implemented")
}
func (UnimplementedBranderServer) GetSellers(context.Context, *RequestByPage) (*Sellers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellers not implemented")
}
func (UnimplementedBranderServer) GetSeller(context.Context, *RequestByID) (*Seller, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeller not implemented")
}
func (UnimplementedBranderServer) CreateSeller(context.Context, *SellerRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeller not implemented")
}
func (UnimplementedBranderServer) UpdateSeller(context.Context, *SellerRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeller not implemented")
}
func (UnimplementedBranderServer) GetSellerCompanies(context.Context, *RequestByID) (*CompanyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerCompanies not implemented")
}
func (UnimplementedBranderServer) GetSellerProducts(context.Context, *SellerProductsRequest) (*SellerProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerProducts not implemented")
}
func (UnimplementedBranderServer) GetSellerProduct(context.Context, *SellerProductsRequest) (*SellerProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerProduct not implemented")
}
func (UnimplementedBranderServer) GetProducts(context.Context, *RequestByPage) (*BrandProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedBranderServer) CreateProduct(context.Context, *ProductRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedBranderServer) GetProduct(context.Context, *RequestByID) (*BrandProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedBranderServer) UpdateProduct(context.Context, *ProductRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedBranderServer) LinkSellerProduct(context.Context, *SellerProductLinkRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkSellerProduct not implemented")
}
func (UnimplementedBranderServer) GetImage(context.Context, *ImageRequest) (*ImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedBranderServer) UploadFile(context.Context, *BrandUploadRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedBranderServer) GetProductPrice(context.Context, *RequestByID) (*ProductPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductPrice not implemented")
}
func (UnimplementedBranderServer) GetProductPrices(context.Context, *RequestByID) (*ProductPrices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductPrices not implemented")
}
func (UnimplementedBranderServer) SetProductPrice(context.Context, *ProductPriceRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProductPrice not implemented")
}
func (UnimplementedBranderServer) SearchDataByCode(context.Context, *SearchRequest) (*DataByCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDataByCode not implemented")
}
func (UnimplementedBranderServer) GetOrdersGraph(context.Context, *LineGraphRequest) (*LineGraphics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersGraph not implemented")
}
func (UnimplementedBranderServer) GetShopsGraph(context.Context, *Auth) (*RoundGraphic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopsGraph not implemented")
}
func (UnimplementedBranderServer) GetSellersData(context.Context, *RequestByDates) (*Sellers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellersData not implemented")
}
func (UnimplementedBranderServer) GetSellerAnalyzeOrders(context.Context, *LineGraphRequest) (*LineGraphics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerAnalyzeOrders not implemented")
}
func (UnimplementedBranderServer) GetSellerAnalyzeProducts(context.Context, *RequestByDates) (*AnalyzeSellersProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerAnalyzeProducts not implemented")
}
func (UnimplementedBranderServer) GetProductsData(context.Context, *RequestByDates) (*ProductsData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsData not implemented")
}
func (UnimplementedBranderServer) GetProductsAnalyzeOrders(context.Context, *LineGraphRequest) (*LineGraphics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsAnalyzeOrders not implemented")
}
func (UnimplementedBranderServer) GetProductsAnalyzeSellers(context.Context, *RequestByDates) (*Sellers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsAnalyzeSellers not implemented")
}
func (UnimplementedBranderServer) GetSellerAssortiment(context.Context, *RequestByID) (*Assortiment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerAssortiment not implemented")
}
func (UnimplementedBranderServer) GetProductSellersCount(context.Context, *RequestByID) (*Assortiment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductSellersCount not implemented")
}
func (UnimplementedBranderServer) GetSellerOutProducts(context.Context, *OutProductsRequest) (*OutProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerOutProducts not implemented")
}
func (UnimplementedBranderServer) GetSellerOutProduct(context.Context, *RequestByID) (*OutProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerOutProduct not implemented")
}
func (UnimplementedBranderServer) CreateSellerOutProduct(context.Context, *SellerOutProductRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSellerOutProduct not implemented")
}
func (UnimplementedBranderServer) DeleteSellerOutProduct(context.Context, *RequestByID) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSellerOutProduct not implemented")
}
func (UnimplementedBranderServer) SellerOutProductSetUrl(context.Context, *SellerOutProductUrlRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellerOutProductSetUrl not implemented")
}
func (UnimplementedBranderServer) SellerOutProductDeleteUrl(context.Context, *RequestByID) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellerOutProductDeleteUrl not implemented")
}
func (UnimplementedBranderServer) GetProductsNoSeller(context.Context, *RequestByID) (*BrandProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsNoSeller not implemented")
}
func (UnimplementedBranderServer) GetParserData(context.Context, *ParserGetRequest) (*ParserJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParserData not implemented")
}
func (UnimplementedBranderServer) SetParserData(context.Context, *ParserSetRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParserData not implemented")
}
func (UnimplementedBranderServer) GetDetectorData(context.Context, *DetectorGetRequest) (*DetectorGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetectorData not implemented")
}
func (UnimplementedBranderServer) SetDetectorData(context.Context, *DetectorSetRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDetectorData not implemented")
}
func (UnimplementedBranderServer) GetDumpingGraph(context.Context, *LineGraphRequest) (*LineGraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDumpingGraph not implemented")
}
func (UnimplementedBranderServer) GetDumpingDays(context.Context, *RequestByDates) (*DumpingDays, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDumpingDays not implemented")
}
func (UnimplementedBranderServer) GetDumpingList(context.Context, *DumpingListRequest) (*DumpingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDumpingList not implemented")
}
func (UnimplementedBranderServer) GetDumpingListDetail(context.Context, *DumpingItemRequest) (*DumpingDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDumpingListDetail not implemented")
}
func (UnimplementedBranderServer) UpdateDumpingListDetail(context.Context, *DumpingUpdateRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDumpingListDetail not implemented")
}
func (UnimplementedBranderServer) MonitorAlert(context.Context, *Auth) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorAlert not implemented")
}
func (UnimplementedBranderServer) MonitorRadar(context.Context, *Auth) (*LineGraphics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorRadar not implemented")
}
func (UnimplementedBranderServer) MonitorGraphic(context.Context, *Auth) (*LineGraphics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorGraphic not implemented")
}
func (UnimplementedBranderServer) MonitorMonth(context.Context, *Auth) (*MonitorMonthData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorMonth not implemented")
}
func (UnimplementedBranderServer) MonitorProductLeaders(context.Context, *Auth) (*OrderLeaders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorProductLeaders not implemented")
}
func (UnimplementedBranderServer) GetDumpingLeaders(context.Context, *Auth) (*DumpingSellersLeaders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDumpingLeaders not implemented")
}
func (UnimplementedBranderServer) MonitorRunString(context.Context, *Auth) (*RunString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorRunString not implemented")
}
func (UnimplementedBranderServer) DeleteCerasusProductData(context.Context, *RequestByID) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCerasusProductData not implemented")
}
func (UnimplementedBranderServer) DeleteCerasusProductDataByShop(context.Context, *RequestByID) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCerasusProductDataByShop not implemented")
}
func (UnimplementedBranderServer) mustEmbedUnimplementedBranderServer() {}

// UnsafeBranderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BranderServer will
// result in compilation errors.
type UnsafeBranderServer interface {
	mustEmbedUnimplementedBranderServer()
}

func RegisterBranderServer(s grpc.ServiceRegistrar, srv BranderServer) {
	s.RegisterService(&Brander_ServiceDesc, srv)
}

func _Brander_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetCountWidgets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetCountWidgets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetCountWidgets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetCountWidgets(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellers(ctx, req.(*RequestByPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSeller(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_CreateSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).CreateSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/CreateSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).CreateSeller(ctx, req.(*SellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_UpdateSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).UpdateSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/UpdateSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).UpdateSeller(ctx, req.(*SellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellerCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellerCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellerCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellerCompanies(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellerProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellerProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellerProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellerProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellerProducts(ctx, req.(*SellerProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellerProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellerProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellerProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellerProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellerProduct(ctx, req.(*SellerProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetProducts(ctx, req.(*RequestByPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).CreateProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetProduct(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).UpdateProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_LinkSellerProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellerProductLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).LinkSellerProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/LinkSellerProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).LinkSellerProduct(ctx, req.(*SellerProductLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetImage(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).UploadFile(ctx, req.(*BrandUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetProductPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetProductPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetProductPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetProductPrice(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetProductPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetProductPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetProductPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetProductPrices(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_SetProductPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).SetProductPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/SetProductPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).SetProductPrice(ctx, req.(*ProductPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_SearchDataByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).SearchDataByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/SearchDataByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).SearchDataByCode(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetOrdersGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetOrdersGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetOrdersGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetOrdersGraph(ctx, req.(*LineGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetShopsGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetShopsGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetShopsGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetShopsGraph(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellersData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByDates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellersData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellersData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellersData(ctx, req.(*RequestByDates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellerAnalyzeOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellerAnalyzeOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellerAnalyzeOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellerAnalyzeOrders(ctx, req.(*LineGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellerAnalyzeProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByDates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellerAnalyzeProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellerAnalyzeProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellerAnalyzeProducts(ctx, req.(*RequestByDates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetProductsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByDates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetProductsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetProductsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetProductsData(ctx, req.(*RequestByDates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetProductsAnalyzeOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetProductsAnalyzeOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetProductsAnalyzeOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetProductsAnalyzeOrders(ctx, req.(*LineGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetProductsAnalyzeSellers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByDates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetProductsAnalyzeSellers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetProductsAnalyzeSellers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetProductsAnalyzeSellers(ctx, req.(*RequestByDates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellerAssortiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellerAssortiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellerAssortiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellerAssortiment(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetProductSellersCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetProductSellersCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetProductSellersCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetProductSellersCount(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellerOutProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellerOutProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellerOutProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellerOutProducts(ctx, req.(*OutProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellerOutProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellerOutProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellerOutProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellerOutProduct(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_CreateSellerOutProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellerOutProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).CreateSellerOutProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/CreateSellerOutProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).CreateSellerOutProduct(ctx, req.(*SellerOutProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_DeleteSellerOutProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).DeleteSellerOutProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/DeleteSellerOutProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).DeleteSellerOutProduct(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_SellerOutProductSetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellerOutProductUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).SellerOutProductSetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/SellerOutProductSetUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).SellerOutProductSetUrl(ctx, req.(*SellerOutProductUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_SellerOutProductDeleteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).SellerOutProductDeleteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/SellerOutProductDeleteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).SellerOutProductDeleteUrl(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetProductsNoSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetProductsNoSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetProductsNoSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetProductsNoSeller(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetParserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParserGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetParserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetParserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetParserData(ctx, req.(*ParserGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_SetParserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParserSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).SetParserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/SetParserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).SetParserData(ctx, req.(*ParserSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetDetectorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectorGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetDetectorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetDetectorData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetDetectorData(ctx, req.(*DetectorGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_SetDetectorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectorSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).SetDetectorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/SetDetectorData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).SetDetectorData(ctx, req.(*DetectorSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetDumpingGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetDumpingGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetDumpingGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetDumpingGraph(ctx, req.(*LineGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetDumpingDays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByDates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetDumpingDays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetDumpingDays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetDumpingDays(ctx, req.(*RequestByDates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetDumpingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetDumpingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetDumpingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetDumpingList(ctx, req.(*DumpingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetDumpingListDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpingItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetDumpingListDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetDumpingListDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetDumpingListDetail(ctx, req.(*DumpingItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_UpdateDumpingListDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpingUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).UpdateDumpingListDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/UpdateDumpingListDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).UpdateDumpingListDetail(ctx, req.(*DumpingUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_MonitorAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).MonitorAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/MonitorAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).MonitorAlert(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_MonitorRadar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).MonitorRadar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/MonitorRadar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).MonitorRadar(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_MonitorGraphic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).MonitorGraphic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/MonitorGraphic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).MonitorGraphic(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_MonitorMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).MonitorMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/MonitorMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).MonitorMonth(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_MonitorProductLeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).MonitorProductLeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/MonitorProductLeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).MonitorProductLeaders(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetDumpingLeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetDumpingLeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetDumpingLeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetDumpingLeaders(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_MonitorRunString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).MonitorRunString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/MonitorRunString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).MonitorRunString(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_DeleteCerasusProductData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).DeleteCerasusProductData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/DeleteCerasusProductData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).DeleteCerasusProductData(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_DeleteCerasusProductDataByShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).DeleteCerasusProductDataByShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/DeleteCerasusProductDataByShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).DeleteCerasusProductDataByShop(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

// Brander_ServiceDesc is the grpc.ServiceDesc for Brander service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Brander_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cerasusV2.Brander",
	HandlerType: (*BranderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Brander_Ping_Handler,
		},
		{
			MethodName: "GetCountWidgets",
			Handler:    _Brander_GetCountWidgets_Handler,
		},
		{
			MethodName: "GetSellers",
			Handler:    _Brander_GetSellers_Handler,
		},
		{
			MethodName: "GetSeller",
			Handler:    _Brander_GetSeller_Handler,
		},
		{
			MethodName: "CreateSeller",
			Handler:    _Brander_CreateSeller_Handler,
		},
		{
			MethodName: "UpdateSeller",
			Handler:    _Brander_UpdateSeller_Handler,
		},
		{
			MethodName: "GetSellerCompanies",
			Handler:    _Brander_GetSellerCompanies_Handler,
		},
		{
			MethodName: "GetSellerProducts",
			Handler:    _Brander_GetSellerProducts_Handler,
		},
		{
			MethodName: "GetSellerProduct",
			Handler:    _Brander_GetSellerProduct_Handler,
		},
		{
			MethodName: "GetProducts",
			Handler:    _Brander_GetProducts_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _Brander_CreateProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _Brander_GetProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Brander_UpdateProduct_Handler,
		},
		{
			MethodName: "LinkSellerProduct",
			Handler:    _Brander_LinkSellerProduct_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _Brander_GetImage_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _Brander_UploadFile_Handler,
		},
		{
			MethodName: "GetProductPrice",
			Handler:    _Brander_GetProductPrice_Handler,
		},
		{
			MethodName: "GetProductPrices",
			Handler:    _Brander_GetProductPrices_Handler,
		},
		{
			MethodName: "SetProductPrice",
			Handler:    _Brander_SetProductPrice_Handler,
		},
		{
			MethodName: "SearchDataByCode",
			Handler:    _Brander_SearchDataByCode_Handler,
		},
		{
			MethodName: "GetOrdersGraph",
			Handler:    _Brander_GetOrdersGraph_Handler,
		},
		{
			MethodName: "GetShopsGraph",
			Handler:    _Brander_GetShopsGraph_Handler,
		},
		{
			MethodName: "GetSellersData",
			Handler:    _Brander_GetSellersData_Handler,
		},
		{
			MethodName: "GetSellerAnalyzeOrders",
			Handler:    _Brander_GetSellerAnalyzeOrders_Handler,
		},
		{
			MethodName: "GetSellerAnalyzeProducts",
			Handler:    _Brander_GetSellerAnalyzeProducts_Handler,
		},
		{
			MethodName: "GetProductsData",
			Handler:    _Brander_GetProductsData_Handler,
		},
		{
			MethodName: "GetProductsAnalyzeOrders",
			Handler:    _Brander_GetProductsAnalyzeOrders_Handler,
		},
		{
			MethodName: "GetProductsAnalyzeSellers",
			Handler:    _Brander_GetProductsAnalyzeSellers_Handler,
		},
		{
			MethodName: "GetSellerAssortiment",
			Handler:    _Brander_GetSellerAssortiment_Handler,
		},
		{
			MethodName: "GetProductSellersCount",
			Handler:    _Brander_GetProductSellersCount_Handler,
		},
		{
			MethodName: "GetSellerOutProducts",
			Handler:    _Brander_GetSellerOutProducts_Handler,
		},
		{
			MethodName: "GetSellerOutProduct",
			Handler:    _Brander_GetSellerOutProduct_Handler,
		},
		{
			MethodName: "CreateSellerOutProduct",
			Handler:    _Brander_CreateSellerOutProduct_Handler,
		},
		{
			MethodName: "DeleteSellerOutProduct",
			Handler:    _Brander_DeleteSellerOutProduct_Handler,
		},
		{
			MethodName: "SellerOutProductSetUrl",
			Handler:    _Brander_SellerOutProductSetUrl_Handler,
		},
		{
			MethodName: "SellerOutProductDeleteUrl",
			Handler:    _Brander_SellerOutProductDeleteUrl_Handler,
		},
		{
			MethodName: "GetProductsNoSeller",
			Handler:    _Brander_GetProductsNoSeller_Handler,
		},
		{
			MethodName: "GetParserData",
			Handler:    _Brander_GetParserData_Handler,
		},
		{
			MethodName: "SetParserData",
			Handler:    _Brander_SetParserData_Handler,
		},
		{
			MethodName: "GetDetectorData",
			Handler:    _Brander_GetDetectorData_Handler,
		},
		{
			MethodName: "SetDetectorData",
			Handler:    _Brander_SetDetectorData_Handler,
		},
		{
			MethodName: "GetDumpingGraph",
			Handler:    _Brander_GetDumpingGraph_Handler,
		},
		{
			MethodName: "GetDumpingDays",
			Handler:    _Brander_GetDumpingDays_Handler,
		},
		{
			MethodName: "GetDumpingList",
			Handler:    _Brander_GetDumpingList_Handler,
		},
		{
			MethodName: "GetDumpingListDetail",
			Handler:    _Brander_GetDumpingListDetail_Handler,
		},
		{
			MethodName: "UpdateDumpingListDetail",
			Handler:    _Brander_UpdateDumpingListDetail_Handler,
		},
		{
			MethodName: "MonitorAlert",
			Handler:    _Brander_MonitorAlert_Handler,
		},
		{
			MethodName: "MonitorRadar",
			Handler:    _Brander_MonitorRadar_Handler,
		},
		{
			MethodName: "MonitorGraphic",
			Handler:    _Brander_MonitorGraphic_Handler,
		},
		{
			MethodName: "MonitorMonth",
			Handler:    _Brander_MonitorMonth_Handler,
		},
		{
			MethodName: "MonitorProductLeaders",
			Handler:    _Brander_MonitorProductLeaders_Handler,
		},
		{
			MethodName: "GetDumpingLeaders",
			Handler:    _Brander_GetDumpingLeaders_Handler,
		},
		{
			MethodName: "MonitorRunString",
			Handler:    _Brander_MonitorRunString_Handler,
		},
		{
			MethodName: "DeleteCerasusProductData",
			Handler:    _Brander_DeleteCerasusProductData_Handler,
		},
		{
			MethodName: "DeleteCerasusProductDataByShop",
			Handler:    _Brander_DeleteCerasusProductDataByShop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brand_v2.proto",
}
