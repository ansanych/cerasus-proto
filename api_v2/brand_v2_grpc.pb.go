// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: brand_v2.proto

package cerasus_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BranderClient is the client API for Brander service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BranderClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	GetCountWidgets(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*BrandCountWidgets, error)
	GetSellers(ctx context.Context, in *RequestByPage, opts ...grpc.CallOption) (*Sellers, error)
	GetSeller(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Seller, error)
	CreateSeller(ctx context.Context, in *SellerRequest, opts ...grpc.CallOption) (*StatusReply, error)
	UpdateSeller(ctx context.Context, in *SellerRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetSellerCompanies(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*CompanyList, error)
	GetSellerProducts(ctx context.Context, in *SellerProductsRequest, opts ...grpc.CallOption) (*SellerProducts, error)
	GetSellerProduct(ctx context.Context, in *SellerProductsRequest, opts ...grpc.CallOption) (*SellerProduct, error)
	GetProducts(ctx context.Context, in *RequestByPage, opts ...grpc.CallOption) (*BrandProducts, error)
	CreateProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BrandProduct, error)
	UpdateProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*StatusReply, error)
	LinkSellerProduct(ctx context.Context, in *SellerProductLinkRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageReply, error)
	UploadFile(ctx context.Context, in *BrandUploadRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetProductPrice(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*ProductPrice, error)
	GetProductPrices(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*ProductPrices, error)
	SetProductPrice(ctx context.Context, in *ProductPriceRequest, opts ...grpc.CallOption) (*StatusReply, error)
	SearchDataByCode(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*DataByCode, error)
	GetOrdersGraph(ctx context.Context, in *LineGraphRequest, opts ...grpc.CallOption) (*LineGraphics, error)
	GetShopsGraph(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*RoundGraphic, error)
	GetSellersData(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*Sellers, error)
	GetSellerAnalyzeOrders(ctx context.Context, in *LineGraphRequest, opts ...grpc.CallOption) (*LineGraphics, error)
	GetSellerAnalyzeProducts(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*AnalyzeSellersProduct, error)
	GetProductsData(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*ProductsData, error)
	GetBrand(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Brand, error)
	UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetCompaniesWithBrandProducts(ctx context.Context, in *RequestByPage, opts ...grpc.CallOption) (*CompanyList, error)
	SearchSeller(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Sellers, error)
	DeleteProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*StatusReply, error)
	SearchProduct(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*BrandProducts, error)
	DeleteProductPrice(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*StatusReply, error)
	GetSellerOutProducts(ctx context.Context, in *OutProductsRequest, opts ...grpc.CallOption) (*OutProducts, error)
	GetSellerOutProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*OutProduct, error)
	CreateSellerOutProduct(ctx context.Context, in *SellerOutProductRequest, opts ...grpc.CallOption) (*StatusReply, error)
	DeleteSellerOutProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*StatusReply, error)
	SellerOutProductSetUrl(ctx context.Context, in *SellerOutProductUrlRequest, opts ...grpc.CallOption) (*StatusReply, error)
	SellerOutProductDeleteUrl(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*StatusReply, error)
}

type branderClient struct {
	cc grpc.ClientConnInterface
}

func NewBranderClient(cc grpc.ClientConnInterface) BranderClient {
	return &branderClient{cc}
}

func (c *branderClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetCountWidgets(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*BrandCountWidgets, error) {
	out := new(BrandCountWidgets)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetCountWidgets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellers(ctx context.Context, in *RequestByPage, opts ...grpc.CallOption) (*Sellers, error) {
	out := new(Sellers)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSeller(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Seller, error) {
	out := new(Seller)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) CreateSeller(ctx context.Context, in *SellerRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/CreateSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) UpdateSeller(ctx context.Context, in *SellerRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/UpdateSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellerCompanies(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*CompanyList, error) {
	out := new(CompanyList)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellerCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellerProducts(ctx context.Context, in *SellerProductsRequest, opts ...grpc.CallOption) (*SellerProducts, error) {
	out := new(SellerProducts)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellerProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellerProduct(ctx context.Context, in *SellerProductsRequest, opts ...grpc.CallOption) (*SellerProduct, error) {
	out := new(SellerProduct)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellerProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetProducts(ctx context.Context, in *RequestByPage, opts ...grpc.CallOption) (*BrandProducts, error) {
	out := new(BrandProducts)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) CreateProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BrandProduct, error) {
	out := new(BrandProduct)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) UpdateProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) LinkSellerProduct(ctx context.Context, in *SellerProductLinkRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/LinkSellerProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageReply, error) {
	out := new(ImageReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) UploadFile(ctx context.Context, in *BrandUploadRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetProductPrice(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*ProductPrice, error) {
	out := new(ProductPrice)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetProductPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetProductPrices(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*ProductPrices, error) {
	out := new(ProductPrices)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetProductPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) SetProductPrice(ctx context.Context, in *ProductPriceRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/SetProductPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) SearchDataByCode(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*DataByCode, error) {
	out := new(DataByCode)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/SearchDataByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetOrdersGraph(ctx context.Context, in *LineGraphRequest, opts ...grpc.CallOption) (*LineGraphics, error) {
	out := new(LineGraphics)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetOrdersGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetShopsGraph(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*RoundGraphic, error) {
	out := new(RoundGraphic)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetShopsGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellersData(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*Sellers, error) {
	out := new(Sellers)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellersData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellerAnalyzeOrders(ctx context.Context, in *LineGraphRequest, opts ...grpc.CallOption) (*LineGraphics, error) {
	out := new(LineGraphics)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellerAnalyzeOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellerAnalyzeProducts(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*AnalyzeSellersProduct, error) {
	out := new(AnalyzeSellersProduct)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellerAnalyzeProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetProductsData(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*ProductsData, error) {
	out := new(ProductsData)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetProductsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetBrand(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Brand, error) {
	out := new(Brand)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/UpdateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetCompaniesWithBrandProducts(ctx context.Context, in *RequestByPage, opts ...grpc.CallOption) (*CompanyList, error) {
	out := new(CompanyList)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetCompaniesWithBrandProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) SearchSeller(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Sellers, error) {
	out := new(Sellers)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/SearchSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) DeleteProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) SearchProduct(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*BrandProducts, error) {
	out := new(BrandProducts)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/SearchProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) DeleteProductPrice(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/DeleteProductPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellerOutProducts(ctx context.Context, in *OutProductsRequest, opts ...grpc.CallOption) (*OutProducts, error) {
	out := new(OutProducts)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellerOutProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) GetSellerOutProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*OutProduct, error) {
	out := new(OutProduct)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/GetSellerOutProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) CreateSellerOutProduct(ctx context.Context, in *SellerOutProductRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/CreateSellerOutProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) DeleteSellerOutProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/DeleteSellerOutProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) SellerOutProductSetUrl(ctx context.Context, in *SellerOutProductUrlRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/SellerOutProductSetUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branderClient) SellerOutProductDeleteUrl(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Brander/SellerOutProductDeleteUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BranderServer is the server API for Brander service.
// All implementations must embed UnimplementedBranderServer
// for forward compatibility
type BranderServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	GetCountWidgets(context.Context, *Auth) (*BrandCountWidgets, error)
	GetSellers(context.Context, *RequestByPage) (*Sellers, error)
	GetSeller(context.Context, *RequestByID) (*Seller, error)
	CreateSeller(context.Context, *SellerRequest) (*StatusReply, error)
	UpdateSeller(context.Context, *SellerRequest) (*StatusReply, error)
	GetSellerCompanies(context.Context, *RequestByID) (*CompanyList, error)
	GetSellerProducts(context.Context, *SellerProductsRequest) (*SellerProducts, error)
	GetSellerProduct(context.Context, *SellerProductsRequest) (*SellerProduct, error)
	GetProducts(context.Context, *RequestByPage) (*BrandProducts, error)
	CreateProduct(context.Context, *ProductRequest) (*StatusReply, error)
	GetProduct(context.Context, *RequestByID) (*BrandProduct, error)
	UpdateProduct(context.Context, *ProductRequest) (*StatusReply, error)
	LinkSellerProduct(context.Context, *SellerProductLinkRequest) (*StatusReply, error)
	GetImage(context.Context, *ImageRequest) (*ImageReply, error)
	UploadFile(context.Context, *BrandUploadRequest) (*StatusReply, error)
	GetProductPrice(context.Context, *RequestByID) (*ProductPrice, error)
	GetProductPrices(context.Context, *RequestByID) (*ProductPrices, error)
	SetProductPrice(context.Context, *ProductPriceRequest) (*StatusReply, error)
	SearchDataByCode(context.Context, *SearchRequest) (*DataByCode, error)
	GetOrdersGraph(context.Context, *LineGraphRequest) (*LineGraphics, error)
	GetShopsGraph(context.Context, *Auth) (*RoundGraphic, error)
	GetSellersData(context.Context, *RequestByDates) (*Sellers, error)
	GetSellerAnalyzeOrders(context.Context, *LineGraphRequest) (*LineGraphics, error)
	GetSellerAnalyzeProducts(context.Context, *RequestByDates) (*AnalyzeSellersProduct, error)
	GetProductsData(context.Context, *RequestByDates) (*ProductsData, error)
	GetBrand(context.Context, *Auth) (*Brand, error)
	UpdateBrand(context.Context, *UpdateBrandRequest) (*StatusReply, error)
	GetCompaniesWithBrandProducts(context.Context, *RequestByPage) (*CompanyList, error)
	SearchSeller(context.Context, *SearchRequest) (*Sellers, error)
	DeleteProduct(context.Context, *ProductRequest) (*StatusReply, error)
	SearchProduct(context.Context, *SearchRequest) (*BrandProducts, error)
	DeleteProductPrice(context.Context, *RequestByID) (*StatusReply, error)
	GetSellerOutProducts(context.Context, *OutProductsRequest) (*OutProducts, error)
	GetSellerOutProduct(context.Context, *RequestByID) (*OutProduct, error)
	CreateSellerOutProduct(context.Context, *SellerOutProductRequest) (*StatusReply, error)
	DeleteSellerOutProduct(context.Context, *RequestByID) (*StatusReply, error)
	SellerOutProductSetUrl(context.Context, *SellerOutProductUrlRequest) (*StatusReply, error)
	SellerOutProductDeleteUrl(context.Context, *RequestByID) (*StatusReply, error)
	mustEmbedUnimplementedBranderServer()
}

// UnimplementedBranderServer must be embedded to have forward compatible implementations.
type UnimplementedBranderServer struct {
}

func (UnimplementedBranderServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBranderServer) GetCountWidgets(context.Context, *Auth) (*BrandCountWidgets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountWidgets not implemented")
}
func (UnimplementedBranderServer) GetSellers(context.Context, *RequestByPage) (*Sellers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellers not implemented")
}
func (UnimplementedBranderServer) GetSeller(context.Context, *RequestByID) (*Seller, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeller not implemented")
}
func (UnimplementedBranderServer) CreateSeller(context.Context, *SellerRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeller not implemented")
}
func (UnimplementedBranderServer) UpdateSeller(context.Context, *SellerRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeller not implemented")
}
func (UnimplementedBranderServer) GetSellerCompanies(context.Context, *RequestByID) (*CompanyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerCompanies not implemented")
}
func (UnimplementedBranderServer) GetSellerProducts(context.Context, *SellerProductsRequest) (*SellerProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerProducts not implemented")
}
func (UnimplementedBranderServer) GetSellerProduct(context.Context, *SellerProductsRequest) (*SellerProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerProduct not implemented")
}
func (UnimplementedBranderServer) GetProducts(context.Context, *RequestByPage) (*BrandProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedBranderServer) CreateProduct(context.Context, *ProductRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedBranderServer) GetProduct(context.Context, *RequestByID) (*BrandProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedBranderServer) UpdateProduct(context.Context, *ProductRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedBranderServer) LinkSellerProduct(context.Context, *SellerProductLinkRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkSellerProduct not implemented")
}
func (UnimplementedBranderServer) GetImage(context.Context, *ImageRequest) (*ImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedBranderServer) UploadFile(context.Context, *BrandUploadRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedBranderServer) GetProductPrice(context.Context, *RequestByID) (*ProductPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductPrice not implemented")
}
func (UnimplementedBranderServer) GetProductPrices(context.Context, *RequestByID) (*ProductPrices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductPrices not implemented")
}
func (UnimplementedBranderServer) SetProductPrice(context.Context, *ProductPriceRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProductPrice not implemented")
}
func (UnimplementedBranderServer) SearchDataByCode(context.Context, *SearchRequest) (*DataByCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDataByCode not implemented")
}
func (UnimplementedBranderServer) GetOrdersGraph(context.Context, *LineGraphRequest) (*LineGraphics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersGraph not implemented")
}
func (UnimplementedBranderServer) GetShopsGraph(context.Context, *Auth) (*RoundGraphic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopsGraph not implemented")
}
func (UnimplementedBranderServer) GetSellersData(context.Context, *RequestByDates) (*Sellers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellersData not implemented")
}
func (UnimplementedBranderServer) GetSellerAnalyzeOrders(context.Context, *LineGraphRequest) (*LineGraphics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerAnalyzeOrders not implemented")
}
func (UnimplementedBranderServer) GetSellerAnalyzeProducts(context.Context, *RequestByDates) (*AnalyzeSellersProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerAnalyzeProducts not implemented")
}
func (UnimplementedBranderServer) GetProductsData(context.Context, *RequestByDates) (*ProductsData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsData not implemented")
}
func (UnimplementedBranderServer) GetBrand(context.Context, *Auth) (*Brand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrand not implemented")
}
func (UnimplementedBranderServer) UpdateBrand(context.Context, *UpdateBrandRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedBranderServer) GetCompaniesWithBrandProducts(context.Context, *RequestByPage) (*CompanyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompaniesWithBrandProducts not implemented")
}
func (UnimplementedBranderServer) SearchSeller(context.Context, *SearchRequest) (*Sellers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSeller not implemented")
}
func (UnimplementedBranderServer) DeleteProduct(context.Context, *ProductRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedBranderServer) SearchProduct(context.Context, *SearchRequest) (*BrandProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProduct not implemented")
}
func (UnimplementedBranderServer) DeleteProductPrice(context.Context, *RequestByID) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductPrice not implemented")
}
func (UnimplementedBranderServer) GetSellerOutProducts(context.Context, *OutProductsRequest) (*OutProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerOutProducts not implemented")
}
func (UnimplementedBranderServer) GetSellerOutProduct(context.Context, *RequestByID) (*OutProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerOutProduct not implemented")
}
func (UnimplementedBranderServer) CreateSellerOutProduct(context.Context, *SellerOutProductRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSellerOutProduct not implemented")
}
func (UnimplementedBranderServer) DeleteSellerOutProduct(context.Context, *RequestByID) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSellerOutProduct not implemented")
}
func (UnimplementedBranderServer) SellerOutProductSetUrl(context.Context, *SellerOutProductUrlRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellerOutProductSetUrl not implemented")
}
func (UnimplementedBranderServer) SellerOutProductDeleteUrl(context.Context, *RequestByID) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellerOutProductDeleteUrl not implemented")
}
func (UnimplementedBranderServer) mustEmbedUnimplementedBranderServer() {}

// UnsafeBranderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BranderServer will
// result in compilation errors.
type UnsafeBranderServer interface {
	mustEmbedUnimplementedBranderServer()
}

func RegisterBranderServer(s grpc.ServiceRegistrar, srv BranderServer) {
	s.RegisterService(&Brander_ServiceDesc, srv)
}

func _Brander_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetCountWidgets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetCountWidgets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetCountWidgets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetCountWidgets(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellers(ctx, req.(*RequestByPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSeller(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_CreateSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).CreateSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/CreateSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).CreateSeller(ctx, req.(*SellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_UpdateSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).UpdateSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/UpdateSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).UpdateSeller(ctx, req.(*SellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellerCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellerCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellerCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellerCompanies(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellerProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellerProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellerProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellerProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellerProducts(ctx, req.(*SellerProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellerProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellerProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellerProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellerProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellerProduct(ctx, req.(*SellerProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetProducts(ctx, req.(*RequestByPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).CreateProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetProduct(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).UpdateProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_LinkSellerProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellerProductLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).LinkSellerProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/LinkSellerProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).LinkSellerProduct(ctx, req.(*SellerProductLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetImage(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).UploadFile(ctx, req.(*BrandUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetProductPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetProductPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetProductPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetProductPrice(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetProductPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetProductPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetProductPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetProductPrices(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_SetProductPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).SetProductPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/SetProductPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).SetProductPrice(ctx, req.(*ProductPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_SearchDataByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).SearchDataByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/SearchDataByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).SearchDataByCode(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetOrdersGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetOrdersGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetOrdersGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetOrdersGraph(ctx, req.(*LineGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetShopsGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetShopsGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetShopsGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetShopsGraph(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellersData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByDates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellersData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellersData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellersData(ctx, req.(*RequestByDates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellerAnalyzeOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellerAnalyzeOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellerAnalyzeOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellerAnalyzeOrders(ctx, req.(*LineGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellerAnalyzeProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByDates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellerAnalyzeProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellerAnalyzeProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellerAnalyzeProducts(ctx, req.(*RequestByDates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetProductsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByDates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetProductsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetProductsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetProductsData(ctx, req.(*RequestByDates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetBrand(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/UpdateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).UpdateBrand(ctx, req.(*UpdateBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetCompaniesWithBrandProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetCompaniesWithBrandProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetCompaniesWithBrandProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetCompaniesWithBrandProducts(ctx, req.(*RequestByPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_SearchSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).SearchSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/SearchSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).SearchSeller(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).DeleteProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_SearchProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).SearchProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/SearchProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).SearchProduct(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_DeleteProductPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).DeleteProductPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/DeleteProductPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).DeleteProductPrice(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellerOutProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellerOutProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellerOutProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellerOutProducts(ctx, req.(*OutProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_GetSellerOutProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).GetSellerOutProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/GetSellerOutProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).GetSellerOutProduct(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_CreateSellerOutProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellerOutProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).CreateSellerOutProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/CreateSellerOutProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).CreateSellerOutProduct(ctx, req.(*SellerOutProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_DeleteSellerOutProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).DeleteSellerOutProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/DeleteSellerOutProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).DeleteSellerOutProduct(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_SellerOutProductSetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellerOutProductUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).SellerOutProductSetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/SellerOutProductSetUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).SellerOutProductSetUrl(ctx, req.(*SellerOutProductUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brander_SellerOutProductDeleteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranderServer).SellerOutProductDeleteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Brander/SellerOutProductDeleteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranderServer).SellerOutProductDeleteUrl(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

// Brander_ServiceDesc is the grpc.ServiceDesc for Brander service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Brander_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cerasusV2.Brander",
	HandlerType: (*BranderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Brander_Ping_Handler,
		},
		{
			MethodName: "GetCountWidgets",
			Handler:    _Brander_GetCountWidgets_Handler,
		},
		{
			MethodName: "GetSellers",
			Handler:    _Brander_GetSellers_Handler,
		},
		{
			MethodName: "GetSeller",
			Handler:    _Brander_GetSeller_Handler,
		},
		{
			MethodName: "CreateSeller",
			Handler:    _Brander_CreateSeller_Handler,
		},
		{
			MethodName: "UpdateSeller",
			Handler:    _Brander_UpdateSeller_Handler,
		},
		{
			MethodName: "GetSellerCompanies",
			Handler:    _Brander_GetSellerCompanies_Handler,
		},
		{
			MethodName: "GetSellerProducts",
			Handler:    _Brander_GetSellerProducts_Handler,
		},
		{
			MethodName: "GetSellerProduct",
			Handler:    _Brander_GetSellerProduct_Handler,
		},
		{
			MethodName: "GetProducts",
			Handler:    _Brander_GetProducts_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _Brander_CreateProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _Brander_GetProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Brander_UpdateProduct_Handler,
		},
		{
			MethodName: "LinkSellerProduct",
			Handler:    _Brander_LinkSellerProduct_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _Brander_GetImage_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _Brander_UploadFile_Handler,
		},
		{
			MethodName: "GetProductPrice",
			Handler:    _Brander_GetProductPrice_Handler,
		},
		{
			MethodName: "GetProductPrices",
			Handler:    _Brander_GetProductPrices_Handler,
		},
		{
			MethodName: "SetProductPrice",
			Handler:    _Brander_SetProductPrice_Handler,
		},
		{
			MethodName: "SearchDataByCode",
			Handler:    _Brander_SearchDataByCode_Handler,
		},
		{
			MethodName: "GetOrdersGraph",
			Handler:    _Brander_GetOrdersGraph_Handler,
		},
		{
			MethodName: "GetShopsGraph",
			Handler:    _Brander_GetShopsGraph_Handler,
		},
		{
			MethodName: "GetSellersData",
			Handler:    _Brander_GetSellersData_Handler,
		},
		{
			MethodName: "GetSellerAnalyzeOrders",
			Handler:    _Brander_GetSellerAnalyzeOrders_Handler,
		},
		{
			MethodName: "GetSellerAnalyzeProducts",
			Handler:    _Brander_GetSellerAnalyzeProducts_Handler,
		},
		{
			MethodName: "GetProductsData",
			Handler:    _Brander_GetProductsData_Handler,
		},
		{
			MethodName: "GetBrand",
			Handler:    _Brander_GetBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _Brander_UpdateBrand_Handler,
		},
		{
			MethodName: "GetCompaniesWithBrandProducts",
			Handler:    _Brander_GetCompaniesWithBrandProducts_Handler,
		},
		{
			MethodName: "SearchSeller",
			Handler:    _Brander_SearchSeller_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _Brander_DeleteProduct_Handler,
		},
		{
			MethodName: "SearchProduct",
			Handler:    _Brander_SearchProduct_Handler,
		},
		{
			MethodName: "DeleteProductPrice",
			Handler:    _Brander_DeleteProductPrice_Handler,
		},
		{
			MethodName: "GetSellerOutProducts",
			Handler:    _Brander_GetSellerOutProducts_Handler,
		},
		{
			MethodName: "GetSellerOutProduct",
			Handler:    _Brander_GetSellerOutProduct_Handler,
		},
		{
			MethodName: "CreateSellerOutProduct",
			Handler:    _Brander_CreateSellerOutProduct_Handler,
		},
		{
			MethodName: "DeleteSellerOutProduct",
			Handler:    _Brander_DeleteSellerOutProduct_Handler,
		},
		{
			MethodName: "SellerOutProductSetUrl",
			Handler:    _Brander_SellerOutProductSetUrl_Handler,
		},
		{
			MethodName: "SellerOutProductDeleteUrl",
			Handler:    _Brander_SellerOutProductDeleteUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brand_v2.proto",
}
