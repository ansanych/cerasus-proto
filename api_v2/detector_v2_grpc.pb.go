// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: detector_v2.proto

package cerasus_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DetectorClient is the client API for Detector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetectorClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	SetScreenShot(ctx context.Context, in *ScreenShot, opts ...grpc.CallOption) (*StatusReply, error)
	GetScreenShot(ctx context.Context, in *ScreenShot, opts ...grpc.CallOption) (*ScreenShot, error)
}

type detectorClient struct {
	cc grpc.ClientConnInterface
}

func NewDetectorClient(cc grpc.ClientConnInterface) DetectorClient {
	return &detectorClient{cc}
}

func (c *detectorClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Detector/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectorClient) SetScreenShot(ctx context.Context, in *ScreenShot, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV2.Detector/SetScreenShot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectorClient) GetScreenShot(ctx context.Context, in *ScreenShot, opts ...grpc.CallOption) (*ScreenShot, error) {
	out := new(ScreenShot)
	err := c.cc.Invoke(ctx, "/cerasusV2.Detector/GetScreenShot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetectorServer is the server API for Detector service.
// All implementations must embed UnimplementedDetectorServer
// for forward compatibility
type DetectorServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	SetScreenShot(context.Context, *ScreenShot) (*StatusReply, error)
	GetScreenShot(context.Context, *ScreenShot) (*ScreenShot, error)
	mustEmbedUnimplementedDetectorServer()
}

// UnimplementedDetectorServer must be embedded to have forward compatible implementations.
type UnimplementedDetectorServer struct {
}

func (UnimplementedDetectorServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDetectorServer) SetScreenShot(context.Context, *ScreenShot) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScreenShot not implemented")
}
func (UnimplementedDetectorServer) GetScreenShot(context.Context, *ScreenShot) (*ScreenShot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenShot not implemented")
}
func (UnimplementedDetectorServer) mustEmbedUnimplementedDetectorServer() {}

// UnsafeDetectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetectorServer will
// result in compilation errors.
type UnsafeDetectorServer interface {
	mustEmbedUnimplementedDetectorServer()
}

func RegisterDetectorServer(s grpc.ServiceRegistrar, srv DetectorServer) {
	s.RegisterService(&Detector_ServiceDesc, srv)
}

func _Detector_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Detector/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectorServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Detector_SetScreenShot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScreenShot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectorServer).SetScreenShot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Detector/SetScreenShot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectorServer).SetScreenShot(ctx, req.(*ScreenShot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Detector_GetScreenShot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScreenShot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectorServer).GetScreenShot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV2.Detector/GetScreenShot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectorServer).GetScreenShot(ctx, req.(*ScreenShot))
	}
	return interceptor(ctx, in, info, handler)
}

// Detector_ServiceDesc is the grpc.ServiceDesc for Detector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Detector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cerasusV2.Detector",
	HandlerType: (*DetectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Detector_Ping_Handler,
		},
		{
			MethodName: "SetScreenShot",
			Handler:    _Detector_SetScreenShot_Handler,
		},
		{
			MethodName: "GetScreenShot",
			Handler:    _Detector_GetScreenShot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "detector_v2.proto",
}
