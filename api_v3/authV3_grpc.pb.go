// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cerasus_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AuthentyClient is the client API for Authenty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthentyClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	CheckAccess(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*Auth, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Company, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*LoginReply, error)
	CreateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*StatusReply, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*StatusReply, error)
	DeleteUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetCompany(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Company, error)
	GetCompanyUsers(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Users, error)
	UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetRoles(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Roles, error)
	GetCompaniesData(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*CompaniesData, error)
	SearchCompaniesData(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*CompaniesData, error)
	CompanyActivate(ctx context.Context, in *RequestActivate, opts ...grpc.CallOption) (*StatusReply, error)
}

type authentyClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthentyClient(cc grpc.ClientConnInterface) AuthentyClient {
	return &authentyClient{cc}
}

func (c *authentyClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Authenty/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authentyClient) CheckAccess(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*Auth, error) {
	out := new(Auth)
	err := c.cc.Invoke(ctx, "/cerasusV3.Authenty/CheckAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authentyClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/cerasusV3.Authenty/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authentyClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Authenty/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authentyClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Authenty/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authentyClient) CreateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Authenty/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authentyClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Authenty/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authentyClient) DeleteUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Authenty/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authentyClient) GetCompany(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/cerasusV3.Authenty/GetCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authentyClient) GetCompanyUsers(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/cerasusV3.Authenty/GetCompanyUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authentyClient) UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Authenty/UpdateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authentyClient) GetRoles(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Roles, error) {
	out := new(Roles)
	err := c.cc.Invoke(ctx, "/cerasusV3.Authenty/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authentyClient) GetCompaniesData(ctx context.Context, in *RequestByDates, opts ...grpc.CallOption) (*CompaniesData, error) {
	out := new(CompaniesData)
	err := c.cc.Invoke(ctx, "/cerasusV3.Authenty/GetCompaniesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authentyClient) SearchCompaniesData(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*CompaniesData, error) {
	out := new(CompaniesData)
	err := c.cc.Invoke(ctx, "/cerasusV3.Authenty/SearchCompaniesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authentyClient) CompanyActivate(ctx context.Context, in *RequestActivate, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Authenty/CompanyActivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthentyServer is the server API for Authenty service.
// All implementations must embed UnimplementedAuthentyServer
// for forward compatibility
type AuthentyServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	CheckAccess(context.Context, *AccessRequest) (*Auth, error)
	Register(context.Context, *RegisterRequest) (*Company, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Refresh(context.Context, *RefreshRequest) (*LoginReply, error)
	CreateUser(context.Context, *UpdateUserRequest) (*StatusReply, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*StatusReply, error)
	DeleteUser(context.Context, *UpdateUserRequest) (*StatusReply, error)
	GetCompany(context.Context, *Auth) (*Company, error)
	GetCompanyUsers(context.Context, *Auth) (*Users, error)
	UpdateCompany(context.Context, *UpdateCompanyRequest) (*StatusReply, error)
	GetRoles(context.Context, *Auth) (*Roles, error)
	GetCompaniesData(context.Context, *RequestByDates) (*CompaniesData, error)
	SearchCompaniesData(context.Context, *SearchRequest) (*CompaniesData, error)
	CompanyActivate(context.Context, *RequestActivate) (*StatusReply, error)
	mustEmbedUnimplementedAuthentyServer()
}

// UnimplementedAuthentyServer must be embedded to have forward compatible implementations.
type UnimplementedAuthentyServer struct {
}

func (UnimplementedAuthentyServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAuthentyServer) CheckAccess(context.Context, *AccessRequest) (*Auth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccess not implemented")
}
func (UnimplementedAuthentyServer) Register(context.Context, *RegisterRequest) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthentyServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthentyServer) Refresh(context.Context, *RefreshRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedAuthentyServer) CreateUser(context.Context, *UpdateUserRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthentyServer) UpdateUser(context.Context, *UpdateUserRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAuthentyServer) DeleteUser(context.Context, *UpdateUserRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuthentyServer) GetCompany(context.Context, *Auth) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}
func (UnimplementedAuthentyServer) GetCompanyUsers(context.Context, *Auth) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyUsers not implemented")
}
func (UnimplementedAuthentyServer) UpdateCompany(context.Context, *UpdateCompanyRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (UnimplementedAuthentyServer) GetRoles(context.Context, *Auth) (*Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedAuthentyServer) GetCompaniesData(context.Context, *RequestByDates) (*CompaniesData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompaniesData not implemented")
}
func (UnimplementedAuthentyServer) SearchCompaniesData(context.Context, *SearchRequest) (*CompaniesData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCompaniesData not implemented")
}
func (UnimplementedAuthentyServer) CompanyActivate(context.Context, *RequestActivate) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyActivate not implemented")
}
func (UnimplementedAuthentyServer) mustEmbedUnimplementedAuthentyServer() {}

// UnsafeAuthentyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthentyServer will
// result in compilation errors.
type UnsafeAuthentyServer interface {
	mustEmbedUnimplementedAuthentyServer()
}

func RegisterAuthentyServer(s *grpc.Server, srv AuthentyServer) {
	s.RegisterService(&_Authenty_serviceDesc, srv)
}

func _Authenty_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentyServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Authenty/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentyServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenty_CheckAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentyServer).CheckAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Authenty/CheckAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentyServer).CheckAccess(ctx, req.(*AccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenty_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentyServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Authenty/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentyServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenty_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentyServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Authenty/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentyServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenty_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentyServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Authenty/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentyServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenty_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentyServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Authenty/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentyServer).CreateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenty_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentyServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Authenty/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentyServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenty_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentyServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Authenty/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentyServer).DeleteUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenty_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentyServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Authenty/GetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentyServer).GetCompany(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenty_GetCompanyUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentyServer).GetCompanyUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Authenty/GetCompanyUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentyServer).GetCompanyUsers(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenty_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentyServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Authenty/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentyServer).UpdateCompany(ctx, req.(*UpdateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenty_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentyServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Authenty/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentyServer).GetRoles(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenty_GetCompaniesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByDates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentyServer).GetCompaniesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Authenty/GetCompaniesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentyServer).GetCompaniesData(ctx, req.(*RequestByDates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenty_SearchCompaniesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentyServer).SearchCompaniesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Authenty/SearchCompaniesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentyServer).SearchCompaniesData(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenty_CompanyActivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestActivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentyServer).CompanyActivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Authenty/CompanyActivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentyServer).CompanyActivate(ctx, req.(*RequestActivate))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authenty_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cerasusV3.Authenty",
	HandlerType: (*AuthentyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Authenty_Ping_Handler,
		},
		{
			MethodName: "CheckAccess",
			Handler:    _Authenty_CheckAccess_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Authenty_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Authenty_Login_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _Authenty_Refresh_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Authenty_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Authenty_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Authenty_DeleteUser_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _Authenty_GetCompany_Handler,
		},
		{
			MethodName: "GetCompanyUsers",
			Handler:    _Authenty_GetCompanyUsers_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _Authenty_UpdateCompany_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _Authenty_GetRoles_Handler,
		},
		{
			MethodName: "GetCompaniesData",
			Handler:    _Authenty_GetCompaniesData_Handler,
		},
		{
			MethodName: "SearchCompaniesData",
			Handler:    _Authenty_SearchCompaniesData_Handler,
		},
		{
			MethodName: "CompanyActivate",
			Handler:    _Authenty_CompanyActivate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authV3.proto",
}
