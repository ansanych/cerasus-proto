// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cerasus_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PricerClient is the client API for Pricer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PricerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	GetProductsWithPricer(ctx context.Context, in *Company, opts ...grpc.CallOption) (*ReplyIDS, error)
	GetConnectedCompaniesByShop(ctx context.Context, in *RequestByShop, opts ...grpc.CallOption) (*CompanyList, error)
	SetQueueJob(ctx context.Context, in *QueuerJob, opts ...grpc.CallOption) (*StatusReply, error)
	GetParserData(ctx context.Context, in *ParserGetRequest, opts ...grpc.CallOption) (*ParserJob, error)
	SetParserData(ctx context.Context, in *ParserSetRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetDetectorData(ctx context.Context, in *DetectorGetRequest, opts ...grpc.CallOption) (*DetectorGetReply, error)
	SetDetectorData(ctx context.Context, in *DetectorSetRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetPricerData(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*UserPricerParams, error)
	GetPricerList(ctx context.Context, in *PricerListRequest, opts ...grpc.CallOption) (*PricerList, error)
	GetPricerProductData(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*PricerProductParams, error)
	SetPricerProductData(ctx context.Context, in *PricerProductParam, opts ...grpc.CallOption) (*StatusReply, error)
	SetEnableShopPricer(ctx context.Context, in *EnableShopPricerRequest, opts ...grpc.CallOption) (*StatusReply, error)
	SetSwitchersPricer(ctx context.Context, in *SetSwitchersRequest, opts ...grpc.CallOption) (*StatusReply, error)
	SetPricerPercent(ctx context.Context, in *SetPricerPercentRequest, opts ...grpc.CallOption) (*StatusReply, error)
	SetDumperData(ctx context.Context, in *SetDumperRequest, opts ...grpc.CallOption) (*StatusReply, error)
	DeleteProductData(ctx context.Context, in *DeleteProductDataRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetCompaniesData(ctx context.Context, in *RequestByIDS, opts ...grpc.CallOption) (*CompaniesData, error)
	SetCompanySettings(ctx context.Context, in *CompanySettingsRequest, opts ...grpc.CallOption) (*StatusReply, error)
}

type pricerClient struct {
	cc grpc.ClientConnInterface
}

func NewPricerClient(cc grpc.ClientConnInterface) PricerClient {
	return &pricerClient{cc}
}

func (c *pricerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) GetProductsWithPricer(ctx context.Context, in *Company, opts ...grpc.CallOption) (*ReplyIDS, error) {
	out := new(ReplyIDS)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/GetProductsWithPricer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) GetConnectedCompaniesByShop(ctx context.Context, in *RequestByShop, opts ...grpc.CallOption) (*CompanyList, error) {
	out := new(CompanyList)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/GetConnectedCompaniesByShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) SetQueueJob(ctx context.Context, in *QueuerJob, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/SetQueueJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) GetParserData(ctx context.Context, in *ParserGetRequest, opts ...grpc.CallOption) (*ParserJob, error) {
	out := new(ParserJob)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/GetParserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) SetParserData(ctx context.Context, in *ParserSetRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/SetParserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) GetDetectorData(ctx context.Context, in *DetectorGetRequest, opts ...grpc.CallOption) (*DetectorGetReply, error) {
	out := new(DetectorGetReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/GetDetectorData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) SetDetectorData(ctx context.Context, in *DetectorSetRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/SetDetectorData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) GetPricerData(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*UserPricerParams, error) {
	out := new(UserPricerParams)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/GetPricerData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) GetPricerList(ctx context.Context, in *PricerListRequest, opts ...grpc.CallOption) (*PricerList, error) {
	out := new(PricerList)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/GetPricerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) GetPricerProductData(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*PricerProductParams, error) {
	out := new(PricerProductParams)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/GetPricerProductData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) SetPricerProductData(ctx context.Context, in *PricerProductParam, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/SetPricerProductData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) SetEnableShopPricer(ctx context.Context, in *EnableShopPricerRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/SetEnableShopPricer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) SetSwitchersPricer(ctx context.Context, in *SetSwitchersRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/SetSwitchersPricer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) SetPricerPercent(ctx context.Context, in *SetPricerPercentRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/SetPricerPercent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) SetDumperData(ctx context.Context, in *SetDumperRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/SetDumperData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) DeleteProductData(ctx context.Context, in *DeleteProductDataRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/DeleteProductData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) GetCompaniesData(ctx context.Context, in *RequestByIDS, opts ...grpc.CallOption) (*CompaniesData, error) {
	out := new(CompaniesData)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/GetCompaniesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricerClient) SetCompanySettings(ctx context.Context, in *CompanySettingsRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Pricer/SetCompanySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PricerServer is the server API for Pricer service.
// All implementations must embed UnimplementedPricerServer
// for forward compatibility
type PricerServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	GetProductsWithPricer(context.Context, *Company) (*ReplyIDS, error)
	GetConnectedCompaniesByShop(context.Context, *RequestByShop) (*CompanyList, error)
	SetQueueJob(context.Context, *QueuerJob) (*StatusReply, error)
	GetParserData(context.Context, *ParserGetRequest) (*ParserJob, error)
	SetParserData(context.Context, *ParserSetRequest) (*StatusReply, error)
	GetDetectorData(context.Context, *DetectorGetRequest) (*DetectorGetReply, error)
	SetDetectorData(context.Context, *DetectorSetRequest) (*StatusReply, error)
	GetPricerData(context.Context, *Auth) (*UserPricerParams, error)
	GetPricerList(context.Context, *PricerListRequest) (*PricerList, error)
	GetPricerProductData(context.Context, *RequestByID) (*PricerProductParams, error)
	SetPricerProductData(context.Context, *PricerProductParam) (*StatusReply, error)
	SetEnableShopPricer(context.Context, *EnableShopPricerRequest) (*StatusReply, error)
	SetSwitchersPricer(context.Context, *SetSwitchersRequest) (*StatusReply, error)
	SetPricerPercent(context.Context, *SetPricerPercentRequest) (*StatusReply, error)
	SetDumperData(context.Context, *SetDumperRequest) (*StatusReply, error)
	DeleteProductData(context.Context, *DeleteProductDataRequest) (*StatusReply, error)
	GetCompaniesData(context.Context, *RequestByIDS) (*CompaniesData, error)
	SetCompanySettings(context.Context, *CompanySettingsRequest) (*StatusReply, error)
	mustEmbedUnimplementedPricerServer()
}

// UnimplementedPricerServer must be embedded to have forward compatible implementations.
type UnimplementedPricerServer struct {
}

func (UnimplementedPricerServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPricerServer) GetProductsWithPricer(context.Context, *Company) (*ReplyIDS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsWithPricer not implemented")
}
func (UnimplementedPricerServer) GetConnectedCompaniesByShop(context.Context, *RequestByShop) (*CompanyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectedCompaniesByShop not implemented")
}
func (UnimplementedPricerServer) SetQueueJob(context.Context, *QueuerJob) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetQueueJob not implemented")
}
func (UnimplementedPricerServer) GetParserData(context.Context, *ParserGetRequest) (*ParserJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParserData not implemented")
}
func (UnimplementedPricerServer) SetParserData(context.Context, *ParserSetRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParserData not implemented")
}
func (UnimplementedPricerServer) GetDetectorData(context.Context, *DetectorGetRequest) (*DetectorGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetectorData not implemented")
}
func (UnimplementedPricerServer) SetDetectorData(context.Context, *DetectorSetRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDetectorData not implemented")
}
func (UnimplementedPricerServer) GetPricerData(context.Context, *Auth) (*UserPricerParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPricerData not implemented")
}
func (UnimplementedPricerServer) GetPricerList(context.Context, *PricerListRequest) (*PricerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPricerList not implemented")
}
func (UnimplementedPricerServer) GetPricerProductData(context.Context, *RequestByID) (*PricerProductParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPricerProductData not implemented")
}
func (UnimplementedPricerServer) SetPricerProductData(context.Context, *PricerProductParam) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPricerProductData not implemented")
}
func (UnimplementedPricerServer) SetEnableShopPricer(context.Context, *EnableShopPricerRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnableShopPricer not implemented")
}
func (UnimplementedPricerServer) SetSwitchersPricer(context.Context, *SetSwitchersRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSwitchersPricer not implemented")
}
func (UnimplementedPricerServer) SetPricerPercent(context.Context, *SetPricerPercentRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPricerPercent not implemented")
}
func (UnimplementedPricerServer) SetDumperData(context.Context, *SetDumperRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDumperData not implemented")
}
func (UnimplementedPricerServer) DeleteProductData(context.Context, *DeleteProductDataRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductData not implemented")
}
func (UnimplementedPricerServer) GetCompaniesData(context.Context, *RequestByIDS) (*CompaniesData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompaniesData not implemented")
}
func (UnimplementedPricerServer) SetCompanySettings(context.Context, *CompanySettingsRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCompanySettings not implemented")
}
func (UnimplementedPricerServer) mustEmbedUnimplementedPricerServer() {}

// UnsafePricerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PricerServer will
// result in compilation errors.
type UnsafePricerServer interface {
	mustEmbedUnimplementedPricerServer()
}

func RegisterPricerServer(s *grpc.Server, srv PricerServer) {
	s.RegisterService(&_Pricer_serviceDesc, srv)
}

func _Pricer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_GetProductsWithPricer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).GetProductsWithPricer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/GetProductsWithPricer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).GetProductsWithPricer(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_GetConnectedCompaniesByShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByShop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).GetConnectedCompaniesByShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/GetConnectedCompaniesByShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).GetConnectedCompaniesByShop(ctx, req.(*RequestByShop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_SetQueueJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuerJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).SetQueueJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/SetQueueJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).SetQueueJob(ctx, req.(*QueuerJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_GetParserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParserGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).GetParserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/GetParserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).GetParserData(ctx, req.(*ParserGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_SetParserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParserSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).SetParserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/SetParserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).SetParserData(ctx, req.(*ParserSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_GetDetectorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectorGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).GetDetectorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/GetDetectorData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).GetDetectorData(ctx, req.(*DetectorGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_SetDetectorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectorSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).SetDetectorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/SetDetectorData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).SetDetectorData(ctx, req.(*DetectorSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_GetPricerData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).GetPricerData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/GetPricerData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).GetPricerData(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_GetPricerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PricerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).GetPricerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/GetPricerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).GetPricerList(ctx, req.(*PricerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_GetPricerProductData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).GetPricerProductData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/GetPricerProductData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).GetPricerProductData(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_SetPricerProductData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PricerProductParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).SetPricerProductData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/SetPricerProductData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).SetPricerProductData(ctx, req.(*PricerProductParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_SetEnableShopPricer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableShopPricerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).SetEnableShopPricer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/SetEnableShopPricer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).SetEnableShopPricer(ctx, req.(*EnableShopPricerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_SetSwitchersPricer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSwitchersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).SetSwitchersPricer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/SetSwitchersPricer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).SetSwitchersPricer(ctx, req.(*SetSwitchersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_SetPricerPercent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPricerPercentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).SetPricerPercent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/SetPricerPercent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).SetPricerPercent(ctx, req.(*SetPricerPercentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_SetDumperData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDumperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).SetDumperData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/SetDumperData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).SetDumperData(ctx, req.(*SetDumperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_DeleteProductData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).DeleteProductData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/DeleteProductData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).DeleteProductData(ctx, req.(*DeleteProductDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_GetCompaniesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByIDS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).GetCompaniesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/GetCompaniesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).GetCompaniesData(ctx, req.(*RequestByIDS))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricer_SetCompanySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricerServer).SetCompanySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Pricer/SetCompanySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricerServer).SetCompanySettings(ctx, req.(*CompanySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pricer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cerasusV3.Pricer",
	HandlerType: (*PricerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Pricer_Ping_Handler,
		},
		{
			MethodName: "GetProductsWithPricer",
			Handler:    _Pricer_GetProductsWithPricer_Handler,
		},
		{
			MethodName: "GetConnectedCompaniesByShop",
			Handler:    _Pricer_GetConnectedCompaniesByShop_Handler,
		},
		{
			MethodName: "SetQueueJob",
			Handler:    _Pricer_SetQueueJob_Handler,
		},
		{
			MethodName: "GetParserData",
			Handler:    _Pricer_GetParserData_Handler,
		},
		{
			MethodName: "SetParserData",
			Handler:    _Pricer_SetParserData_Handler,
		},
		{
			MethodName: "GetDetectorData",
			Handler:    _Pricer_GetDetectorData_Handler,
		},
		{
			MethodName: "SetDetectorData",
			Handler:    _Pricer_SetDetectorData_Handler,
		},
		{
			MethodName: "GetPricerData",
			Handler:    _Pricer_GetPricerData_Handler,
		},
		{
			MethodName: "GetPricerList",
			Handler:    _Pricer_GetPricerList_Handler,
		},
		{
			MethodName: "GetPricerProductData",
			Handler:    _Pricer_GetPricerProductData_Handler,
		},
		{
			MethodName: "SetPricerProductData",
			Handler:    _Pricer_SetPricerProductData_Handler,
		},
		{
			MethodName: "SetEnableShopPricer",
			Handler:    _Pricer_SetEnableShopPricer_Handler,
		},
		{
			MethodName: "SetSwitchersPricer",
			Handler:    _Pricer_SetSwitchersPricer_Handler,
		},
		{
			MethodName: "SetPricerPercent",
			Handler:    _Pricer_SetPricerPercent_Handler,
		},
		{
			MethodName: "SetDumperData",
			Handler:    _Pricer_SetDumperData_Handler,
		},
		{
			MethodName: "DeleteProductData",
			Handler:    _Pricer_DeleteProductData_Handler,
		},
		{
			MethodName: "GetCompaniesData",
			Handler:    _Pricer_GetCompaniesData_Handler,
		},
		{
			MethodName: "SetCompanySettings",
			Handler:    _Pricer_SetCompanySettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pricerV3.proto",
}
