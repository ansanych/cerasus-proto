// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: ym-apiV3.proto

package cerasus_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YM_APIClient is the client API for YM_API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YM_APIClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	GetCampaigns(ctx context.Context, in *YMAuthData, opts ...grpc.CallOption) (*YMParams, error)
	LoadApiOrders(ctx context.Context, in *YMApiDateRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetApiOrders(ctx context.Context, in *YMApiDateRequest, opts ...grpc.CallOption) (*YMApiOrders, error)
	LoadApiSales(ctx context.Context, in *YMApiDateRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetApiSales(ctx context.Context, in *YMApiDateRequest, opts ...grpc.CallOption) (*YMApiSales, error)
	LoadApiProducts(ctx context.Context, in *YMParams, opts ...grpc.CallOption) (*StatusReply, error)
	GetApiProducts(ctx context.Context, in *YMParams, opts ...grpc.CallOption) (*YMApiProducts, error)
}

type yM_APIClient struct {
	cc grpc.ClientConnInterface
}

func NewYM_APIClient(cc grpc.ClientConnInterface) YM_APIClient {
	return &yM_APIClient{cc}
}

func (c *yM_APIClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.YM_API/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yM_APIClient) GetCampaigns(ctx context.Context, in *YMAuthData, opts ...grpc.CallOption) (*YMParams, error) {
	out := new(YMParams)
	err := c.cc.Invoke(ctx, "/cerasusV3.YM_API/GetCampaigns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yM_APIClient) LoadApiOrders(ctx context.Context, in *YMApiDateRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.YM_API/LoadApiOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yM_APIClient) GetApiOrders(ctx context.Context, in *YMApiDateRequest, opts ...grpc.CallOption) (*YMApiOrders, error) {
	out := new(YMApiOrders)
	err := c.cc.Invoke(ctx, "/cerasusV3.YM_API/GetApiOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yM_APIClient) LoadApiSales(ctx context.Context, in *YMApiDateRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.YM_API/LoadApiSales", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yM_APIClient) GetApiSales(ctx context.Context, in *YMApiDateRequest, opts ...grpc.CallOption) (*YMApiSales, error) {
	out := new(YMApiSales)
	err := c.cc.Invoke(ctx, "/cerasusV3.YM_API/GetApiSales", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yM_APIClient) LoadApiProducts(ctx context.Context, in *YMParams, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.YM_API/LoadApiProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yM_APIClient) GetApiProducts(ctx context.Context, in *YMParams, opts ...grpc.CallOption) (*YMApiProducts, error) {
	out := new(YMApiProducts)
	err := c.cc.Invoke(ctx, "/cerasusV3.YM_API/GetApiProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YM_APIServer is the server API for YM_API service.
// All implementations must embed UnimplementedYM_APIServer
// for forward compatibility
type YM_APIServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	GetCampaigns(context.Context, *YMAuthData) (*YMParams, error)
	LoadApiOrders(context.Context, *YMApiDateRequest) (*StatusReply, error)
	GetApiOrders(context.Context, *YMApiDateRequest) (*YMApiOrders, error)
	LoadApiSales(context.Context, *YMApiDateRequest) (*StatusReply, error)
	GetApiSales(context.Context, *YMApiDateRequest) (*YMApiSales, error)
	LoadApiProducts(context.Context, *YMParams) (*StatusReply, error)
	GetApiProducts(context.Context, *YMParams) (*YMApiProducts, error)
	mustEmbedUnimplementedYM_APIServer()
}

// UnimplementedYM_APIServer must be embedded to have forward compatible implementations.
type UnimplementedYM_APIServer struct {
}

func (UnimplementedYM_APIServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedYM_APIServer) GetCampaigns(context.Context, *YMAuthData) (*YMParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaigns not implemented")
}
func (UnimplementedYM_APIServer) LoadApiOrders(context.Context, *YMApiDateRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadApiOrders not implemented")
}
func (UnimplementedYM_APIServer) GetApiOrders(context.Context, *YMApiDateRequest) (*YMApiOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiOrders not implemented")
}
func (UnimplementedYM_APIServer) LoadApiSales(context.Context, *YMApiDateRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadApiSales not implemented")
}
func (UnimplementedYM_APIServer) GetApiSales(context.Context, *YMApiDateRequest) (*YMApiSales, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiSales not implemented")
}
func (UnimplementedYM_APIServer) LoadApiProducts(context.Context, *YMParams) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadApiProducts not implemented")
}
func (UnimplementedYM_APIServer) GetApiProducts(context.Context, *YMParams) (*YMApiProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiProducts not implemented")
}
func (UnimplementedYM_APIServer) mustEmbedUnimplementedYM_APIServer() {}

// UnsafeYM_APIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YM_APIServer will
// result in compilation errors.
type UnsafeYM_APIServer interface {
	mustEmbedUnimplementedYM_APIServer()
}

func RegisterYM_APIServer(s grpc.ServiceRegistrar, srv YM_APIServer) {
	s.RegisterService(&YM_API_ServiceDesc, srv)
}

func _YM_API_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YM_APIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.YM_API/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YM_APIServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YM_API_GetCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YMAuthData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YM_APIServer).GetCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.YM_API/GetCampaigns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YM_APIServer).GetCampaigns(ctx, req.(*YMAuthData))
	}
	return interceptor(ctx, in, info, handler)
}

func _YM_API_LoadApiOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YMApiDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YM_APIServer).LoadApiOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.YM_API/LoadApiOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YM_APIServer).LoadApiOrders(ctx, req.(*YMApiDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YM_API_GetApiOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YMApiDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YM_APIServer).GetApiOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.YM_API/GetApiOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YM_APIServer).GetApiOrders(ctx, req.(*YMApiDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YM_API_LoadApiSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YMApiDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YM_APIServer).LoadApiSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.YM_API/LoadApiSales",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YM_APIServer).LoadApiSales(ctx, req.(*YMApiDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YM_API_GetApiSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YMApiDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YM_APIServer).GetApiSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.YM_API/GetApiSales",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YM_APIServer).GetApiSales(ctx, req.(*YMApiDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YM_API_LoadApiProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YMParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YM_APIServer).LoadApiProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.YM_API/LoadApiProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YM_APIServer).LoadApiProducts(ctx, req.(*YMParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _YM_API_GetApiProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YMParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YM_APIServer).GetApiProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.YM_API/GetApiProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YM_APIServer).GetApiProducts(ctx, req.(*YMParams))
	}
	return interceptor(ctx, in, info, handler)
}

// YM_API_ServiceDesc is the grpc.ServiceDesc for YM_API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YM_API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cerasusV3.YM_API",
	HandlerType: (*YM_APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _YM_API_Ping_Handler,
		},
		{
			MethodName: "GetCampaigns",
			Handler:    _YM_API_GetCampaigns_Handler,
		},
		{
			MethodName: "LoadApiOrders",
			Handler:    _YM_API_LoadApiOrders_Handler,
		},
		{
			MethodName: "GetApiOrders",
			Handler:    _YM_API_GetApiOrders_Handler,
		},
		{
			MethodName: "LoadApiSales",
			Handler:    _YM_API_LoadApiSales_Handler,
		},
		{
			MethodName: "GetApiSales",
			Handler:    _YM_API_GetApiSales_Handler,
		},
		{
			MethodName: "LoadApiProducts",
			Handler:    _YM_API_LoadApiProducts_Handler,
		},
		{
			MethodName: "GetApiProducts",
			Handler:    _YM_API_GetApiProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ym-apiV3.proto",
}
