// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: queuerV3.proto

package cerasus_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueuerClient is the client API for Queuer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueuerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	ReportQueueJob(ctx context.Context, in *QueuerJob, opts ...grpc.CallOption) (*StatusReply, error)
	RestartQueues(ctx context.Context, in *RestartQueuesRequest, opts ...grpc.CallOption) (*QueuerJobs, error)
	GetQueuesTypes(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*QueueTypes, error)
	GetQueuesTypeList(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*QueueTypeList, error)
	ResetQueues(ctx context.Context, in *RequestByIDS, opts ...grpc.CallOption) (*StatusReply, error)
}

type queuerClient struct {
	cc grpc.ClientConnInterface
}

func NewQueuerClient(cc grpc.ClientConnInterface) QueuerClient {
	return &queuerClient{cc}
}

func (c *queuerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Queuer/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuerClient) ReportQueueJob(ctx context.Context, in *QueuerJob, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Queuer/ReportQueueJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuerClient) RestartQueues(ctx context.Context, in *RestartQueuesRequest, opts ...grpc.CallOption) (*QueuerJobs, error) {
	out := new(QueuerJobs)
	err := c.cc.Invoke(ctx, "/cerasusV3.Queuer/RestartQueues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuerClient) GetQueuesTypes(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*QueueTypes, error) {
	out := new(QueueTypes)
	err := c.cc.Invoke(ctx, "/cerasusV3.Queuer/GetQueuesTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuerClient) GetQueuesTypeList(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*QueueTypeList, error) {
	out := new(QueueTypeList)
	err := c.cc.Invoke(ctx, "/cerasusV3.Queuer/GetQueuesTypeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuerClient) ResetQueues(ctx context.Context, in *RequestByIDS, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/cerasusV3.Queuer/ResetQueues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueuerServer is the server API for Queuer service.
// All implementations must embed UnimplementedQueuerServer
// for forward compatibility
type QueuerServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	ReportQueueJob(context.Context, *QueuerJob) (*StatusReply, error)
	RestartQueues(context.Context, *RestartQueuesRequest) (*QueuerJobs, error)
	GetQueuesTypes(context.Context, *Auth) (*QueueTypes, error)
	GetQueuesTypeList(context.Context, *RequestByID) (*QueueTypeList, error)
	ResetQueues(context.Context, *RequestByIDS) (*StatusReply, error)
	mustEmbedUnimplementedQueuerServer()
}

// UnimplementedQueuerServer must be embedded to have forward compatible implementations.
type UnimplementedQueuerServer struct {
}

func (UnimplementedQueuerServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedQueuerServer) ReportQueueJob(context.Context, *QueuerJob) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportQueueJob not implemented")
}
func (UnimplementedQueuerServer) RestartQueues(context.Context, *RestartQueuesRequest) (*QueuerJobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartQueues not implemented")
}
func (UnimplementedQueuerServer) GetQueuesTypes(context.Context, *Auth) (*QueueTypes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueuesTypes not implemented")
}
func (UnimplementedQueuerServer) GetQueuesTypeList(context.Context, *RequestByID) (*QueueTypeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueuesTypeList not implemented")
}
func (UnimplementedQueuerServer) ResetQueues(context.Context, *RequestByIDS) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetQueues not implemented")
}
func (UnimplementedQueuerServer) mustEmbedUnimplementedQueuerServer() {}

// UnsafeQueuerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueuerServer will
// result in compilation errors.
type UnsafeQueuerServer interface {
	mustEmbedUnimplementedQueuerServer()
}

func RegisterQueuerServer(s grpc.ServiceRegistrar, srv QueuerServer) {
	s.RegisterService(&Queuer_ServiceDesc, srv)
}

func _Queuer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Queuer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queuer_ReportQueueJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuerJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuerServer).ReportQueueJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Queuer/ReportQueueJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuerServer).ReportQueueJob(ctx, req.(*QueuerJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queuer_RestartQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartQueuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuerServer).RestartQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Queuer/RestartQueues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuerServer).RestartQueues(ctx, req.(*RestartQueuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queuer_GetQueuesTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuerServer).GetQueuesTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Queuer/GetQueuesTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuerServer).GetQueuesTypes(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queuer_GetQueuesTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuerServer).GetQueuesTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Queuer/GetQueuesTypeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuerServer).GetQueuesTypeList(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queuer_ResetQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByIDS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuerServer).ResetQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasusV3.Queuer/ResetQueues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuerServer).ResetQueues(ctx, req.(*RequestByIDS))
	}
	return interceptor(ctx, in, info, handler)
}

// Queuer_ServiceDesc is the grpc.ServiceDesc for Queuer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Queuer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cerasusV3.Queuer",
	HandlerType: (*QueuerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Queuer_Ping_Handler,
		},
		{
			MethodName: "ReportQueueJob",
			Handler:    _Queuer_ReportQueueJob_Handler,
		},
		{
			MethodName: "RestartQueues",
			Handler:    _Queuer_RestartQueues_Handler,
		},
		{
			MethodName: "GetQueuesTypes",
			Handler:    _Queuer_GetQueuesTypes_Handler,
		},
		{
			MethodName: "GetQueuesTypeList",
			Handler:    _Queuer_GetQueuesTypeList_Handler,
		},
		{
			MethodName: "ResetQueues",
			Handler:    _Queuer_ResetQueues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queuerV3.proto",
}
