syntax = "proto3";
import "cerasus.proto";

package cerasus;

option go_package = "github.com/ansanych/cerasus-proto";

service Brands {
    rpc Ping (PingRequest) returns (PingReply) {}
    rpc GetBrandData (Auth) returns (Brand) {}
    rpc GetBProducts (Auth) returns (BProducts) {}
    rpc GetBProduct (RequestByID) returns (BProduct) {}
    rpc CreateBProduct (BProductUpsert) returns (BProduct) {}
    rpc UpdateBProduct (BProductUpsert) returns (BoolReply) {}
    rpc DeleteBProduct (RequestByID) returns (BoolReply) {}
    rpc GetBFile(BFileRequest) returns (ImageReply) {}
    rpc UploadBFile(BUploadRequest) returns (ImageReply) {}
    rpc GetBPrices(RequestByID) returns (BPrices) {}
    rpc GetBPrice(RequestByID) returns (BPrice) {}
    rpc CreateBPrice(BPriceUpsert) returns (BPrice) {}
    rpc DeleteBPrice(RequestByID) returns (BoolReply) {}
    rpc CreateBSeller(BSellerUpsert) returns (BSeller) {}
    rpc GetBSellers(Auth) returns (BSellers) {}
    rpc GetBSeller(RequestByID) returns (BSeller) {}
    rpc UpdateBSeller(BSellerUpsert) returns (BoolReply) {}
    rpc DeleteBSeller(RequestByID) returns (BoolReply) {}
    rpc GetBSellerCompanies(BSellerCompanyRequest) returns (BSellerCompaniesData) {}
    rpc GetBSellerCompany(BSellerCompanyRequest) returns (BSellerCompanyData) {}
    rpc GetBSellerCompanyProducts(BSellerCompanyRequest) returns (BSellerCompanyProducts) {}
    rpc GetBSellerCompanyProduct(BSellerCompanyProductRequest) returns (BSellerCompanyProduct) {}
    rpc UpdateBSellerCompanyProduct(BSCPUpdateRequest) returns (BoolReply) {}
    rpc CreateBSellerNullProduct(CreateBSellerNullProductRequest) returns (IDRequest) {}
    rpc DeleteBSellerNullProduct(RequestByID) returns (BoolReply) {}
    rpc SetBSellerNullProductURL(NullUrlRequest) returns (BoolReply) {}
    rpc DeleteBSellerNullProductURL(RequestByID) returns (BoolReply) {}
    rpc GetAlerts(Auth) returns (Alerts) {}
    rpc GetDumpingItem(GetPricerItemRequest) returns (GetPricerItemReply) {}
    rpc SetDumpingItem(SetPricerItemRequest) returns (BoolReply) {}
    rpc GetProductsCount(Auth) returns (CountReply) {}
    rpc GetSellersCount(Auth) returns (CountReply) {}
    rpc GetDumpingList(DumpingListRequest) returns (DumpingList) {}
    rpc GetDumpingCount(Auth) returns (CountReply) {}
    rpc GetDumpingData(RequestByID) returns (DumpingData) {}
    rpc UpdateDumpingData(DumpingUpdate) returns (BoolReply) {}
}

message DumpingListRequest {
    Auth auth = 1;
    bool view = 2;
    int64 BSellerID = 3;
    int64 BProductID = 4;
    int64 page = 5;
}

message DumpingData {
    int64 ID = 1;
    BSeller b_seller = 2;
    BProduct b_product = 3;
    bool view = 4;
    string shopCode = 5;
    string url = 6;
    int64 productPrice = 7;
    int64 parsePrice = 8;
    string update = 9;
}

message DumpingList {
    repeated DumpingData list = 1;
    DumpingListRequest request = 2;
    Pagination pagination = 3;
}

message DumpingUpdate {
    Auth auth = 1;
    DumpingData data = 2;
}

message BProduct {
    int64 ID = 1;
    string title = 2;
    string article = 3;
    string comment = 4;
    string preview = 5;
    bool active = 6;
    string updated = 7;
}

message BProducts {
    repeated BProduct b_products = 1;
}

message BProductUpsert {
    Auth auth = 1;
    BProduct b_product = 2;
}

message BFileRequest {
    string filename = 1;
    int64 b_productID = 2;
}

message BUploadRequest {
    Auth auth = 1;
    int64 b_productID = 2;
    bytes chunk = 3;
    bool preview = 4;
    string filename = 5;
    string type = 6;
}

message BPrice {
    int64 ID = 1;
    int64 b_productID = 2;
    int64 value = 3;
    string created = 4;
}

message BPrices {
    repeated BPrice b_prices = 1;
}

message BPriceUpsert {
    Auth auth = 1;
    BPrice b_price = 2;
}

message BSeller {
    int64 ID = 1;
    string name = 2;
    string comment = 3;
    string person = 4;
    string phone = 5;
    string email = 6;
}

message BSellerUpsert {
    Auth auth = 1;
    BSeller b_seller = 2;
}

message BSellers {
    repeated BSeller b_sellers = 1;
}

message BSellerCompanyRequest {
    Auth auth = 1;
    int64 b_sellerID = 2;
    int64 companyID = 3;
}

message BSellerCompanyData {
    int64 ID = 1;
    Company company = 2;
}

message BSellerCompaniesData {
    repeated BSellerCompanyData data = 1;
}

message BSellerCompanyProductRequest {
    Auth auth = 1;
    int64 b_sellerID = 2;
    int64 companyID = 3;
    int64 ID = 4;
}

message CompanyProductShopUrlAlert {
    int64 ID = 1;
    BSeller seller = 2;
    BSellerCompanyData sellerCompany = 3;
    BSellerCompanyProduct sellerCompanyProduct = 4;
    string alert = 5;
    string created = 6;
}

message CompanyProductShopUrl {
    int64 ID = 1;
    string url = 2;
    CompanyProductShopUrlAlert alert = 3;
}

message CompanyProductShopUrls {
    string shop = 1;
    repeated CompanyProductShopUrl urls = 2;
}

message BSellerCompanyProduct {
    int64 ID = 1;
    Product product = 2;
    BProduct b_product = 3;
    repeated CompanyProductShopUrls urls = 4;
}

message BSellerCompanyProducts {
    repeated BSellerCompanyProduct seller_company_products = 1;
}

message BSCPUpdateRequest {
    Auth auth = 1;
    string do = 2;
    int64 ID = 3;
    int64 sellerID = 4;
    int64 companyID = 5;
    Product product = 6;
    BProduct b_product = 7;
}

message CreateBSellerNullProductRequest {
    Auth auth = 1;
    int64 BsellerID = 2;
    int64 BProductID = 3;
}

message NullUrlRequest {
    Auth auth = 1;
    int64 nullProductID = 2;
    string shopCode = 3;
    string url = 4;
}

message Alert {
    string type = 1;
    int64 ID = 2;
    int64 sellerID = 3;
    int64 sellerCompanyID = 4;
    int64 sellerCompanyProductID = 5;
    string message = 6;
}

message Alerts {
    repeated Alert alerts = 1;
}