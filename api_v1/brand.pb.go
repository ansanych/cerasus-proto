// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: brand.proto

package cerasus_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DumpingRaitingRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sort     int32   `protobuf:"varint,1,opt,name=sort,proto3" json:"sort,omitempty"`
	Seller   string  `protobuf:"bytes,2,opt,name=seller,proto3" json:"seller,omitempty"`
	Ratio    float32 `protobuf:"fixed32,3,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Products int32   `protobuf:"varint,4,opt,name=products,proto3" json:"products,omitempty"`
	Orders   int32   `protobuf:"varint,5,opt,name=orders,proto3" json:"orders,omitempty"`
	Sum      int64   `protobuf:"varint,6,opt,name=sum,proto3" json:"sum,omitempty"`
	Pricer   bool    `protobuf:"varint,7,opt,name=pricer,proto3" json:"pricer,omitempty"`
}

func (x *DumpingRaitingRow) Reset() {
	*x = DumpingRaitingRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingRaitingRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingRaitingRow) ProtoMessage() {}

func (x *DumpingRaitingRow) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingRaitingRow.ProtoReflect.Descriptor instead.
func (*DumpingRaitingRow) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{0}
}

func (x *DumpingRaitingRow) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *DumpingRaitingRow) GetSeller() string {
	if x != nil {
		return x.Seller
	}
	return ""
}

func (x *DumpingRaitingRow) GetRatio() float32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *DumpingRaitingRow) GetProducts() int32 {
	if x != nil {
		return x.Products
	}
	return 0
}

func (x *DumpingRaitingRow) GetOrders() int32 {
	if x != nil {
		return x.Orders
	}
	return 0
}

func (x *DumpingRaitingRow) GetSum() int64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *DumpingRaitingRow) GetPricer() bool {
	if x != nil {
		return x.Pricer
	}
	return false
}

type DumpingRaiting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DumpingRaitingRow `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DumpingRaiting) Reset() {
	*x = DumpingRaiting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingRaiting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingRaiting) ProtoMessage() {}

func (x *DumpingRaiting) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingRaiting.ProtoReflect.Descriptor instead.
func (*DumpingRaiting) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{1}
}

func (x *DumpingRaiting) GetData() []*DumpingRaitingRow {
	if x != nil {
		return x.Data
	}
	return nil
}

type DumpingDayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Date      string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Viewed    bool   `protobuf:"varint,3,opt,name=viewed,proto3" json:"viewed,omitempty"`
	Noviewed  bool   `protobuf:"varint,4,opt,name=noviewed,proto3" json:"noviewed,omitempty"`
	Noproduct bool   `protobuf:"varint,5,opt,name=noproduct,proto3" json:"noproduct,omitempty"`
}

func (x *DumpingDayRequest) Reset() {
	*x = DumpingDayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingDayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingDayRequest) ProtoMessage() {}

func (x *DumpingDayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingDayRequest.ProtoReflect.Descriptor instead.
func (*DumpingDayRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{2}
}

func (x *DumpingDayRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *DumpingDayRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DumpingDayRequest) GetViewed() bool {
	if x != nil {
		return x.Viewed
	}
	return false
}

func (x *DumpingDayRequest) GetNoviewed() bool {
	if x != nil {
		return x.Noviewed
	}
	return false
}

func (x *DumpingDayRequest) GetNoproduct() bool {
	if x != nil {
		return x.Noproduct
	}
	return false
}

type DumpingDayReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DumpingData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DumpingDayReply) Reset() {
	*x = DumpingDayReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingDayReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingDayReply) ProtoMessage() {}

func (x *DumpingDayReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingDayReply.ProtoReflect.Descriptor instead.
func (*DumpingDayReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{3}
}

func (x *DumpingDayReply) GetData() []*DumpingData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DumpingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           int64     `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BSeller      *BSeller  `protobuf:"bytes,2,opt,name=b_seller,json=bSeller,proto3" json:"b_seller,omitempty"`
	BProduct     *BProduct `protobuf:"bytes,3,opt,name=b_product,json=bProduct,proto3" json:"b_product,omitempty"`
	View         bool      `protobuf:"varint,4,opt,name=view,proto3" json:"view,omitempty"`
	ShopCode     string    `protobuf:"bytes,5,opt,name=shopCode,proto3" json:"shopCode,omitempty"`
	Url          string    `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	ProductPrice int64     `protobuf:"varint,7,opt,name=productPrice,proto3" json:"productPrice,omitempty"`
	ParsePrice   int64     `protobuf:"varint,8,opt,name=parsePrice,proto3" json:"parsePrice,omitempty"`
	Update       string    `protobuf:"bytes,9,opt,name=update,proto3" json:"update,omitempty"`
	Company      *Company  `protobuf:"bytes,10,opt,name=company,proto3" json:"company,omitempty"`
	DumpingType  string    `protobuf:"bytes,11,opt,name=dumpingType,proto3" json:"dumpingType,omitempty"`
	TargetMin    int64     `protobuf:"varint,12,opt,name=targetMin,proto3" json:"targetMin,omitempty"`
	TargetMax    int64     `protobuf:"varint,13,opt,name=targetMax,proto3" json:"targetMax,omitempty"`
	ScreenShot   string    `protobuf:"bytes,14,opt,name=screenShot,proto3" json:"screenShot,omitempty"`
	CheckedMatch bool      `protobuf:"varint,15,opt,name=checkedMatch,proto3" json:"checkedMatch,omitempty"`
}

func (x *DumpingData) Reset() {
	*x = DumpingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingData) ProtoMessage() {}

func (x *DumpingData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingData.ProtoReflect.Descriptor instead.
func (*DumpingData) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{4}
}

func (x *DumpingData) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DumpingData) GetBSeller() *BSeller {
	if x != nil {
		return x.BSeller
	}
	return nil
}

func (x *DumpingData) GetBProduct() *BProduct {
	if x != nil {
		return x.BProduct
	}
	return nil
}

func (x *DumpingData) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

func (x *DumpingData) GetShopCode() string {
	if x != nil {
		return x.ShopCode
	}
	return ""
}

func (x *DumpingData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DumpingData) GetProductPrice() int64 {
	if x != nil {
		return x.ProductPrice
	}
	return 0
}

func (x *DumpingData) GetParsePrice() int64 {
	if x != nil {
		return x.ParsePrice
	}
	return 0
}

func (x *DumpingData) GetUpdate() string {
	if x != nil {
		return x.Update
	}
	return ""
}

func (x *DumpingData) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *DumpingData) GetDumpingType() string {
	if x != nil {
		return x.DumpingType
	}
	return ""
}

func (x *DumpingData) GetTargetMin() int64 {
	if x != nil {
		return x.TargetMin
	}
	return 0
}

func (x *DumpingData) GetTargetMax() int64 {
	if x != nil {
		return x.TargetMax
	}
	return 0
}

func (x *DumpingData) GetScreenShot() string {
	if x != nil {
		return x.ScreenShot
	}
	return ""
}

func (x *DumpingData) GetCheckedMatch() bool {
	if x != nil {
		return x.CheckedMatch
	}
	return false
}

type DumpingCalenderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DumpingCalenderData) Reset() {
	*x = DumpingCalenderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingCalenderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingCalenderData) ProtoMessage() {}

func (x *DumpingCalenderData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingCalenderData.ProtoReflect.Descriptor instead.
func (*DumpingCalenderData) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{5}
}

func (x *DumpingCalenderData) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *DumpingCalenderData) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DumpingCalenderDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date string                 `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Data []*DumpingCalenderData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DumpingCalenderDate) Reset() {
	*x = DumpingCalenderDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingCalenderDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingCalenderDate) ProtoMessage() {}

func (x *DumpingCalenderDate) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingCalenderDate.ProtoReflect.Descriptor instead.
func (*DumpingCalenderDate) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{6}
}

func (x *DumpingCalenderDate) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DumpingCalenderDate) GetData() []*DumpingCalenderData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DumpingCalenderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DumpingCalenderDate `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DumpingCalenderRequest) Reset() {
	*x = DumpingCalenderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingCalenderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingCalenderRequest) ProtoMessage() {}

func (x *DumpingCalenderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingCalenderRequest.ProtoReflect.Descriptor instead.
func (*DumpingCalenderRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{7}
}

func (x *DumpingCalenderRequest) GetData() []*DumpingCalenderDate {
	if x != nil {
		return x.Data
	}
	return nil
}

type SALineGraphData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label  string    `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Code   string    `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Points []float32 `protobuf:"fixed32,3,rep,packed,name=points,proto3" json:"points,omitempty"`
	Middle []float32 `protobuf:"fixed32,4,rep,packed,name=middle,proto3" json:"middle,omitempty"`
	Min    float32   `protobuf:"fixed32,5,opt,name=min,proto3" json:"min,omitempty"`
	Max    float32   `protobuf:"fixed32,6,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *SALineGraphData) Reset() {
	*x = SALineGraphData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SALineGraphData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SALineGraphData) ProtoMessage() {}

func (x *SALineGraphData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SALineGraphData.ProtoReflect.Descriptor instead.
func (*SALineGraphData) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{8}
}

func (x *SALineGraphData) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SALineGraphData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SALineGraphData) GetPoints() []float32 {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *SALineGraphData) GetMiddle() []float32 {
	if x != nil {
		return x.Middle
	}
	return nil
}

func (x *SALineGraphData) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *SALineGraphData) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type SALineGraphReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []string         `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	Data   *SALineGraphData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SALineGraphReply) Reset() {
	*x = SALineGraphReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SALineGraphReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SALineGraphReply) ProtoMessage() {}

func (x *SALineGraphReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SALineGraphReply.ProtoReflect.Descriptor instead.
func (*SALineGraphReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{9}
}

func (x *SALineGraphReply) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SALineGraphReply) GetData() *SALineGraphData {
	if x != nil {
		return x.Data
	}
	return nil
}

type SARoundByProductsDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label           string    `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Data            []float32 `protobuf:"fixed32,2,rep,packed,name=data,proto3" json:"data,omitempty"`
	BackgroundColor []string  `protobuf:"bytes,3,rep,name=backgroundColor,proto3" json:"backgroundColor,omitempty"`
	BorderColor     []string  `protobuf:"bytes,4,rep,name=borderColor,proto3" json:"borderColor,omitempty"`
	BorderWidth     int32     `protobuf:"varint,5,opt,name=borderWidth,proto3" json:"borderWidth,omitempty"`
}

func (x *SARoundByProductsDataset) Reset() {
	*x = SARoundByProductsDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SARoundByProductsDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SARoundByProductsDataset) ProtoMessage() {}

func (x *SARoundByProductsDataset) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SARoundByProductsDataset.ProtoReflect.Descriptor instead.
func (*SARoundByProductsDataset) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{10}
}

func (x *SARoundByProductsDataset) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SARoundByProductsDataset) GetData() []float32 {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SARoundByProductsDataset) GetBackgroundColor() []string {
	if x != nil {
		return x.BackgroundColor
	}
	return nil
}

func (x *SARoundByProductsDataset) GetBorderColor() []string {
	if x != nil {
		return x.BorderColor
	}
	return nil
}

func (x *SARoundByProductsDataset) GetBorderWidth() int32 {
	if x != nil {
		return x.BorderWidth
	}
	return 0
}

type SARoundByProductsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels   []string                    `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	Datasets []*SARoundByProductsDataset `protobuf:"bytes,2,rep,name=datasets,proto3" json:"datasets,omitempty"`
}

func (x *SARoundByProductsReply) Reset() {
	*x = SARoundByProductsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SARoundByProductsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SARoundByProductsReply) ProtoMessage() {}

func (x *SARoundByProductsReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SARoundByProductsReply.ProtoReflect.Descriptor instead.
func (*SARoundByProductsReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{11}
}

func (x *SARoundByProductsReply) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SARoundByProductsReply) GetDatasets() []*SARoundByProductsDataset {
	if x != nil {
		return x.Datasets
	}
	return nil
}

type SATableByProductsRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sort    int32   `protobuf:"varint,1,opt,name=sort,proto3" json:"sort,omitempty"`
	Title   string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Count   int32   `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Sum     float32 `protobuf:"fixed32,4,opt,name=sum,proto3" json:"sum,omitempty"`
	Percent float32 `protobuf:"fixed32,5,opt,name=percent,proto3" json:"percent,omitempty"`
}

func (x *SATableByProductsRow) Reset() {
	*x = SATableByProductsRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SATableByProductsRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SATableByProductsRow) ProtoMessage() {}

func (x *SATableByProductsRow) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SATableByProductsRow.ProtoReflect.Descriptor instead.
func (*SATableByProductsRow) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{12}
}

func (x *SATableByProductsRow) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SATableByProductsRow) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SATableByProductsRow) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SATableByProductsRow) GetSum() float32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *SATableByProductsRow) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type SATableByProductsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   int32   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Sum     float32 `protobuf:"fixed32,2,opt,name=sum,proto3" json:"sum,omitempty"`
	Percent float32 `protobuf:"fixed32,3,opt,name=percent,proto3" json:"percent,omitempty"`
}

func (x *SATableByProductsResult) Reset() {
	*x = SATableByProductsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SATableByProductsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SATableByProductsResult) ProtoMessage() {}

func (x *SATableByProductsResult) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SATableByProductsResult.ProtoReflect.Descriptor instead.
func (*SATableByProductsResult) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{13}
}

func (x *SATableByProductsResult) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SATableByProductsResult) GetSum() float32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *SATableByProductsResult) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type SATableByProductsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *SATableByProductsResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Rows   []*SATableByProductsRow  `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *SATableByProductsReply) Reset() {
	*x = SATableByProductsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SATableByProductsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SATableByProductsReply) ProtoMessage() {}

func (x *SATableByProductsReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SATableByProductsReply.ProtoReflect.Descriptor instead.
func (*SATableByProductsReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{14}
}

func (x *SATableByProductsReply) GetResult() *SATableByProductsResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SATableByProductsReply) GetRows() []*SATableByProductsRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

type SARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *Auth   `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	From    string  `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To      string  `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Period  string  `protobuf:"bytes,4,opt,name=period,proto3" json:"period,omitempty"`
	Sellers []int64 `protobuf:"varint,5,rep,packed,name=sellers,proto3" json:"sellers,omitempty"`
}

func (x *SARequest) Reset() {
	*x = SARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SARequest) ProtoMessage() {}

func (x *SARequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SARequest.ProtoReflect.Descriptor instead.
func (*SARequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{15}
}

func (x *SARequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SARequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SARequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SARequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *SARequest) GetSellers() []int64 {
	if x != nil {
		return x.Sellers
	}
	return nil
}

type PARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *Auth   `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	From     string  `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To       string  `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Period   string  `protobuf:"bytes,4,opt,name=period,proto3" json:"period,omitempty"`
	Products []int64 `protobuf:"varint,5,rep,packed,name=products,proto3" json:"products,omitempty"`
}

func (x *PARequest) Reset() {
	*x = PARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PARequest) ProtoMessage() {}

func (x *PARequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PARequest.ProtoReflect.Descriptor instead.
func (*PARequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{16}
}

func (x *PARequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *PARequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *PARequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *PARequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *PARequest) GetProducts() []int64 {
	if x != nil {
		return x.Products
	}
	return nil
}

type SAListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To   string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *SAListRequest) Reset() {
	*x = SAListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAListRequest) ProtoMessage() {}

func (x *SAListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAListRequest.ProtoReflect.Descriptor instead.
func (*SAListRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{17}
}

func (x *SAListRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SAListRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SAListRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type SAListItemVolumes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	Percent float32 `protobuf:"fixed32,2,opt,name=percent,proto3" json:"percent,omitempty"`
}

func (x *SAListItemVolumes) Reset() {
	*x = SAListItemVolumes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAListItemVolumes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAListItemVolumes) ProtoMessage() {}

func (x *SAListItemVolumes) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAListItemVolumes.ProtoReflect.Descriptor instead.
func (*SAListItemVolumes) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{18}
}

func (x *SAListItemVolumes) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SAListItemVolumes) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type SAListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BSeller     *BSeller           `protobuf:"bytes,1,opt,name=b_seller,json=bSeller,proto3" json:"b_seller,omitempty"`
	Sort        int32              `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"`
	SalesVolume *SAListItemVolumes `protobuf:"bytes,3,opt,name=salesVolume,proto3" json:"salesVolume,omitempty"`
}

func (x *SAListItem) Reset() {
	*x = SAListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAListItem) ProtoMessage() {}

func (x *SAListItem) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAListItem.ProtoReflect.Descriptor instead.
func (*SAListItem) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{19}
}

func (x *SAListItem) GetBSeller() *BSeller {
	if x != nil {
		return x.BSeller
	}
	return nil
}

func (x *SAListItem) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SAListItem) GetSalesVolume() *SAListItemVolumes {
	if x != nil {
		return x.SalesVolume
	}
	return nil
}

type SAListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*SAListItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SAListReply) Reset() {
	*x = SAListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAListReply) ProtoMessage() {}

func (x *SAListReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAListReply.ProtoReflect.Descriptor instead.
func (*SAListReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{20}
}

func (x *SAListReply) GetData() []*SAListItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type PAListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BProduct    *BProduct          `protobuf:"bytes,1,opt,name=b_product,json=bProduct,proto3" json:"b_product,omitempty"`
	Sort        int32              `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"`
	SalesVolume *SAListItemVolumes `protobuf:"bytes,3,opt,name=salesVolume,proto3" json:"salesVolume,omitempty"`
}

func (x *PAListItem) Reset() {
	*x = PAListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PAListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PAListItem) ProtoMessage() {}

func (x *PAListItem) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PAListItem.ProtoReflect.Descriptor instead.
func (*PAListItem) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{21}
}

func (x *PAListItem) GetBProduct() *BProduct {
	if x != nil {
		return x.BProduct
	}
	return nil
}

func (x *PAListItem) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *PAListItem) GetSalesVolume() *SAListItemVolumes {
	if x != nil {
		return x.SalesVolume
	}
	return nil
}

type PAListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PAListItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PAListReply) Reset() {
	*x = PAListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PAListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PAListReply) ProtoMessage() {}

func (x *PAListReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PAListReply.ProtoReflect.Descriptor instead.
func (*PAListReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{22}
}

func (x *PAListReply) GetData() []*PAListItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type MonitorDumpingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *MonitorDumpingRequest) Reset() {
	*x = MonitorDumpingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorDumpingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorDumpingRequest) ProtoMessage() {}

func (x *MonitorDumpingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorDumpingRequest.ProtoReflect.Descriptor instead.
func (*MonitorDumpingRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{23}
}

func (x *MonitorDumpingRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type MonitorDumping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sort  int64   `protobuf:"varint,1,opt,name=sort,proto3" json:"sort,omitempty"`
	Name  string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Index float32 `protobuf:"fixed32,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *MonitorDumping) Reset() {
	*x = MonitorDumping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorDumping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorDumping) ProtoMessage() {}

func (x *MonitorDumping) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorDumping.ProtoReflect.Descriptor instead.
func (*MonitorDumping) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{24}
}

func (x *MonitorDumping) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *MonitorDumping) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MonitorDumping) GetIndex() float32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type MonitorDumpingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*MonitorDumping `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MonitorDumpingReply) Reset() {
	*x = MonitorDumpingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorDumpingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorDumpingReply) ProtoMessage() {}

func (x *MonitorDumpingReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorDumpingReply.ProtoReflect.Descriptor instead.
func (*MonitorDumpingReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{25}
}

func (x *MonitorDumpingReply) GetData() []*MonitorDumping {
	if x != nil {
		return x.Data
	}
	return nil
}

type MonitorRadarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *MonitorRadarRequest) Reset() {
	*x = MonitorRadarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorRadarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorRadarRequest) ProtoMessage() {}

func (x *MonitorRadarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorRadarRequest.ProtoReflect.Descriptor instead.
func (*MonitorRadarRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{26}
}

func (x *MonitorRadarRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type RadarData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RadarData) Reset() {
	*x = RadarData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadarData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarData) ProtoMessage() {}

func (x *RadarData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarData.ProtoReflect.Descriptor instead.
func (*RadarData) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{27}
}

func (x *RadarData) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *RadarData) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MonitorRadarReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count []*RadarData `protobuf:"bytes,1,rep,name=count,proto3" json:"count,omitempty"`
	Sum   []*RadarData `protobuf:"bytes,2,rep,name=sum,proto3" json:"sum,omitempty"`
}

func (x *MonitorRadarReply) Reset() {
	*x = MonitorRadarReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorRadarReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorRadarReply) ProtoMessage() {}

func (x *MonitorRadarReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorRadarReply.ProtoReflect.Descriptor instead.
func (*MonitorRadarReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{28}
}

func (x *MonitorRadarReply) GetCount() []*RadarData {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *MonitorRadarReply) GetSum() []*RadarData {
	if x != nil {
		return x.Sum
	}
	return nil
}

type MonitorSalesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *MonitorSalesRequest) Reset() {
	*x = MonitorSalesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorSalesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorSalesRequest) ProtoMessage() {}

func (x *MonitorSalesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorSalesRequest.ProtoReflect.Descriptor instead.
func (*MonitorSalesRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{29}
}

func (x *MonitorSalesRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type MonitorSalesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	Count  []int64  `protobuf:"varint,2,rep,packed,name=count,proto3" json:"count,omitempty"`
	Sum    []int64  `protobuf:"varint,3,rep,packed,name=sum,proto3" json:"sum,omitempty"`
}

func (x *MonitorSalesReply) Reset() {
	*x = MonitorSalesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorSalesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorSalesReply) ProtoMessage() {}

func (x *MonitorSalesReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorSalesReply.ProtoReflect.Descriptor instead.
func (*MonitorSalesReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{30}
}

func (x *MonitorSalesReply) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MonitorSalesReply) GetCount() []int64 {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *MonitorSalesReply) GetSum() []int64 {
	if x != nil {
		return x.Sum
	}
	return nil
}

type MonitorMonthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Date string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *MonitorMonthRequest) Reset() {
	*x = MonitorMonthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorMonthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorMonthRequest) ProtoMessage() {}

func (x *MonitorMonthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorMonthRequest.ProtoReflect.Descriptor instead.
func (*MonitorMonthRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{31}
}

func (x *MonitorMonthRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *MonitorMonthRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type MonitorMonthData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month string `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
	Sort  int64  `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"`
	Count int64  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Sum   int64  `protobuf:"varint,4,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (x *MonitorMonthData) Reset() {
	*x = MonitorMonthData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorMonthData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorMonthData) ProtoMessage() {}

func (x *MonitorMonthData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorMonthData.ProtoReflect.Descriptor instead.
func (*MonitorMonthData) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{32}
}

func (x *MonitorMonthData) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *MonitorMonthData) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *MonitorMonthData) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MonitorMonthData) GetSum() int64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

type MonitorMonthReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*MonitorMonthData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Date string              `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *MonitorMonthReply) Reset() {
	*x = MonitorMonthReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorMonthReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorMonthReply) ProtoMessage() {}

func (x *MonitorMonthReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorMonthReply.ProtoReflect.Descriptor instead.
func (*MonitorMonthReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{33}
}

func (x *MonitorMonthReply) GetData() []*MonitorMonthData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MonitorMonthReply) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type MonitorStringRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *MonitorStringRequest) Reset() {
	*x = MonitorStringRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorStringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorStringRequest) ProtoMessage() {}

func (x *MonitorStringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorStringRequest.ProtoReflect.Descriptor instead.
func (*MonitorStringRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{34}
}

func (x *MonitorStringRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type MonitorStringData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datetime string `protobuf:"bytes,1,opt,name=datetime,proto3" json:"datetime,omitempty"`
	Seller   string `protobuf:"bytes,2,opt,name=seller,proto3" json:"seller,omitempty"`
	Product  string `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	Sum      int64  `protobuf:"varint,4,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (x *MonitorStringData) Reset() {
	*x = MonitorStringData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorStringData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorStringData) ProtoMessage() {}

func (x *MonitorStringData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorStringData.ProtoReflect.Descriptor instead.
func (*MonitorStringData) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{35}
}

func (x *MonitorStringData) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *MonitorStringData) GetSeller() string {
	if x != nil {
		return x.Seller
	}
	return ""
}

func (x *MonitorStringData) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *MonitorStringData) GetSum() int64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

type MonitorStringReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*MonitorStringData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MonitorStringReply) Reset() {
	*x = MonitorStringReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorStringReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorStringReply) ProtoMessage() {}

func (x *MonitorStringReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorStringReply.ProtoReflect.Descriptor instead.
func (*MonitorStringReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{36}
}

func (x *MonitorStringReply) GetData() []*MonitorStringData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MonitorLeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *MonitorLeaderRequest) Reset() {
	*x = MonitorLeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorLeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorLeaderRequest) ProtoMessage() {}

func (x *MonitorLeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorLeaderRequest.ProtoReflect.Descriptor instead.
func (*MonitorLeaderRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{37}
}

func (x *MonitorLeaderRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type MonitorLeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64     `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Sort    int64     `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"`
	Product *BProduct `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	Count   int64     `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Sum     int64     `protobuf:"varint,5,opt,name=sum,proto3" json:"sum,omitempty"`
	Index   int64     `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *MonitorLeader) Reset() {
	*x = MonitorLeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorLeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorLeader) ProtoMessage() {}

func (x *MonitorLeader) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorLeader.ProtoReflect.Descriptor instead.
func (*MonitorLeader) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{38}
}

func (x *MonitorLeader) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MonitorLeader) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *MonitorLeader) GetProduct() *BProduct {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *MonitorLeader) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MonitorLeader) GetSum() int64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *MonitorLeader) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type MonitorLeaderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*MonitorLeader `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MonitorLeaderReply) Reset() {
	*x = MonitorLeaderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorLeaderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorLeaderReply) ProtoMessage() {}

func (x *MonitorLeaderReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorLeaderReply.ProtoReflect.Descriptor instead.
func (*MonitorLeaderReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{39}
}

func (x *MonitorLeaderReply) GetData() []*MonitorLeader {
	if x != nil {
		return x.Data
	}
	return nil
}

type SalesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *SalesCountRequest) Reset() {
	*x = SalesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesCountRequest) ProtoMessage() {}

func (x *SalesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesCountRequest.ProtoReflect.Descriptor instead.
func (*SalesCountRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{40}
}

func (x *SalesCountRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SalesCountRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type SalesCountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	From  string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *SalesCountReply) Reset() {
	*x = SalesCountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesCountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesCountReply) ProtoMessage() {}

func (x *SalesCountReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesCountReply.ProtoReflect.Descriptor instead.
func (*SalesCountReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{41}
}

func (x *SalesCountReply) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SalesCountReply) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type DumpingCountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForCompanies  int64 `protobuf:"varint,1,opt,name=forCompanies,proto3" json:"forCompanies,omitempty"`
	NullCompanies int64 `protobuf:"varint,2,opt,name=nullCompanies,proto3" json:"nullCompanies,omitempty"`
}

func (x *DumpingCountReply) Reset() {
	*x = DumpingCountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingCountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingCountReply) ProtoMessage() {}

func (x *DumpingCountReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingCountReply.ProtoReflect.Descriptor instead.
func (*DumpingCountReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{42}
}

func (x *DumpingCountReply) GetForCompanies() int64 {
	if x != nil {
		return x.ForCompanies
	}
	return 0
}

func (x *DumpingCountReply) GetNullCompanies() int64 {
	if x != nil {
		return x.NullCompanies
	}
	return 0
}

type DumpingListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth        *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	View        bool   `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	BSellerID   int64  `protobuf:"varint,3,opt,name=BSellerID,proto3" json:"BSellerID,omitempty"`
	BProductID  int64  `protobuf:"varint,4,opt,name=BProductID,proto3" json:"BProductID,omitempty"`
	Page        int64  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	DumpingType string `protobuf:"bytes,6,opt,name=dumpingType,proto3" json:"dumpingType,omitempty"`
}

func (x *DumpingListRequest) Reset() {
	*x = DumpingListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingListRequest) ProtoMessage() {}

func (x *DumpingListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingListRequest.ProtoReflect.Descriptor instead.
func (*DumpingListRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{43}
}

func (x *DumpingListRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *DumpingListRequest) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

func (x *DumpingListRequest) GetBSellerID() int64 {
	if x != nil {
		return x.BSellerID
	}
	return 0
}

func (x *DumpingListRequest) GetBProductID() int64 {
	if x != nil {
		return x.BProductID
	}
	return 0
}

func (x *DumpingListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DumpingListRequest) GetDumpingType() string {
	if x != nil {
		return x.DumpingType
	}
	return ""
}

type DumpingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*DumpingData      `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Request    *DumpingListRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Pagination *Pagination         `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *DumpingList) Reset() {
	*x = DumpingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingList) ProtoMessage() {}

func (x *DumpingList) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingList.ProtoReflect.Descriptor instead.
func (*DumpingList) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{44}
}

func (x *DumpingList) GetList() []*DumpingData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *DumpingList) GetRequest() *DumpingListRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *DumpingList) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DumpingUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *Auth        `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Data *DumpingData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DumpingUpdate) Reset() {
	*x = DumpingUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingUpdate) ProtoMessage() {}

func (x *DumpingUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingUpdate.ProtoReflect.Descriptor instead.
func (*DumpingUpdate) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{45}
}

func (x *DumpingUpdate) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *DumpingUpdate) GetData() *DumpingData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Article string `protobuf:"bytes,3,opt,name=article,proto3" json:"article,omitempty"`
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	Preview string `protobuf:"bytes,5,opt,name=preview,proto3" json:"preview,omitempty"`
	Active  bool   `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	Updated string `protobuf:"bytes,7,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *BProduct) Reset() {
	*x = BProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BProduct) ProtoMessage() {}

func (x *BProduct) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BProduct.ProtoReflect.Descriptor instead.
func (*BProduct) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{46}
}

func (x *BProduct) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BProduct) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BProduct) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *BProduct) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BProduct) GetPreview() string {
	if x != nil {
		return x.Preview
	}
	return ""
}

func (x *BProduct) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *BProduct) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

type BProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BProducts []*BProduct `protobuf:"bytes,1,rep,name=b_products,json=bProducts,proto3" json:"b_products,omitempty"`
}

func (x *BProducts) Reset() {
	*x = BProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BProducts) ProtoMessage() {}

func (x *BProducts) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BProducts.ProtoReflect.Descriptor instead.
func (*BProducts) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{47}
}

func (x *BProducts) GetBProducts() []*BProduct {
	if x != nil {
		return x.BProducts
	}
	return nil
}

type BProductUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *Auth     `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	BProduct *BProduct `protobuf:"bytes,2,opt,name=b_product,json=bProduct,proto3" json:"b_product,omitempty"`
}

func (x *BProductUpsert) Reset() {
	*x = BProductUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BProductUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BProductUpsert) ProtoMessage() {}

func (x *BProductUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BProductUpsert.ProtoReflect.Descriptor instead.
func (*BProductUpsert) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{48}
}

func (x *BProductUpsert) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BProductUpsert) GetBProduct() *BProduct {
	if x != nil {
		return x.BProduct
	}
	return nil
}

type BFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename   string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	BProductID int64  `protobuf:"varint,2,opt,name=b_productID,json=bProductID,proto3" json:"b_productID,omitempty"`
	Type       string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *BFileRequest) Reset() {
	*x = BFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BFileRequest) ProtoMessage() {}

func (x *BFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BFileRequest.ProtoReflect.Descriptor instead.
func (*BFileRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{49}
}

func (x *BFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *BFileRequest) GetBProductID() int64 {
	if x != nil {
		return x.BProductID
	}
	return 0
}

func (x *BFileRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type BUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth       *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	BProductID int64  `protobuf:"varint,2,opt,name=b_productID,json=bProductID,proto3" json:"b_productID,omitempty"`
	Chunk      []byte `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Preview    bool   `protobuf:"varint,4,opt,name=preview,proto3" json:"preview,omitempty"`
	Filename   string `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename,omitempty"`
	Type       string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *BUploadRequest) Reset() {
	*x = BUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BUploadRequest) ProtoMessage() {}

func (x *BUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BUploadRequest.ProtoReflect.Descriptor instead.
func (*BUploadRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{50}
}

func (x *BUploadRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BUploadRequest) GetBProductID() int64 {
	if x != nil {
		return x.BProductID
	}
	return 0
}

func (x *BUploadRequest) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *BUploadRequest) GetPreview() bool {
	if x != nil {
		return x.Preview
	}
	return false
}

func (x *BUploadRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *BUploadRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type BPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BProductID int64  `protobuf:"varint,2,opt,name=b_productID,json=bProductID,proto3" json:"b_productID,omitempty"`
	Value      int64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Created    string `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *BPrice) Reset() {
	*x = BPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPrice) ProtoMessage() {}

func (x *BPrice) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPrice.ProtoReflect.Descriptor instead.
func (*BPrice) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{51}
}

func (x *BPrice) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BPrice) GetBProductID() int64 {
	if x != nil {
		return x.BProductID
	}
	return 0
}

func (x *BPrice) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BPrice) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

type BPrices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BPrices []*BPrice `protobuf:"bytes,1,rep,name=b_prices,json=bPrices,proto3" json:"b_prices,omitempty"`
}

func (x *BPrices) Reset() {
	*x = BPrices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPrices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPrices) ProtoMessage() {}

func (x *BPrices) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPrices.ProtoReflect.Descriptor instead.
func (*BPrices) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{52}
}

func (x *BPrices) GetBPrices() []*BPrice {
	if x != nil {
		return x.BPrices
	}
	return nil
}

type BPriceUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *Auth   `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	BPrice *BPrice `protobuf:"bytes,2,opt,name=b_price,json=bPrice,proto3" json:"b_price,omitempty"`
}

func (x *BPriceUpsert) Reset() {
	*x = BPriceUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPriceUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPriceUpsert) ProtoMessage() {}

func (x *BPriceUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPriceUpsert.ProtoReflect.Descriptor instead.
func (*BPriceUpsert) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{53}
}

func (x *BPriceUpsert) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BPriceUpsert) GetBPrice() *BPrice {
	if x != nil {
		return x.BPrice
	}
	return nil
}

type BSeller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Person  string `protobuf:"bytes,4,opt,name=person,proto3" json:"person,omitempty"`
	Phone   string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Email   string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *BSeller) Reset() {
	*x = BSeller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSeller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSeller) ProtoMessage() {}

func (x *BSeller) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSeller.ProtoReflect.Descriptor instead.
func (*BSeller) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{54}
}

func (x *BSeller) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BSeller) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BSeller) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BSeller) GetPerson() string {
	if x != nil {
		return x.Person
	}
	return ""
}

func (x *BSeller) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *BSeller) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type BSellerUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *Auth    `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	BSeller *BSeller `protobuf:"bytes,2,opt,name=b_seller,json=bSeller,proto3" json:"b_seller,omitempty"`
}

func (x *BSellerUpsert) Reset() {
	*x = BSellerUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerUpsert) ProtoMessage() {}

func (x *BSellerUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerUpsert.ProtoReflect.Descriptor instead.
func (*BSellerUpsert) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{55}
}

func (x *BSellerUpsert) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BSellerUpsert) GetBSeller() *BSeller {
	if x != nil {
		return x.BSeller
	}
	return nil
}

type BSellers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BSellers []*BSeller `protobuf:"bytes,1,rep,name=b_sellers,json=bSellers,proto3" json:"b_sellers,omitempty"`
}

func (x *BSellers) Reset() {
	*x = BSellers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellers) ProtoMessage() {}

func (x *BSellers) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellers.ProtoReflect.Descriptor instead.
func (*BSellers) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{56}
}

func (x *BSellers) GetBSellers() []*BSeller {
	if x != nil {
		return x.BSellers
	}
	return nil
}

type BSellerCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	BSellerID int64 `protobuf:"varint,2,opt,name=b_sellerID,json=bSellerID,proto3" json:"b_sellerID,omitempty"`
	CompanyID int64 `protobuf:"varint,3,opt,name=companyID,proto3" json:"companyID,omitempty"`
}

func (x *BSellerCompanyRequest) Reset() {
	*x = BSellerCompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerCompanyRequest) ProtoMessage() {}

func (x *BSellerCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerCompanyRequest.ProtoReflect.Descriptor instead.
func (*BSellerCompanyRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{57}
}

func (x *BSellerCompanyRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BSellerCompanyRequest) GetBSellerID() int64 {
	if x != nil {
		return x.BSellerID
	}
	return 0
}

func (x *BSellerCompanyRequest) GetCompanyID() int64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

type BSellerCompanyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Company *Company `protobuf:"bytes,2,opt,name=company,proto3" json:"company,omitempty"`
}

func (x *BSellerCompanyData) Reset() {
	*x = BSellerCompanyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerCompanyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerCompanyData) ProtoMessage() {}

func (x *BSellerCompanyData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerCompanyData.ProtoReflect.Descriptor instead.
func (*BSellerCompanyData) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{58}
}

func (x *BSellerCompanyData) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BSellerCompanyData) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

type BSellerCompaniesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*BSellerCompanyData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BSellerCompaniesData) Reset() {
	*x = BSellerCompaniesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerCompaniesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerCompaniesData) ProtoMessage() {}

func (x *BSellerCompaniesData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerCompaniesData.ProtoReflect.Descriptor instead.
func (*BSellerCompaniesData) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{59}
}

func (x *BSellerCompaniesData) GetData() []*BSellerCompanyData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BSellerCompanyProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	BSellerID int64 `protobuf:"varint,2,opt,name=b_sellerID,json=bSellerID,proto3" json:"b_sellerID,omitempty"`
	CompanyID int64 `protobuf:"varint,3,opt,name=companyID,proto3" json:"companyID,omitempty"`
	ID        int64 `protobuf:"varint,4,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *BSellerCompanyProductRequest) Reset() {
	*x = BSellerCompanyProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerCompanyProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerCompanyProductRequest) ProtoMessage() {}

func (x *BSellerCompanyProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerCompanyProductRequest.ProtoReflect.Descriptor instead.
func (*BSellerCompanyProductRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{60}
}

func (x *BSellerCompanyProductRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BSellerCompanyProductRequest) GetBSellerID() int64 {
	if x != nil {
		return x.BSellerID
	}
	return 0
}

func (x *BSellerCompanyProductRequest) GetCompanyID() int64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *BSellerCompanyProductRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type CompanyProductShopUrlAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Seller               *BSeller               `protobuf:"bytes,2,opt,name=seller,proto3" json:"seller,omitempty"`
	SellerCompany        *BSellerCompanyData    `protobuf:"bytes,3,opt,name=sellerCompany,proto3" json:"sellerCompany,omitempty"`
	SellerCompanyProduct *BSellerCompanyProduct `protobuf:"bytes,4,opt,name=sellerCompanyProduct,proto3" json:"sellerCompanyProduct,omitempty"`
	Alert                string                 `protobuf:"bytes,5,opt,name=alert,proto3" json:"alert,omitempty"`
	Created              string                 `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *CompanyProductShopUrlAlert) Reset() {
	*x = CompanyProductShopUrlAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyProductShopUrlAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyProductShopUrlAlert) ProtoMessage() {}

func (x *CompanyProductShopUrlAlert) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyProductShopUrlAlert.ProtoReflect.Descriptor instead.
func (*CompanyProductShopUrlAlert) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{61}
}

func (x *CompanyProductShopUrlAlert) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *CompanyProductShopUrlAlert) GetSeller() *BSeller {
	if x != nil {
		return x.Seller
	}
	return nil
}

func (x *CompanyProductShopUrlAlert) GetSellerCompany() *BSellerCompanyData {
	if x != nil {
		return x.SellerCompany
	}
	return nil
}

func (x *CompanyProductShopUrlAlert) GetSellerCompanyProduct() *BSellerCompanyProduct {
	if x != nil {
		return x.SellerCompanyProduct
	}
	return nil
}

func (x *CompanyProductShopUrlAlert) GetAlert() string {
	if x != nil {
		return x.Alert
	}
	return ""
}

func (x *CompanyProductShopUrlAlert) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

type CompanyProductShopUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Url   string                      `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Alert *CompanyProductShopUrlAlert `protobuf:"bytes,3,opt,name=alert,proto3" json:"alert,omitempty"`
}

func (x *CompanyProductShopUrl) Reset() {
	*x = CompanyProductShopUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyProductShopUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyProductShopUrl) ProtoMessage() {}

func (x *CompanyProductShopUrl) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyProductShopUrl.ProtoReflect.Descriptor instead.
func (*CompanyProductShopUrl) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{62}
}

func (x *CompanyProductShopUrl) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *CompanyProductShopUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CompanyProductShopUrl) GetAlert() *CompanyProductShopUrlAlert {
	if x != nil {
		return x.Alert
	}
	return nil
}

type CompanyProductShopUrls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shop string                   `protobuf:"bytes,1,opt,name=shop,proto3" json:"shop,omitempty"`
	Urls []*CompanyProductShopUrl `protobuf:"bytes,2,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *CompanyProductShopUrls) Reset() {
	*x = CompanyProductShopUrls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyProductShopUrls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyProductShopUrls) ProtoMessage() {}

func (x *CompanyProductShopUrls) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyProductShopUrls.ProtoReflect.Descriptor instead.
func (*CompanyProductShopUrls) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{63}
}

func (x *CompanyProductShopUrls) GetShop() string {
	if x != nil {
		return x.Shop
	}
	return ""
}

func (x *CompanyProductShopUrls) GetUrls() []*CompanyProductShopUrl {
	if x != nil {
		return x.Urls
	}
	return nil
}

type BSellerCompanyProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       int64                     `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Product  *Product                  `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
	BProduct *BProduct                 `protobuf:"bytes,3,opt,name=b_product,json=bProduct,proto3" json:"b_product,omitempty"`
	Urls     []*CompanyProductShopUrls `protobuf:"bytes,4,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *BSellerCompanyProduct) Reset() {
	*x = BSellerCompanyProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerCompanyProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerCompanyProduct) ProtoMessage() {}

func (x *BSellerCompanyProduct) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerCompanyProduct.ProtoReflect.Descriptor instead.
func (*BSellerCompanyProduct) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{64}
}

func (x *BSellerCompanyProduct) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BSellerCompanyProduct) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *BSellerCompanyProduct) GetBProduct() *BProduct {
	if x != nil {
		return x.BProduct
	}
	return nil
}

func (x *BSellerCompanyProduct) GetUrls() []*CompanyProductShopUrls {
	if x != nil {
		return x.Urls
	}
	return nil
}

type BSellerCompanyProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SellerCompanyProducts []*BSellerCompanyProduct `protobuf:"bytes,1,rep,name=seller_company_products,json=sellerCompanyProducts,proto3" json:"seller_company_products,omitempty"`
}

func (x *BSellerCompanyProducts) Reset() {
	*x = BSellerCompanyProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerCompanyProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerCompanyProducts) ProtoMessage() {}

func (x *BSellerCompanyProducts) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerCompanyProducts.ProtoReflect.Descriptor instead.
func (*BSellerCompanyProducts) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{65}
}

func (x *BSellerCompanyProducts) GetSellerCompanyProducts() []*BSellerCompanyProduct {
	if x != nil {
		return x.SellerCompanyProducts
	}
	return nil
}

type BSCPUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth     `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Do        string    `protobuf:"bytes,2,opt,name=do,proto3" json:"do,omitempty"`
	ID        int64     `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
	SellerID  int64     `protobuf:"varint,4,opt,name=sellerID,proto3" json:"sellerID,omitempty"`
	CompanyID int64     `protobuf:"varint,5,opt,name=companyID,proto3" json:"companyID,omitempty"`
	Product   *Product  `protobuf:"bytes,6,opt,name=product,proto3" json:"product,omitempty"`
	BProduct  *BProduct `protobuf:"bytes,7,opt,name=b_product,json=bProduct,proto3" json:"b_product,omitempty"`
}

func (x *BSCPUpdateRequest) Reset() {
	*x = BSCPUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSCPUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSCPUpdateRequest) ProtoMessage() {}

func (x *BSCPUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSCPUpdateRequest.ProtoReflect.Descriptor instead.
func (*BSCPUpdateRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{66}
}

func (x *BSCPUpdateRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BSCPUpdateRequest) GetDo() string {
	if x != nil {
		return x.Do
	}
	return ""
}

func (x *BSCPUpdateRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BSCPUpdateRequest) GetSellerID() int64 {
	if x != nil {
		return x.SellerID
	}
	return 0
}

func (x *BSCPUpdateRequest) GetCompanyID() int64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *BSCPUpdateRequest) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *BSCPUpdateRequest) GetBProduct() *BProduct {
	if x != nil {
		return x.BProduct
	}
	return nil
}

type CreateBSellerNullProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth       *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	BsellerID  int64 `protobuf:"varint,2,opt,name=BsellerID,proto3" json:"BsellerID,omitempty"`
	BProductID int64 `protobuf:"varint,3,opt,name=BProductID,proto3" json:"BProductID,omitempty"`
}

func (x *CreateBSellerNullProductRequest) Reset() {
	*x = CreateBSellerNullProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBSellerNullProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBSellerNullProductRequest) ProtoMessage() {}

func (x *CreateBSellerNullProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBSellerNullProductRequest.ProtoReflect.Descriptor instead.
func (*CreateBSellerNullProductRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{67}
}

func (x *CreateBSellerNullProductRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *CreateBSellerNullProductRequest) GetBsellerID() int64 {
	if x != nil {
		return x.BsellerID
	}
	return 0
}

func (x *CreateBSellerNullProductRequest) GetBProductID() int64 {
	if x != nil {
		return x.BProductID
	}
	return 0
}

type NullUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth          *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	NullProductID int64  `protobuf:"varint,2,opt,name=nullProductID,proto3" json:"nullProductID,omitempty"`
	ShopCode      string `protobuf:"bytes,3,opt,name=shopCode,proto3" json:"shopCode,omitempty"`
	Url           string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *NullUrlRequest) Reset() {
	*x = NullUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullUrlRequest) ProtoMessage() {}

func (x *NullUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullUrlRequest.ProtoReflect.Descriptor instead.
func (*NullUrlRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{68}
}

func (x *NullUrlRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *NullUrlRequest) GetNullProductID() int64 {
	if x != nil {
		return x.NullProductID
	}
	return 0
}

func (x *NullUrlRequest) GetShopCode() string {
	if x != nil {
		return x.ShopCode
	}
	return ""
}

func (x *NullUrlRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ID                     int64  `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	SellerID               int64  `protobuf:"varint,3,opt,name=sellerID,proto3" json:"sellerID,omitempty"`
	SellerCompanyID        int64  `protobuf:"varint,4,opt,name=sellerCompanyID,proto3" json:"sellerCompanyID,omitempty"`
	SellerCompanyProductID int64  `protobuf:"varint,5,opt,name=sellerCompanyProductID,proto3" json:"sellerCompanyProductID,omitempty"`
	Message                string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{69}
}

func (x *Alert) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Alert) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Alert) GetSellerID() int64 {
	if x != nil {
		return x.SellerID
	}
	return 0
}

func (x *Alert) GetSellerCompanyID() int64 {
	if x != nil {
		return x.SellerCompanyID
	}
	return 0
}

func (x *Alert) GetSellerCompanyProductID() int64 {
	if x != nil {
		return x.SellerCompanyProductID
	}
	return 0
}

func (x *Alert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Alerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alerts []*Alert `protobuf:"bytes,1,rep,name=alerts,proto3" json:"alerts,omitempty"`
}

func (x *Alerts) Reset() {
	*x = Alerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alerts) ProtoMessage() {}

func (x *Alerts) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alerts.ProtoReflect.Descriptor instead.
func (*Alerts) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{70}
}

func (x *Alerts) GetAlerts() []*Alert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

var File_brand_proto protoreflect.FileDescriptor

var file_brand_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x1a, 0x0d, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x73, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x72, 0x22, 0x40, 0x0a, 0x0e, 0x44,
	0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x01,
	0x0a, 0x11, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x6f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6e, 0x6f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x3b, 0x0a, 0x0f,
	0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe6, 0x03, 0x0a, 0x0b, 0x44, 0x75,
	0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x08, 0x62, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x07, 0x62,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x62, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68,
	0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x69, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x22, 0x41, 0x0a, 0x13, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x13, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x4a, 0x0a, 0x16, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8f,
	0x01, 0x0a, 0x0f, 0x53, 0x41, 0x4c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x22, 0x58, 0x0a, 0x10, 0x53, 0x41, 0x4c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41, 0x4c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x01, 0x0a, 0x18, 0x53,
	0x41, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22,
	0x6f, 0x0a, 0x16, 0x53, 0x41, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x3d, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x22, 0x82, 0x01, 0x0a, 0x14, 0x53, 0x41, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x5b, 0x0a, 0x17, 0x53, 0x41, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x53, 0x41, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x53, 0x41, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x09, 0x53,
	0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x73, 0x22, 0x86, 0x01, 0x0a, 0x09, 0x50, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x56, 0x0a, 0x0d, 0x53, 0x41,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x74, 0x6f, 0x22, 0x43, 0x0a, 0x11, 0x53, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x0a, 0x53, 0x41, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x08, 0x62, 0x5f, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x07, 0x62, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x0b, 0x53, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x01,
	0x0a, 0x0a, 0x50, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x09,
	0x62, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x08, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x53, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x36,
	0x0a, 0x0b, 0x50, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x22, 0x4e, 0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x75, 0x6d,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x42, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x75, 0x6d,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x38, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x52, 0x61, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x22, 0x37, 0x0a, 0x09, 0x52, 0x61, 0x64, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x63, 0x0a, 0x11, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x64, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x52, 0x61, 0x64, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0x38,
	0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x53, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0x4c, 0x0a,
	0x13, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x64, 0x0a, 0x10, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x75,
	0x6d, 0x22, 0x56, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x39, 0x0a, 0x14, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x22, 0x73, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0x44, 0x0a, 0x12, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x39, 0x0a, 0x14, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x9e, 0x01, 0x0a, 0x0d, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x40, 0x0a, 0x12, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a,
	0x11, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x3b, 0x0a, 0x0f, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x5d, 0x0a, 0x11, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x65, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x12, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x75, 0x6d, 0x70,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0b, 0x44, 0x75, 0x6d, 0x70,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d,
	0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a,
	0x0d, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb0, 0x01, 0x0a, 0x08,
	0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x3d,
	0x0a, 0x09, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x62,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x09, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x63, 0x0a,
	0x0e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12,
	0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x2e, 0x0a, 0x09, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x22, 0x5f, 0x0a, 0x0c, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x42, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x69, 0x0a, 0x06, 0x42, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x35, 0x0a, 0x07, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x08, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x07, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x0c,
	0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x28, 0x0a, 0x07, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x07, 0x42, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x5f, 0x0a, 0x0d, 0x42, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x08, 0x62,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x07, 0x62, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x08, 0x42, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x62, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x08, 0x62, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x73, 0x22, 0x77, 0x0a, 0x15, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22, 0x50, 0x0a, 0x12,
	0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x47,
	0x0a, 0x14, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x42, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x62, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x9d, 0x02, 0x0a, 0x1a, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x55,
	0x72, 0x6c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x52, 0x0a, 0x14, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x74, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x72,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x55,
	0x72, 0x6c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x22, 0x60,
	0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x68, 0x6f, 0x70, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x70, 0x12, 0x32, 0x0a, 0x04,
	0x75, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x72, 0x6c, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73,
	0x22, 0xb8, 0x01, 0x0a, 0x15, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x62, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68, 0x6f,
	0x70, 0x55, 0x72, 0x6c, 0x73, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x70, 0x0a, 0x16, 0x42,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x17, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0xec, 0x01,
	0x0a, 0x11, 0x42, 0x53, 0x43, 0x50, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x64, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x09,
	0x62, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x08, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x82, 0x01, 0x0a,
	0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x75,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x22, 0x87, 0x01, 0x0a, 0x0e, 0x4e, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xc3, 0x01, 0x0a, 0x05,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12,
	0x36, 0x0a, 0x16, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x16, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x30, 0x0a, 0x06, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x06, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x32, 0xd7, 0x26, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x32,
	0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x1a, 0x0e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x11, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x1a, 0x11, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x1a, 0x12, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x10,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x15, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x1a,
	0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x36,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x1a, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x1a,
	0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x1e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5e,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12, 0x63,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x25, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x43,
	0x50, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x28, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x42,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x52, 0x4c, 0x12, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x52, 0x4c, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2d,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x0d, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x0f, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a,
	0x0e, 0x53, 0x65, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x37,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x1a, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x75,
	0x6d, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x1a, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75,
	0x6d, 0x70, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x12, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x64, 0x61, 0x72, 0x12, 0x1c, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x61,
	0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x64, 0x61,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1c, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x1e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x4e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x61, 0x64, 0x61, 0x72, 0x12, 0x1c, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x64, 0x61, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x64, 0x61, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1c,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x75, 0x6d, 0x12, 0x1b, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x16, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x53, 0x41, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x53, 0x41, 0x4c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x12, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x53, 0x41, 0x4c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x11, 0x53, 0x41, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x53, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x4a, 0x0a, 0x11, 0x53, 0x41, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53,
	0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x53, 0x41, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x53,
	0x41, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x79, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x53, 0x41, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x79, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x53, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x13, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x50, 0x41, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x53, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x50, 0x41, 0x4c, 0x69, 0x6e, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x12, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50,
	0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x53, 0x41, 0x4c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x11, 0x50, 0x41, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x11, 0x50, 0x41, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x50, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x0f, 0x50, 0x41, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x12, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x41, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53,
	0x41, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0f, 0x50, 0x41, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x1a, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44,
	0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12,
	0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x41,
	0x4c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x53, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d,
	0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x1a, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x42, 0x23, 0x5a,
	0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x73, 0x61,
	0x6e, 0x79, 0x63, 0x68, 0x2f, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brand_proto_rawDescOnce sync.Once
	file_brand_proto_rawDescData = file_brand_proto_rawDesc
)

func file_brand_proto_rawDescGZIP() []byte {
	file_brand_proto_rawDescOnce.Do(func() {
		file_brand_proto_rawDescData = protoimpl.X.CompressGZIP(file_brand_proto_rawDescData)
	})
	return file_brand_proto_rawDescData
}

var file_brand_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_brand_proto_goTypes = []interface{}{
	(*DumpingRaitingRow)(nil),               // 0: cerasus.DumpingRaitingRow
	(*DumpingRaiting)(nil),                  // 1: cerasus.DumpingRaiting
	(*DumpingDayRequest)(nil),               // 2: cerasus.DumpingDayRequest
	(*DumpingDayReply)(nil),                 // 3: cerasus.DumpingDayReply
	(*DumpingData)(nil),                     // 4: cerasus.DumpingData
	(*DumpingCalenderData)(nil),             // 5: cerasus.DumpingCalenderData
	(*DumpingCalenderDate)(nil),             // 6: cerasus.DumpingCalenderDate
	(*DumpingCalenderRequest)(nil),          // 7: cerasus.DumpingCalenderRequest
	(*SALineGraphData)(nil),                 // 8: cerasus.SALineGraphData
	(*SALineGraphReply)(nil),                // 9: cerasus.SALineGraphReply
	(*SARoundByProductsDataset)(nil),        // 10: cerasus.SARoundByProductsDataset
	(*SARoundByProductsReply)(nil),          // 11: cerasus.SARoundByProductsReply
	(*SATableByProductsRow)(nil),            // 12: cerasus.SATableByProductsRow
	(*SATableByProductsResult)(nil),         // 13: cerasus.SATableByProductsResult
	(*SATableByProductsReply)(nil),          // 14: cerasus.SATableByProductsReply
	(*SARequest)(nil),                       // 15: cerasus.SARequest
	(*PARequest)(nil),                       // 16: cerasus.PARequest
	(*SAListRequest)(nil),                   // 17: cerasus.SAListRequest
	(*SAListItemVolumes)(nil),               // 18: cerasus.SAListItemVolumes
	(*SAListItem)(nil),                      // 19: cerasus.SAListItem
	(*SAListReply)(nil),                     // 20: cerasus.SAListReply
	(*PAListItem)(nil),                      // 21: cerasus.PAListItem
	(*PAListReply)(nil),                     // 22: cerasus.PAListReply
	(*MonitorDumpingRequest)(nil),           // 23: cerasus.MonitorDumpingRequest
	(*MonitorDumping)(nil),                  // 24: cerasus.MonitorDumping
	(*MonitorDumpingReply)(nil),             // 25: cerasus.MonitorDumpingReply
	(*MonitorRadarRequest)(nil),             // 26: cerasus.MonitorRadarRequest
	(*RadarData)(nil),                       // 27: cerasus.RadarData
	(*MonitorRadarReply)(nil),               // 28: cerasus.MonitorRadarReply
	(*MonitorSalesRequest)(nil),             // 29: cerasus.MonitorSalesRequest
	(*MonitorSalesReply)(nil),               // 30: cerasus.MonitorSalesReply
	(*MonitorMonthRequest)(nil),             // 31: cerasus.MonitorMonthRequest
	(*MonitorMonthData)(nil),                // 32: cerasus.MonitorMonthData
	(*MonitorMonthReply)(nil),               // 33: cerasus.MonitorMonthReply
	(*MonitorStringRequest)(nil),            // 34: cerasus.MonitorStringRequest
	(*MonitorStringData)(nil),               // 35: cerasus.MonitorStringData
	(*MonitorStringReply)(nil),              // 36: cerasus.MonitorStringReply
	(*MonitorLeaderRequest)(nil),            // 37: cerasus.MonitorLeaderRequest
	(*MonitorLeader)(nil),                   // 38: cerasus.MonitorLeader
	(*MonitorLeaderReply)(nil),              // 39: cerasus.MonitorLeaderReply
	(*SalesCountRequest)(nil),               // 40: cerasus.SalesCountRequest
	(*SalesCountReply)(nil),                 // 41: cerasus.SalesCountReply
	(*DumpingCountReply)(nil),               // 42: cerasus.DumpingCountReply
	(*DumpingListRequest)(nil),              // 43: cerasus.DumpingListRequest
	(*DumpingList)(nil),                     // 44: cerasus.DumpingList
	(*DumpingUpdate)(nil),                   // 45: cerasus.DumpingUpdate
	(*BProduct)(nil),                        // 46: cerasus.BProduct
	(*BProducts)(nil),                       // 47: cerasus.BProducts
	(*BProductUpsert)(nil),                  // 48: cerasus.BProductUpsert
	(*BFileRequest)(nil),                    // 49: cerasus.BFileRequest
	(*BUploadRequest)(nil),                  // 50: cerasus.BUploadRequest
	(*BPrice)(nil),                          // 51: cerasus.BPrice
	(*BPrices)(nil),                         // 52: cerasus.BPrices
	(*BPriceUpsert)(nil),                    // 53: cerasus.BPriceUpsert
	(*BSeller)(nil),                         // 54: cerasus.BSeller
	(*BSellerUpsert)(nil),                   // 55: cerasus.BSellerUpsert
	(*BSellers)(nil),                        // 56: cerasus.BSellers
	(*BSellerCompanyRequest)(nil),           // 57: cerasus.BSellerCompanyRequest
	(*BSellerCompanyData)(nil),              // 58: cerasus.BSellerCompanyData
	(*BSellerCompaniesData)(nil),            // 59: cerasus.BSellerCompaniesData
	(*BSellerCompanyProductRequest)(nil),    // 60: cerasus.BSellerCompanyProductRequest
	(*CompanyProductShopUrlAlert)(nil),      // 61: cerasus.CompanyProductShopUrlAlert
	(*CompanyProductShopUrl)(nil),           // 62: cerasus.CompanyProductShopUrl
	(*CompanyProductShopUrls)(nil),          // 63: cerasus.CompanyProductShopUrls
	(*BSellerCompanyProduct)(nil),           // 64: cerasus.BSellerCompanyProduct
	(*BSellerCompanyProducts)(nil),          // 65: cerasus.BSellerCompanyProducts
	(*BSCPUpdateRequest)(nil),               // 66: cerasus.BSCPUpdateRequest
	(*CreateBSellerNullProductRequest)(nil), // 67: cerasus.CreateBSellerNullProductRequest
	(*NullUrlRequest)(nil),                  // 68: cerasus.NullUrlRequest
	(*Alert)(nil),                           // 69: cerasus.Alert
	(*Alerts)(nil),                          // 70: cerasus.Alerts
	(*Auth)(nil),                            // 71: cerasus.Auth
	(*Company)(nil),                         // 72: cerasus.Company
	(*Pagination)(nil),                      // 73: cerasus.Pagination
	(*Product)(nil),                         // 74: cerasus.Product
	(*PingRequest)(nil),                     // 75: cerasus.PingRequest
	(*RequestByID)(nil),                     // 76: cerasus.RequestByID
	(*GetPricerItemRequest)(nil),            // 77: cerasus.GetPricerItemRequest
	(*SetPricerItemRequest)(nil),            // 78: cerasus.SetPricerItemRequest
	(*MainGraphicRequest)(nil),              // 79: cerasus.MainGraphicRequest
	(*PingReply)(nil),                       // 80: cerasus.PingReply
	(*Brand)(nil),                           // 81: cerasus.Brand
	(*BoolReply)(nil),                       // 82: cerasus.BoolReply
	(*ImageReply)(nil),                      // 83: cerasus.ImageReply
	(*IDRequest)(nil),                       // 84: cerasus.IDRequest
	(*GetPricerItemReply)(nil),              // 85: cerasus.GetPricerItemReply
	(*CountReply)(nil),                      // 86: cerasus.CountReply
	(*MainGraphicReply)(nil),                // 87: cerasus.MainGraphicReply
	(*DonutGraphics)(nil),                   // 88: cerasus.DonutGraphics
	(*WidgetData)(nil),                      // 89: cerasus.WidgetData
}
var file_brand_proto_depIdxs = []int32{
	0,   // 0: cerasus.DumpingRaiting.data:type_name -> cerasus.DumpingRaitingRow
	71,  // 1: cerasus.DumpingDayRequest.auth:type_name -> cerasus.Auth
	4,   // 2: cerasus.DumpingDayReply.data:type_name -> cerasus.DumpingData
	54,  // 3: cerasus.DumpingData.b_seller:type_name -> cerasus.BSeller
	46,  // 4: cerasus.DumpingData.b_product:type_name -> cerasus.BProduct
	72,  // 5: cerasus.DumpingData.company:type_name -> cerasus.Company
	5,   // 6: cerasus.DumpingCalenderDate.data:type_name -> cerasus.DumpingCalenderData
	6,   // 7: cerasus.DumpingCalenderRequest.data:type_name -> cerasus.DumpingCalenderDate
	8,   // 8: cerasus.SALineGraphReply.data:type_name -> cerasus.SALineGraphData
	10,  // 9: cerasus.SARoundByProductsReply.datasets:type_name -> cerasus.SARoundByProductsDataset
	13,  // 10: cerasus.SATableByProductsReply.result:type_name -> cerasus.SATableByProductsResult
	12,  // 11: cerasus.SATableByProductsReply.rows:type_name -> cerasus.SATableByProductsRow
	71,  // 12: cerasus.SARequest.auth:type_name -> cerasus.Auth
	71,  // 13: cerasus.PARequest.auth:type_name -> cerasus.Auth
	71,  // 14: cerasus.SAListRequest.auth:type_name -> cerasus.Auth
	54,  // 15: cerasus.SAListItem.b_seller:type_name -> cerasus.BSeller
	18,  // 16: cerasus.SAListItem.salesVolume:type_name -> cerasus.SAListItemVolumes
	19,  // 17: cerasus.SAListReply.data:type_name -> cerasus.SAListItem
	46,  // 18: cerasus.PAListItem.b_product:type_name -> cerasus.BProduct
	18,  // 19: cerasus.PAListItem.salesVolume:type_name -> cerasus.SAListItemVolumes
	21,  // 20: cerasus.PAListReply.data:type_name -> cerasus.PAListItem
	71,  // 21: cerasus.MonitorDumpingRequest.auth:type_name -> cerasus.Auth
	24,  // 22: cerasus.MonitorDumpingReply.data:type_name -> cerasus.MonitorDumping
	71,  // 23: cerasus.MonitorRadarRequest.auth:type_name -> cerasus.Auth
	27,  // 24: cerasus.MonitorRadarReply.count:type_name -> cerasus.RadarData
	27,  // 25: cerasus.MonitorRadarReply.sum:type_name -> cerasus.RadarData
	71,  // 26: cerasus.MonitorSalesRequest.auth:type_name -> cerasus.Auth
	71,  // 27: cerasus.MonitorMonthRequest.auth:type_name -> cerasus.Auth
	32,  // 28: cerasus.MonitorMonthReply.data:type_name -> cerasus.MonitorMonthData
	71,  // 29: cerasus.MonitorStringRequest.auth:type_name -> cerasus.Auth
	35,  // 30: cerasus.MonitorStringReply.data:type_name -> cerasus.MonitorStringData
	71,  // 31: cerasus.MonitorLeaderRequest.auth:type_name -> cerasus.Auth
	46,  // 32: cerasus.MonitorLeader.product:type_name -> cerasus.BProduct
	38,  // 33: cerasus.MonitorLeaderReply.data:type_name -> cerasus.MonitorLeader
	71,  // 34: cerasus.SalesCountRequest.auth:type_name -> cerasus.Auth
	71,  // 35: cerasus.DumpingListRequest.auth:type_name -> cerasus.Auth
	4,   // 36: cerasus.DumpingList.list:type_name -> cerasus.DumpingData
	43,  // 37: cerasus.DumpingList.request:type_name -> cerasus.DumpingListRequest
	73,  // 38: cerasus.DumpingList.pagination:type_name -> cerasus.Pagination
	71,  // 39: cerasus.DumpingUpdate.auth:type_name -> cerasus.Auth
	4,   // 40: cerasus.DumpingUpdate.data:type_name -> cerasus.DumpingData
	46,  // 41: cerasus.BProducts.b_products:type_name -> cerasus.BProduct
	71,  // 42: cerasus.BProductUpsert.auth:type_name -> cerasus.Auth
	46,  // 43: cerasus.BProductUpsert.b_product:type_name -> cerasus.BProduct
	71,  // 44: cerasus.BUploadRequest.auth:type_name -> cerasus.Auth
	51,  // 45: cerasus.BPrices.b_prices:type_name -> cerasus.BPrice
	71,  // 46: cerasus.BPriceUpsert.auth:type_name -> cerasus.Auth
	51,  // 47: cerasus.BPriceUpsert.b_price:type_name -> cerasus.BPrice
	71,  // 48: cerasus.BSellerUpsert.auth:type_name -> cerasus.Auth
	54,  // 49: cerasus.BSellerUpsert.b_seller:type_name -> cerasus.BSeller
	54,  // 50: cerasus.BSellers.b_sellers:type_name -> cerasus.BSeller
	71,  // 51: cerasus.BSellerCompanyRequest.auth:type_name -> cerasus.Auth
	72,  // 52: cerasus.BSellerCompanyData.company:type_name -> cerasus.Company
	58,  // 53: cerasus.BSellerCompaniesData.data:type_name -> cerasus.BSellerCompanyData
	71,  // 54: cerasus.BSellerCompanyProductRequest.auth:type_name -> cerasus.Auth
	54,  // 55: cerasus.CompanyProductShopUrlAlert.seller:type_name -> cerasus.BSeller
	58,  // 56: cerasus.CompanyProductShopUrlAlert.sellerCompany:type_name -> cerasus.BSellerCompanyData
	64,  // 57: cerasus.CompanyProductShopUrlAlert.sellerCompanyProduct:type_name -> cerasus.BSellerCompanyProduct
	61,  // 58: cerasus.CompanyProductShopUrl.alert:type_name -> cerasus.CompanyProductShopUrlAlert
	62,  // 59: cerasus.CompanyProductShopUrls.urls:type_name -> cerasus.CompanyProductShopUrl
	74,  // 60: cerasus.BSellerCompanyProduct.product:type_name -> cerasus.Product
	46,  // 61: cerasus.BSellerCompanyProduct.b_product:type_name -> cerasus.BProduct
	63,  // 62: cerasus.BSellerCompanyProduct.urls:type_name -> cerasus.CompanyProductShopUrls
	64,  // 63: cerasus.BSellerCompanyProducts.seller_company_products:type_name -> cerasus.BSellerCompanyProduct
	71,  // 64: cerasus.BSCPUpdateRequest.auth:type_name -> cerasus.Auth
	74,  // 65: cerasus.BSCPUpdateRequest.product:type_name -> cerasus.Product
	46,  // 66: cerasus.BSCPUpdateRequest.b_product:type_name -> cerasus.BProduct
	71,  // 67: cerasus.CreateBSellerNullProductRequest.auth:type_name -> cerasus.Auth
	71,  // 68: cerasus.NullUrlRequest.auth:type_name -> cerasus.Auth
	69,  // 69: cerasus.Alerts.alerts:type_name -> cerasus.Alert
	75,  // 70: cerasus.Brands.Ping:input_type -> cerasus.PingRequest
	71,  // 71: cerasus.Brands.GetBrandData:input_type -> cerasus.Auth
	71,  // 72: cerasus.Brands.GetBProducts:input_type -> cerasus.Auth
	76,  // 73: cerasus.Brands.GetBProduct:input_type -> cerasus.RequestByID
	48,  // 74: cerasus.Brands.CreateBProduct:input_type -> cerasus.BProductUpsert
	48,  // 75: cerasus.Brands.UpdateBProduct:input_type -> cerasus.BProductUpsert
	76,  // 76: cerasus.Brands.DeleteBProduct:input_type -> cerasus.RequestByID
	49,  // 77: cerasus.Brands.GetBFile:input_type -> cerasus.BFileRequest
	50,  // 78: cerasus.Brands.UploadBFile:input_type -> cerasus.BUploadRequest
	76,  // 79: cerasus.Brands.GetBPrices:input_type -> cerasus.RequestByID
	76,  // 80: cerasus.Brands.GetBPrice:input_type -> cerasus.RequestByID
	53,  // 81: cerasus.Brands.CreateBPrice:input_type -> cerasus.BPriceUpsert
	76,  // 82: cerasus.Brands.DeleteBPrice:input_type -> cerasus.RequestByID
	55,  // 83: cerasus.Brands.CreateBSeller:input_type -> cerasus.BSellerUpsert
	71,  // 84: cerasus.Brands.GetBSellers:input_type -> cerasus.Auth
	76,  // 85: cerasus.Brands.GetBSeller:input_type -> cerasus.RequestByID
	55,  // 86: cerasus.Brands.UpdateBSeller:input_type -> cerasus.BSellerUpsert
	76,  // 87: cerasus.Brands.DeleteBSeller:input_type -> cerasus.RequestByID
	57,  // 88: cerasus.Brands.GetBSellerCompanies:input_type -> cerasus.BSellerCompanyRequest
	57,  // 89: cerasus.Brands.GetBSellerCompany:input_type -> cerasus.BSellerCompanyRequest
	57,  // 90: cerasus.Brands.GetBSellerCompanyProducts:input_type -> cerasus.BSellerCompanyRequest
	60,  // 91: cerasus.Brands.GetBSellerCompanyProduct:input_type -> cerasus.BSellerCompanyProductRequest
	66,  // 92: cerasus.Brands.UpdateBSellerCompanyProduct:input_type -> cerasus.BSCPUpdateRequest
	67,  // 93: cerasus.Brands.CreateBSellerNullProduct:input_type -> cerasus.CreateBSellerNullProductRequest
	76,  // 94: cerasus.Brands.DeleteBSellerNullProduct:input_type -> cerasus.RequestByID
	68,  // 95: cerasus.Brands.SetBSellerNullProductURL:input_type -> cerasus.NullUrlRequest
	76,  // 96: cerasus.Brands.DeleteBSellerNullProductURL:input_type -> cerasus.RequestByID
	71,  // 97: cerasus.Brands.GetAlerts:input_type -> cerasus.Auth
	77,  // 98: cerasus.Brands.GetDumpingItem:input_type -> cerasus.GetPricerItemRequest
	78,  // 99: cerasus.Brands.SetDumpingItem:input_type -> cerasus.SetPricerItemRequest
	71,  // 100: cerasus.Brands.GetProductsCount:input_type -> cerasus.Auth
	71,  // 101: cerasus.Brands.GetSellersCount:input_type -> cerasus.Auth
	43,  // 102: cerasus.Brands.GetDumpingList:input_type -> cerasus.DumpingListRequest
	71,  // 103: cerasus.Brands.GetDumpingCount:input_type -> cerasus.Auth
	76,  // 104: cerasus.Brands.GetDumpingData:input_type -> cerasus.RequestByID
	45,  // 105: cerasus.Brands.UpdateDumpingData:input_type -> cerasus.DumpingUpdate
	40,  // 106: cerasus.Brands.GetSalesCount:input_type -> cerasus.SalesCountRequest
	29,  // 107: cerasus.Brands.GetMonitorSales:input_type -> cerasus.MonitorSalesRequest
	26,  // 108: cerasus.Brands.GetMonitorRadar:input_type -> cerasus.MonitorRadarRequest
	31,  // 109: cerasus.Brands.GetMonitorMonth:input_type -> cerasus.MonitorMonthRequest
	34,  // 110: cerasus.Brands.GetMonitorString:input_type -> cerasus.MonitorStringRequest
	37,  // 111: cerasus.Brands.GetMonitorLeader:input_type -> cerasus.MonitorLeaderRequest
	23,  // 112: cerasus.Brands.GetMonitorDumping:input_type -> cerasus.MonitorDumpingRequest
	29,  // 113: cerasus.Brands.GetMonitorOrders:input_type -> cerasus.MonitorSalesRequest
	26,  // 114: cerasus.Brands.GetMonitorOrdersRadar:input_type -> cerasus.MonitorRadarRequest
	31,  // 115: cerasus.Brands.GetMonitorOrdersMonth:input_type -> cerasus.MonitorMonthRequest
	34,  // 116: cerasus.Brands.GetMonitorOrdersString:input_type -> cerasus.MonitorStringRequest
	37,  // 117: cerasus.Brands.GetMonitorOrdersLeader:input_type -> cerasus.MonitorLeaderRequest
	79,  // 118: cerasus.Brands.GetGraphMainCount:input_type -> cerasus.MainGraphicRequest
	79,  // 119: cerasus.Brands.GetGraphMainSum:input_type -> cerasus.MainGraphicRequest
	71,  // 120: cerasus.Brands.GetGraphDonutCount:input_type -> cerasus.Auth
	71,  // 121: cerasus.Brands.GetGraphDonutSum:input_type -> cerasus.Auth
	17,  // 122: cerasus.Brands.SASellersList:input_type -> cerasus.SAListRequest
	15,  // 123: cerasus.Brands.SALineGraph:input_type -> cerasus.SARequest
	15,  // 124: cerasus.Brands.SARoundByProducts:input_type -> cerasus.SARequest
	15,  // 125: cerasus.Brands.SATableByProducts:input_type -> cerasus.SARequest
	15,  // 126: cerasus.Brands.SARoundBySales:input_type -> cerasus.SARequest
	15,  // 127: cerasus.Brands.SATableBySales:input_type -> cerasus.SARequest
	76,  // 128: cerasus.Brands.GetSellerProductWidget:input_type -> cerasus.RequestByID
	17,  // 129: cerasus.Brands.PAProductList:input_type -> cerasus.SAListRequest
	16,  // 130: cerasus.Brands.PALineGraph:input_type -> cerasus.PARequest
	16,  // 131: cerasus.Brands.PARoundByProducts:input_type -> cerasus.PARequest
	16,  // 132: cerasus.Brands.PATableByProducts:input_type -> cerasus.PARequest
	16,  // 133: cerasus.Brands.PARoundBySeller:input_type -> cerasus.PARequest
	16,  // 134: cerasus.Brands.PATableBySeller:input_type -> cerasus.PARequest
	76,  // 135: cerasus.Brands.GetProductSellerWidget:input_type -> cerasus.RequestByID
	15,  // 136: cerasus.Brands.GetDumpingMainGraph:input_type -> cerasus.SARequest
	15,  // 137: cerasus.Brands.GetDumpingCalender:input_type -> cerasus.SARequest
	2,   // 138: cerasus.Brands.GetDumpingCalenderDay:input_type -> cerasus.DumpingDayRequest
	71,  // 139: cerasus.Brands.GetDumpingRaiting:input_type -> cerasus.Auth
	80,  // 140: cerasus.Brands.Ping:output_type -> cerasus.PingReply
	81,  // 141: cerasus.Brands.GetBrandData:output_type -> cerasus.Brand
	47,  // 142: cerasus.Brands.GetBProducts:output_type -> cerasus.BProducts
	46,  // 143: cerasus.Brands.GetBProduct:output_type -> cerasus.BProduct
	46,  // 144: cerasus.Brands.CreateBProduct:output_type -> cerasus.BProduct
	82,  // 145: cerasus.Brands.UpdateBProduct:output_type -> cerasus.BoolReply
	82,  // 146: cerasus.Brands.DeleteBProduct:output_type -> cerasus.BoolReply
	83,  // 147: cerasus.Brands.GetBFile:output_type -> cerasus.ImageReply
	83,  // 148: cerasus.Brands.UploadBFile:output_type -> cerasus.ImageReply
	52,  // 149: cerasus.Brands.GetBPrices:output_type -> cerasus.BPrices
	51,  // 150: cerasus.Brands.GetBPrice:output_type -> cerasus.BPrice
	51,  // 151: cerasus.Brands.CreateBPrice:output_type -> cerasus.BPrice
	82,  // 152: cerasus.Brands.DeleteBPrice:output_type -> cerasus.BoolReply
	54,  // 153: cerasus.Brands.CreateBSeller:output_type -> cerasus.BSeller
	56,  // 154: cerasus.Brands.GetBSellers:output_type -> cerasus.BSellers
	54,  // 155: cerasus.Brands.GetBSeller:output_type -> cerasus.BSeller
	82,  // 156: cerasus.Brands.UpdateBSeller:output_type -> cerasus.BoolReply
	82,  // 157: cerasus.Brands.DeleteBSeller:output_type -> cerasus.BoolReply
	59,  // 158: cerasus.Brands.GetBSellerCompanies:output_type -> cerasus.BSellerCompaniesData
	58,  // 159: cerasus.Brands.GetBSellerCompany:output_type -> cerasus.BSellerCompanyData
	65,  // 160: cerasus.Brands.GetBSellerCompanyProducts:output_type -> cerasus.BSellerCompanyProducts
	64,  // 161: cerasus.Brands.GetBSellerCompanyProduct:output_type -> cerasus.BSellerCompanyProduct
	82,  // 162: cerasus.Brands.UpdateBSellerCompanyProduct:output_type -> cerasus.BoolReply
	84,  // 163: cerasus.Brands.CreateBSellerNullProduct:output_type -> cerasus.IDRequest
	82,  // 164: cerasus.Brands.DeleteBSellerNullProduct:output_type -> cerasus.BoolReply
	82,  // 165: cerasus.Brands.SetBSellerNullProductURL:output_type -> cerasus.BoolReply
	82,  // 166: cerasus.Brands.DeleteBSellerNullProductURL:output_type -> cerasus.BoolReply
	70,  // 167: cerasus.Brands.GetAlerts:output_type -> cerasus.Alerts
	85,  // 168: cerasus.Brands.GetDumpingItem:output_type -> cerasus.GetPricerItemReply
	82,  // 169: cerasus.Brands.SetDumpingItem:output_type -> cerasus.BoolReply
	86,  // 170: cerasus.Brands.GetProductsCount:output_type -> cerasus.CountReply
	86,  // 171: cerasus.Brands.GetSellersCount:output_type -> cerasus.CountReply
	44,  // 172: cerasus.Brands.GetDumpingList:output_type -> cerasus.DumpingList
	42,  // 173: cerasus.Brands.GetDumpingCount:output_type -> cerasus.DumpingCountReply
	4,   // 174: cerasus.Brands.GetDumpingData:output_type -> cerasus.DumpingData
	82,  // 175: cerasus.Brands.UpdateDumpingData:output_type -> cerasus.BoolReply
	41,  // 176: cerasus.Brands.GetSalesCount:output_type -> cerasus.SalesCountReply
	30,  // 177: cerasus.Brands.GetMonitorSales:output_type -> cerasus.MonitorSalesReply
	28,  // 178: cerasus.Brands.GetMonitorRadar:output_type -> cerasus.MonitorRadarReply
	33,  // 179: cerasus.Brands.GetMonitorMonth:output_type -> cerasus.MonitorMonthReply
	36,  // 180: cerasus.Brands.GetMonitorString:output_type -> cerasus.MonitorStringReply
	39,  // 181: cerasus.Brands.GetMonitorLeader:output_type -> cerasus.MonitorLeaderReply
	25,  // 182: cerasus.Brands.GetMonitorDumping:output_type -> cerasus.MonitorDumpingReply
	30,  // 183: cerasus.Brands.GetMonitorOrders:output_type -> cerasus.MonitorSalesReply
	28,  // 184: cerasus.Brands.GetMonitorOrdersRadar:output_type -> cerasus.MonitorRadarReply
	33,  // 185: cerasus.Brands.GetMonitorOrdersMonth:output_type -> cerasus.MonitorMonthReply
	36,  // 186: cerasus.Brands.GetMonitorOrdersString:output_type -> cerasus.MonitorStringReply
	39,  // 187: cerasus.Brands.GetMonitorOrdersLeader:output_type -> cerasus.MonitorLeaderReply
	87,  // 188: cerasus.Brands.GetGraphMainCount:output_type -> cerasus.MainGraphicReply
	87,  // 189: cerasus.Brands.GetGraphMainSum:output_type -> cerasus.MainGraphicReply
	88,  // 190: cerasus.Brands.GetGraphDonutCount:output_type -> cerasus.DonutGraphics
	88,  // 191: cerasus.Brands.GetGraphDonutSum:output_type -> cerasus.DonutGraphics
	20,  // 192: cerasus.Brands.SASellersList:output_type -> cerasus.SAListReply
	9,   // 193: cerasus.Brands.SALineGraph:output_type -> cerasus.SALineGraphReply
	11,  // 194: cerasus.Brands.SARoundByProducts:output_type -> cerasus.SARoundByProductsReply
	14,  // 195: cerasus.Brands.SATableByProducts:output_type -> cerasus.SATableByProductsReply
	11,  // 196: cerasus.Brands.SARoundBySales:output_type -> cerasus.SARoundByProductsReply
	14,  // 197: cerasus.Brands.SATableBySales:output_type -> cerasus.SATableByProductsReply
	89,  // 198: cerasus.Brands.GetSellerProductWidget:output_type -> cerasus.WidgetData
	22,  // 199: cerasus.Brands.PAProductList:output_type -> cerasus.PAListReply
	9,   // 200: cerasus.Brands.PALineGraph:output_type -> cerasus.SALineGraphReply
	11,  // 201: cerasus.Brands.PARoundByProducts:output_type -> cerasus.SARoundByProductsReply
	14,  // 202: cerasus.Brands.PATableByProducts:output_type -> cerasus.SATableByProductsReply
	11,  // 203: cerasus.Brands.PARoundBySeller:output_type -> cerasus.SARoundByProductsReply
	14,  // 204: cerasus.Brands.PATableBySeller:output_type -> cerasus.SATableByProductsReply
	89,  // 205: cerasus.Brands.GetProductSellerWidget:output_type -> cerasus.WidgetData
	9,   // 206: cerasus.Brands.GetDumpingMainGraph:output_type -> cerasus.SALineGraphReply
	7,   // 207: cerasus.Brands.GetDumpingCalender:output_type -> cerasus.DumpingCalenderRequest
	3,   // 208: cerasus.Brands.GetDumpingCalenderDay:output_type -> cerasus.DumpingDayReply
	1,   // 209: cerasus.Brands.GetDumpingRaiting:output_type -> cerasus.DumpingRaiting
	140, // [140:210] is the sub-list for method output_type
	70,  // [70:140] is the sub-list for method input_type
	70,  // [70:70] is the sub-list for extension type_name
	70,  // [70:70] is the sub-list for extension extendee
	0,   // [0:70] is the sub-list for field type_name
}

func init() { file_brand_proto_init() }
func file_brand_proto_init() {
	if File_brand_proto != nil {
		return
	}
	file_cerasus_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_brand_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingRaitingRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingRaiting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingDayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingDayReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingCalenderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingCalenderDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingCalenderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SALineGraphData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SALineGraphReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SARoundByProductsDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SARoundByProductsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SATableByProductsRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SATableByProductsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SATableByProductsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAListItemVolumes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PAListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PAListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorDumpingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorDumping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorDumpingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorRadarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadarData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorRadarReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorSalesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorSalesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorMonthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorMonthData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorMonthReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorStringRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorStringData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorStringReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorLeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorLeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorLeaderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesCountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingCountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BProductUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPrices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPriceUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSeller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerCompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerCompanyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerCompaniesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerCompanyProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyProductShopUrlAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyProductShopUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyProductShopUrls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerCompanyProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerCompanyProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSCPUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBSellerNullProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brand_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brand_proto_goTypes,
		DependencyIndexes: file_brand_proto_depIdxs,
		MessageInfos:      file_brand_proto_msgTypes,
	}.Build()
	File_brand_proto = out.File
	file_brand_proto_rawDesc = nil
	file_brand_proto_goTypes = nil
	file_brand_proto_depIdxs = nil
}
