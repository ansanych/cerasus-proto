// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: brand.proto

package cerasus_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BProductPrices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prices []*BProductPrice `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices,omitempty"`
}

func (x *BProductPrices) Reset() {
	*x = BProductPrices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BProductPrices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BProductPrices) ProtoMessage() {}

func (x *BProductPrices) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BProductPrices.ProtoReflect.Descriptor instead.
func (*BProductPrices) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{0}
}

func (x *BProductPrices) GetPrices() []*BProductPrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

type BProductCreatePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Price     int64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	ProductID int64 `protobuf:"varint,3,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *BProductCreatePrice) Reset() {
	*x = BProductCreatePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BProductCreatePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BProductCreatePrice) ProtoMessage() {}

func (x *BProductCreatePrice) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BProductCreatePrice.ProtoReflect.Descriptor instead.
func (*BProductCreatePrice) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{1}
}

func (x *BProductCreatePrice) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BProductCreatePrice) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *BProductCreatePrice) GetProductID() int64 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

type BProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int64          `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CompanyID int64          `protobuf:"varint,2,opt,name=companyID,proto3" json:"companyID,omitempty"`
	Title     string         `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Comment   string         `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	Article   string         `protobuf:"bytes,5,opt,name=article,proto3" json:"article,omitempty"`
	Active    bool           `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	Updated   string         `protobuf:"bytes,7,opt,name=updated,proto3" json:"updated,omitempty"`
	Preview   string         `protobuf:"bytes,8,opt,name=preview,proto3" json:"preview,omitempty"`
	Price     *BProductPrice `protobuf:"bytes,9,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *BProduct) Reset() {
	*x = BProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BProduct) ProtoMessage() {}

func (x *BProduct) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BProduct.ProtoReflect.Descriptor instead.
func (*BProduct) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{2}
}

func (x *BProduct) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BProduct) GetCompanyID() int64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *BProduct) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BProduct) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BProduct) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *BProduct) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *BProduct) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

func (x *BProduct) GetPreview() string {
	if x != nil {
		return x.Preview
	}
	return ""
}

func (x *BProduct) GetPrice() *BProductPrice {
	if x != nil {
		return x.Price
	}
	return nil
}

type BProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Page int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *BProductsRequest) Reset() {
	*x = BProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BProductsRequest) ProtoMessage() {}

func (x *BProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BProductsRequest.ProtoReflect.Descriptor instead.
func (*BProductsRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{3}
}

func (x *BProductsRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BProductsRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type BIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	ID   int64 `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *BIDRequest) Reset() {
	*x = BIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BIDRequest) ProtoMessage() {}

func (x *BIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BIDRequest.ProtoReflect.Descriptor instead.
func (*BIDRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{4}
}

func (x *BIDRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BIDRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type BProductsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products   []*BProduct `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *BProductsReply) Reset() {
	*x = BProductsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BProductsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BProductsReply) ProtoMessage() {}

func (x *BProductsReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BProductsReply.ProtoReflect.Descriptor instead.
func (*BProductsReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{5}
}

func (x *BProductsReply) GetProducts() []*BProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *BProductsReply) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type BProductCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product *BProduct `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
}

func (x *BProductCreateReply) Reset() {
	*x = BProductCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BProductCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BProductCreateReply) ProtoMessage() {}

func (x *BProductCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BProductCreateReply.ProtoReflect.Descriptor instead.
func (*BProductCreateReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{6}
}

func (x *BProductCreateReply) GetProduct() *BProduct {
	if x != nil {
		return x.Product
	}
	return nil
}

type BProductCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *Auth     `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Product *BProduct `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
}

func (x *BProductCreateRequest) Reset() {
	*x = BProductCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BProductCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BProductCreateRequest) ProtoMessage() {}

func (x *BProductCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BProductCreateRequest.ProtoReflect.Descriptor instead.
func (*BProductCreateRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{7}
}

func (x *BProductCreateRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BProductCreateRequest) GetProduct() *BProduct {
	if x != nil {
		return x.Product
	}
	return nil
}

type BProductFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	File    string `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Active  bool   `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	Updated string `protobuf:"bytes,5,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *BProductFile) Reset() {
	*x = BProductFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BProductFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BProductFile) ProtoMessage() {}

func (x *BProductFile) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BProductFile.ProtoReflect.Descriptor instead.
func (*BProductFile) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{8}
}

func (x *BProductFile) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BProductFile) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *BProductFile) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BProductFile) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *BProductFile) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

type BSellerCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company *Company `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
	Shops   []string `protobuf:"bytes,2,rep,name=shops,proto3" json:"shops,omitempty"`
}

func (x *BSellerCompany) Reset() {
	*x = BSellerCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerCompany) ProtoMessage() {}

func (x *BSellerCompany) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerCompany.ProtoReflect.Descriptor instead.
func (*BSellerCompany) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{9}
}

func (x *BSellerCompany) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *BSellerCompany) GetShops() []string {
	if x != nil {
		return x.Shops
	}
	return nil
}

type BSellerCompanies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Companies []*BSellerCompany `protobuf:"bytes,2,rep,name=companies,proto3" json:"companies,omitempty"`
}

func (x *BSellerCompanies) Reset() {
	*x = BSellerCompanies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerCompanies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerCompanies) ProtoMessage() {}

func (x *BSellerCompanies) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerCompanies.ProtoReflect.Descriptor instead.
func (*BSellerCompanies) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{10}
}

func (x *BSellerCompanies) GetCompanies() []*BSellerCompany {
	if x != nil {
		return x.Companies
	}
	return nil
}

type BSeller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64             `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Comment       string            `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Person        string            `protobuf:"bytes,4,opt,name=person,proto3" json:"person,omitempty"`
	Phone         string            `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Email         string            `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	CompaniesLink []*BSellerCompany `protobuf:"bytes,7,rep,name=companiesLink,proto3" json:"companiesLink,omitempty"`
	Shops         []string          `protobuf:"bytes,8,rep,name=shops,proto3" json:"shops,omitempty"`
}

func (x *BSeller) Reset() {
	*x = BSeller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSeller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSeller) ProtoMessage() {}

func (x *BSeller) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSeller.ProtoReflect.Descriptor instead.
func (*BSeller) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{11}
}

func (x *BSeller) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BSeller) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BSeller) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BSeller) GetPerson() string {
	if x != nil {
		return x.Person
	}
	return ""
}

func (x *BSeller) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *BSeller) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BSeller) GetCompaniesLink() []*BSellerCompany {
	if x != nil {
		return x.CompaniesLink
	}
	return nil
}

func (x *BSeller) GetShops() []string {
	if x != nil {
		return x.Shops
	}
	return nil
}

type BSellerCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *Auth    `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Seller *BSeller `protobuf:"bytes,2,opt,name=seller,proto3" json:"seller,omitempty"`
}

func (x *BSellerCreateRequest) Reset() {
	*x = BSellerCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerCreateRequest) ProtoMessage() {}

func (x *BSellerCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerCreateRequest.ProtoReflect.Descriptor instead.
func (*BSellerCreateRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{12}
}

func (x *BSellerCreateRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BSellerCreateRequest) GetSeller() *BSeller {
	if x != nil {
		return x.Seller
	}
	return nil
}

type BSellers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sellers []*BSeller `protobuf:"bytes,1,rep,name=sellers,proto3" json:"sellers,omitempty"`
}

func (x *BSellers) Reset() {
	*x = BSellers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellers) ProtoMessage() {}

func (x *BSellers) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellers.ProtoReflect.Descriptor instead.
func (*BSellers) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{13}
}

func (x *BSellers) GetSellers() []*BSeller {
	if x != nil {
		return x.Sellers
	}
	return nil
}

type BBrandLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Brand *Brand `protobuf:"bytes,2,opt,name=brand,proto3" json:"brand,omitempty"`
}

func (x *BBrandLink) Reset() {
	*x = BBrandLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BBrandLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BBrandLink) ProtoMessage() {}

func (x *BBrandLink) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BBrandLink.ProtoReflect.Descriptor instead.
func (*BBrandLink) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{14}
}

func (x *BBrandLink) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BBrandLink) GetBrand() *Brand {
	if x != nil {
		return x.Brand
	}
	return nil
}

type BrandLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *BrandLinkRequest) Reset() {
	*x = BrandLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandLinkRequest) ProtoMessage() {}

func (x *BrandLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandLinkRequest.ProtoReflect.Descriptor instead.
func (*BrandLinkRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{15}
}

func (x *BrandLinkRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type BUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	ProductID int64  `protobuf:"varint,2,opt,name=productID,proto3" json:"productID,omitempty"`
	Chunk     []byte `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Preview   bool   `protobuf:"varint,4,opt,name=preview,proto3" json:"preview,omitempty"`
	Filename  string `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename,omitempty"`
	Type      string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *BUploadRequest) Reset() {
	*x = BUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BUploadRequest) ProtoMessage() {}

func (x *BUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BUploadRequest.ProtoReflect.Descriptor instead.
func (*BUploadRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{16}
}

func (x *BUploadRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BUploadRequest) GetProductID() int64 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

func (x *BUploadRequest) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *BUploadRequest) GetPreview() bool {
	if x != nil {
		return x.Preview
	}
	return false
}

func (x *BUploadRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *BUploadRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type BFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Product  int64  `protobuf:"varint,2,opt,name=product,proto3" json:"product,omitempty"`
	Preview  bool   `protobuf:"varint,3,opt,name=preview,proto3" json:"preview,omitempty"`
}

func (x *BFileRequest) Reset() {
	*x = BFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BFileRequest) ProtoMessage() {}

func (x *BFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BFileRequest.ProtoReflect.Descriptor instead.
func (*BFileRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{17}
}

func (x *BFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *BFileRequest) GetProduct() int64 {
	if x != nil {
		return x.Product
	}
	return 0
}

func (x *BFileRequest) GetPreview() bool {
	if x != nil {
		return x.Preview
	}
	return false
}

type BSellerLinks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Companies []*Company `protobuf:"bytes,1,rep,name=companies,proto3" json:"companies,omitempty"`
}

func (x *BSellerLinks) Reset() {
	*x = BSellerLinks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerLinks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerLinks) ProtoMessage() {}

func (x *BSellerLinks) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerLinks.ProtoReflect.Descriptor instead.
func (*BSellerLinks) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{18}
}

func (x *BSellerLinks) GetCompanies() []*Company {
	if x != nil {
		return x.Companies
	}
	return nil
}

type BSCProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	SellerID  int64 `protobuf:"varint,2,opt,name=sellerID,proto3" json:"sellerID,omitempty"`
	CompanyID int64 `protobuf:"varint,3,opt,name=companyID,proto3" json:"companyID,omitempty"`
}

func (x *BSCProductsRequest) Reset() {
	*x = BSCProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSCProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSCProductsRequest) ProtoMessage() {}

func (x *BSCProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSCProductsRequest.ProtoReflect.Descriptor instead.
func (*BSCProductsRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{19}
}

func (x *BSCProductsRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BSCProductsRequest) GetSellerID() int64 {
	if x != nil {
		return x.SellerID
	}
	return 0
}

func (x *BSCProductsRequest) GetCompanyID() int64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

type BSCProductLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BProductID int64 `protobuf:"varint,2,opt,name=BProductID,proto3" json:"BProductID,omitempty"`
}

func (x *BSCProductLink) Reset() {
	*x = BSCProductLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSCProductLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSCProductLink) ProtoMessage() {}

func (x *BSCProductLink) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSCProductLink.ProtoReflect.Descriptor instead.
func (*BSCProductLink) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{20}
}

func (x *BSCProductLink) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BSCProductLink) GetBProductID() int64 {
	if x != nil {
		return x.BProductID
	}
	return 0
}

type BSCProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product *Product           `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
	Link    *BSCProductLink    `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Urls    []*ProductShopUrls `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *BSCProduct) Reset() {
	*x = BSCProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSCProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSCProduct) ProtoMessage() {}

func (x *BSCProduct) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSCProduct.ProtoReflect.Descriptor instead.
func (*BSCProduct) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{21}
}

func (x *BSCProduct) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *BSCProduct) GetLink() *BSCProductLink {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *BSCProduct) GetUrls() []*ProductShopUrls {
	if x != nil {
		return x.Urls
	}
	return nil
}

type BSCProductsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products []*BSCProduct `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *BSCProductsReply) Reset() {
	*x = BSCProductsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSCProductsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSCProductsReply) ProtoMessage() {}

func (x *BSCProductsReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSCProductsReply.ProtoReflect.Descriptor instead.
func (*BSCProductsReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{22}
}

func (x *BSCProductsReply) GetProducts() []*BSCProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

type BSCProductLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth             *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	SellerID         int64 `protobuf:"varint,2,opt,name=sellerID,proto3" json:"sellerID,omitempty"`
	CerasusCompanyID int64 `protobuf:"varint,3,opt,name=CerasusCompanyID,proto3" json:"CerasusCompanyID,omitempty"`
	BProductLinkID   int64 `protobuf:"varint,4,opt,name=BProductLinkID,proto3" json:"BProductLinkID,omitempty"`
	ProductID        int64 `protobuf:"varint,5,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	BProductID       int64 `protobuf:"varint,6,opt,name=BProductID,proto3" json:"BProductID,omitempty"`
}

func (x *BSCProductLinkRequest) Reset() {
	*x = BSCProductLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSCProductLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSCProductLinkRequest) ProtoMessage() {}

func (x *BSCProductLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSCProductLinkRequest.ProtoReflect.Descriptor instead.
func (*BSCProductLinkRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{23}
}

func (x *BSCProductLinkRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BSCProductLinkRequest) GetSellerID() int64 {
	if x != nil {
		return x.SellerID
	}
	return 0
}

func (x *BSCProductLinkRequest) GetCerasusCompanyID() int64 {
	if x != nil {
		return x.CerasusCompanyID
	}
	return 0
}

func (x *BSCProductLinkRequest) GetBProductLinkID() int64 {
	if x != nil {
		return x.BProductLinkID
	}
	return 0
}

func (x *BSCProductLinkRequest) GetProductID() int64 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

func (x *BSCProductLinkRequest) GetBProductID() int64 {
	if x != nil {
		return x.BProductID
	}
	return 0
}

type GetSellerUnlinkedCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seller  *BSeller `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	Company *Company `protobuf:"bytes,2,opt,name=company,proto3" json:"company,omitempty"`
	Count   int64    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetSellerUnlinkedCount) Reset() {
	*x = GetSellerUnlinkedCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellerUnlinkedCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellerUnlinkedCount) ProtoMessage() {}

func (x *GetSellerUnlinkedCount) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellerUnlinkedCount.ProtoReflect.Descriptor instead.
func (*GetSellerUnlinkedCount) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{24}
}

func (x *GetSellerUnlinkedCount) GetSeller() *BSeller {
	if x != nil {
		return x.Seller
	}
	return nil
}

func (x *GetSellerUnlinkedCount) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *GetSellerUnlinkedCount) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SellerUnlinkedCountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnlinkedData []*GetSellerUnlinkedCount `protobuf:"bytes,1,rep,name=unlinkedData,proto3" json:"unlinkedData,omitempty"`
}

func (x *SellerUnlinkedCountReply) Reset() {
	*x = SellerUnlinkedCountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerUnlinkedCountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerUnlinkedCountReply) ProtoMessage() {}

func (x *SellerUnlinkedCountReply) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerUnlinkedCountReply.ProtoReflect.Descriptor instead.
func (*SellerUnlinkedCountReply) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{25}
}

func (x *SellerUnlinkedCountReply) GetUnlinkedData() []*GetSellerUnlinkedCount {
	if x != nil {
		return x.UnlinkedData
	}
	return nil
}

type ConnectShopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth             *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	SellerID         int64  `protobuf:"varint,2,opt,name=sellerID,proto3" json:"sellerID,omitempty"`
	CerasusCompanyID int64  `protobuf:"varint,3,opt,name=cerasusCompanyID,proto3" json:"cerasusCompanyID,omitempty"`
	Shop             string `protobuf:"bytes,4,opt,name=shop,proto3" json:"shop,omitempty"`
	Connect          bool   `protobuf:"varint,5,opt,name=connect,proto3" json:"connect,omitempty"`
}

func (x *ConnectShopRequest) Reset() {
	*x = ConnectShopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectShopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectShopRequest) ProtoMessage() {}

func (x *ConnectShopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectShopRequest.ProtoReflect.Descriptor instead.
func (*ConnectShopRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{26}
}

func (x *ConnectShopRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ConnectShopRequest) GetSellerID() int64 {
	if x != nil {
		return x.SellerID
	}
	return 0
}

func (x *ConnectShopRequest) GetCerasusCompanyID() int64 {
	if x != nil {
		return x.CerasusCompanyID
	}
	return 0
}

func (x *ConnectShopRequest) GetShop() string {
	if x != nil {
		return x.Shop
	}
	return ""
}

func (x *ConnectShopRequest) GetConnect() bool {
	if x != nil {
		return x.Connect
	}
	return false
}

var File_brand_proto protoreflect.FileDescriptor

var file_brand_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x1a, 0x0d, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x0e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x13, 0x42, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0xfc, 0x01, 0x0a, 0x08, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x49, 0x0a, 0x10, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22,
	0x3f, 0x0a, 0x0a, 0x42, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x74, 0x0a, 0x0e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x13, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x67, 0x0a, 0x15, 0x42, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x22, 0x78, 0x0a, 0x0c, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x52, 0x0a,
	0x0e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x68, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x70,
	0x73, 0x22, 0x49, 0x0a, 0x10, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x22, 0xe0, 0x01, 0x0a,
	0x07, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x6f,
	0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x70, 0x73, 0x22,
	0x63, 0x0a, 0x14, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x22, 0x36, 0x0a, 0x08, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x12, 0x2a, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x42, 0x0a, 0x0a,
	0x42, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x05, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x22, 0x22, 0x0a, 0x10, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x44, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x42, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x0c, 0x42, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x3e, 0x0a, 0x0c, 0x42, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x12, 0x42, 0x53, 0x43, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22, 0x40, 0x0a, 0x0e, 0x42,
	0x53, 0x43, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x93, 0x01,
	0x0a, 0x0a, 0x42, 0x53, 0x43, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x42, 0x53, 0x43, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x72, 0x6c, 0x73, 0x52, 0x04, 0x75,
	0x72, 0x6c, 0x73, 0x22, 0x43, 0x0a, 0x10, 0x42, 0x53, 0x43, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x43, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x15, 0x42, 0x53, 0x43,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x22, 0x84, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x18, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x75, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x75,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xad, 0x01, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x68, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x68, 0x6f,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x32, 0x85, 0x0b, 0x0a, 0x06,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x43, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x1a, 0x0e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x0d, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x17, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x16, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x1a, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x42, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x42, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x42, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x42, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x6e, 0x6b, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x12, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x42, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x42, 0x53, 0x43, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53,
	0x43, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x1e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x43, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x21,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x55,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x42, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x68, 0x6f, 0x70,
	0x12, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x6e, 0x73, 0x61, 0x6e, 0x79, 0x63, 0x68, 0x2f, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brand_proto_rawDescOnce sync.Once
	file_brand_proto_rawDescData = file_brand_proto_rawDesc
)

func file_brand_proto_rawDescGZIP() []byte {
	file_brand_proto_rawDescOnce.Do(func() {
		file_brand_proto_rawDescData = protoimpl.X.CompressGZIP(file_brand_proto_rawDescData)
	})
	return file_brand_proto_rawDescData
}

var file_brand_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_brand_proto_goTypes = []interface{}{
	(*BProductPrices)(nil),           // 0: cerasus.BProductPrices
	(*BProductCreatePrice)(nil),      // 1: cerasus.BProductCreatePrice
	(*BProduct)(nil),                 // 2: cerasus.BProduct
	(*BProductsRequest)(nil),         // 3: cerasus.BProductsRequest
	(*BIDRequest)(nil),               // 4: cerasus.BIDRequest
	(*BProductsReply)(nil),           // 5: cerasus.BProductsReply
	(*BProductCreateReply)(nil),      // 6: cerasus.BProductCreateReply
	(*BProductCreateRequest)(nil),    // 7: cerasus.BProductCreateRequest
	(*BProductFile)(nil),             // 8: cerasus.BProductFile
	(*BSellerCompany)(nil),           // 9: cerasus.BSellerCompany
	(*BSellerCompanies)(nil),         // 10: cerasus.BSellerCompanies
	(*BSeller)(nil),                  // 11: cerasus.BSeller
	(*BSellerCreateRequest)(nil),     // 12: cerasus.BSellerCreateRequest
	(*BSellers)(nil),                 // 13: cerasus.BSellers
	(*BBrandLink)(nil),               // 14: cerasus.BBrandLink
	(*BrandLinkRequest)(nil),         // 15: cerasus.BrandLinkRequest
	(*BUploadRequest)(nil),           // 16: cerasus.BUploadRequest
	(*BFileRequest)(nil),             // 17: cerasus.BFileRequest
	(*BSellerLinks)(nil),             // 18: cerasus.BSellerLinks
	(*BSCProductsRequest)(nil),       // 19: cerasus.BSCProductsRequest
	(*BSCProductLink)(nil),           // 20: cerasus.BSCProductLink
	(*BSCProduct)(nil),               // 21: cerasus.BSCProduct
	(*BSCProductsReply)(nil),         // 22: cerasus.BSCProductsReply
	(*BSCProductLinkRequest)(nil),    // 23: cerasus.BSCProductLinkRequest
	(*GetSellerUnlinkedCount)(nil),   // 24: cerasus.GetSellerUnlinkedCount
	(*SellerUnlinkedCountReply)(nil), // 25: cerasus.SellerUnlinkedCountReply
	(*ConnectShopRequest)(nil),       // 26: cerasus.ConnectShopRequest
	(*BProductPrice)(nil),            // 27: cerasus.BProductPrice
	(*Auth)(nil),                     // 28: cerasus.Auth
	(*Pagination)(nil),               // 29: cerasus.Pagination
	(*Company)(nil),                  // 30: cerasus.Company
	(*Brand)(nil),                    // 31: cerasus.Brand
	(*Product)(nil),                  // 32: cerasus.Product
	(*ProductShopUrls)(nil),          // 33: cerasus.ProductShopUrls
	(*PingRequest)(nil),              // 34: cerasus.PingRequest
	(*PingReply)(nil),                // 35: cerasus.PingReply
	(*BoolReply)(nil),                // 36: cerasus.BoolReply
	(*ImageReply)(nil),               // 37: cerasus.ImageReply
}
var file_brand_proto_depIdxs = []int32{
	27, // 0: cerasus.BProductPrices.prices:type_name -> cerasus.BProductPrice
	28, // 1: cerasus.BProductCreatePrice.auth:type_name -> cerasus.Auth
	27, // 2: cerasus.BProduct.price:type_name -> cerasus.BProductPrice
	28, // 3: cerasus.BProductsRequest.auth:type_name -> cerasus.Auth
	28, // 4: cerasus.BIDRequest.auth:type_name -> cerasus.Auth
	2,  // 5: cerasus.BProductsReply.products:type_name -> cerasus.BProduct
	29, // 6: cerasus.BProductsReply.pagination:type_name -> cerasus.Pagination
	2,  // 7: cerasus.BProductCreateReply.product:type_name -> cerasus.BProduct
	28, // 8: cerasus.BProductCreateRequest.auth:type_name -> cerasus.Auth
	2,  // 9: cerasus.BProductCreateRequest.product:type_name -> cerasus.BProduct
	30, // 10: cerasus.BSellerCompany.company:type_name -> cerasus.Company
	9,  // 11: cerasus.BSellerCompanies.companies:type_name -> cerasus.BSellerCompany
	9,  // 12: cerasus.BSeller.companiesLink:type_name -> cerasus.BSellerCompany
	28, // 13: cerasus.BSellerCreateRequest.auth:type_name -> cerasus.Auth
	11, // 14: cerasus.BSellerCreateRequest.seller:type_name -> cerasus.BSeller
	11, // 15: cerasus.BSellers.sellers:type_name -> cerasus.BSeller
	31, // 16: cerasus.BBrandLink.brand:type_name -> cerasus.Brand
	28, // 17: cerasus.BUploadRequest.auth:type_name -> cerasus.Auth
	30, // 18: cerasus.BSellerLinks.companies:type_name -> cerasus.Company
	28, // 19: cerasus.BSCProductsRequest.auth:type_name -> cerasus.Auth
	32, // 20: cerasus.BSCProduct.product:type_name -> cerasus.Product
	20, // 21: cerasus.BSCProduct.link:type_name -> cerasus.BSCProductLink
	33, // 22: cerasus.BSCProduct.urls:type_name -> cerasus.ProductShopUrls
	21, // 23: cerasus.BSCProductsReply.products:type_name -> cerasus.BSCProduct
	28, // 24: cerasus.BSCProductLinkRequest.auth:type_name -> cerasus.Auth
	11, // 25: cerasus.GetSellerUnlinkedCount.seller:type_name -> cerasus.BSeller
	30, // 26: cerasus.GetSellerUnlinkedCount.company:type_name -> cerasus.Company
	24, // 27: cerasus.SellerUnlinkedCountReply.unlinkedData:type_name -> cerasus.GetSellerUnlinkedCount
	28, // 28: cerasus.ConnectShopRequest.auth:type_name -> cerasus.Auth
	34, // 29: cerasus.Brands.Ping:input_type -> cerasus.PingRequest
	28, // 30: cerasus.Brands.GetCerasusBrandData:input_type -> cerasus.Auth
	3,  // 31: cerasus.Brands.GetBProducts:input_type -> cerasus.BProductsRequest
	4,  // 32: cerasus.Brands.GetBProduct:input_type -> cerasus.BIDRequest
	7,  // 33: cerasus.Brands.CreateBProducts:input_type -> cerasus.BProductCreateRequest
	7,  // 34: cerasus.Brands.UpdateBProducts:input_type -> cerasus.BProductCreateRequest
	28, // 35: cerasus.Brands.GetBPrices:input_type -> cerasus.Auth
	4,  // 36: cerasus.Brands.GetBPrice:input_type -> cerasus.BIDRequest
	1,  // 37: cerasus.Brands.SetBPrice:input_type -> cerasus.BProductCreatePrice
	28, // 38: cerasus.Brands.GetBSellers:input_type -> cerasus.Auth
	4,  // 39: cerasus.Brands.GetBSeller:input_type -> cerasus.BIDRequest
	12, // 40: cerasus.Brands.CreateBSeller:input_type -> cerasus.BSellerCreateRequest
	12, // 41: cerasus.Brands.UpdateBSeller:input_type -> cerasus.BSellerCreateRequest
	16, // 42: cerasus.Brands.UploadBFile:input_type -> cerasus.BUploadRequest
	17, // 43: cerasus.Brands.GetBFile:input_type -> cerasus.BFileRequest
	15, // 44: cerasus.Brands.GetBrandLink:input_type -> cerasus.BrandLinkRequest
	4,  // 45: cerasus.Brands.GetSellerLinked:input_type -> cerasus.BIDRequest
	19, // 46: cerasus.Brands.GetSellerCompanyProducts:input_type -> cerasus.BSCProductsRequest
	23, // 47: cerasus.Brands.SetSellerCompanyProductLink:input_type -> cerasus.BSCProductLinkRequest
	28, // 48: cerasus.Brands.GetSellerUnlinkedCount:input_type -> cerasus.Auth
	26, // 49: cerasus.Brands.ConnectBSellerCompanyShop:input_type -> cerasus.ConnectShopRequest
	35, // 50: cerasus.Brands.Ping:output_type -> cerasus.PingReply
	31, // 51: cerasus.Brands.GetCerasusBrandData:output_type -> cerasus.Brand
	5,  // 52: cerasus.Brands.GetBProducts:output_type -> cerasus.BProductsReply
	2,  // 53: cerasus.Brands.GetBProduct:output_type -> cerasus.BProduct
	6,  // 54: cerasus.Brands.CreateBProducts:output_type -> cerasus.BProductCreateReply
	36, // 55: cerasus.Brands.UpdateBProducts:output_type -> cerasus.BoolReply
	0,  // 56: cerasus.Brands.GetBPrices:output_type -> cerasus.BProductPrices
	27, // 57: cerasus.Brands.GetBPrice:output_type -> cerasus.BProductPrice
	27, // 58: cerasus.Brands.SetBPrice:output_type -> cerasus.BProductPrice
	13, // 59: cerasus.Brands.GetBSellers:output_type -> cerasus.BSellers
	11, // 60: cerasus.Brands.GetBSeller:output_type -> cerasus.BSeller
	11, // 61: cerasus.Brands.CreateBSeller:output_type -> cerasus.BSeller
	36, // 62: cerasus.Brands.UpdateBSeller:output_type -> cerasus.BoolReply
	37, // 63: cerasus.Brands.UploadBFile:output_type -> cerasus.ImageReply
	37, // 64: cerasus.Brands.GetBFile:output_type -> cerasus.ImageReply
	14, // 65: cerasus.Brands.GetBrandLink:output_type -> cerasus.BBrandLink
	10, // 66: cerasus.Brands.GetSellerLinked:output_type -> cerasus.BSellerCompanies
	22, // 67: cerasus.Brands.GetSellerCompanyProducts:output_type -> cerasus.BSCProductsReply
	36, // 68: cerasus.Brands.SetSellerCompanyProductLink:output_type -> cerasus.BoolReply
	25, // 69: cerasus.Brands.GetSellerUnlinkedCount:output_type -> cerasus.SellerUnlinkedCountReply
	36, // 70: cerasus.Brands.ConnectBSellerCompanyShop:output_type -> cerasus.BoolReply
	50, // [50:71] is the sub-list for method output_type
	29, // [29:50] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_brand_proto_init() }
func file_brand_proto_init() {
	if File_brand_proto != nil {
		return
	}
	file_cerasus_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_brand_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BProductPrices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BProductCreatePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BProductsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BProductCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BProductCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BProductFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerCompanies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSeller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BBrandLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerLinks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSCProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSCProductLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSCProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSCProductsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSCProductLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellerUnlinkedCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerUnlinkedCountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectShopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brand_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brand_proto_goTypes,
		DependencyIndexes: file_brand_proto_depIdxs,
		MessageInfos:      file_brand_proto_msgTypes,
	}.Build()
	File_brand_proto = out.File
	file_brand_proto_rawDesc = nil
	file_brand_proto_goTypes = nil
	file_brand_proto_depIdxs = nil
}
