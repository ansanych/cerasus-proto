// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: brand.proto

package cerasus_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DumpingListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth       *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	View       bool  `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	BSellerID  int64 `protobuf:"varint,3,opt,name=BSellerID,proto3" json:"BSellerID,omitempty"`
	BProductID int64 `protobuf:"varint,4,opt,name=BProductID,proto3" json:"BProductID,omitempty"`
	Page       int64 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *DumpingListRequest) Reset() {
	*x = DumpingListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingListRequest) ProtoMessage() {}

func (x *DumpingListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingListRequest.ProtoReflect.Descriptor instead.
func (*DumpingListRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{0}
}

func (x *DumpingListRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *DumpingListRequest) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

func (x *DumpingListRequest) GetBSellerID() int64 {
	if x != nil {
		return x.BSellerID
	}
	return 0
}

func (x *DumpingListRequest) GetBProductID() int64 {
	if x != nil {
		return x.BProductID
	}
	return 0
}

func (x *DumpingListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type DumpingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           int64     `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BSeller      *BSeller  `protobuf:"bytes,2,opt,name=b_seller,json=bSeller,proto3" json:"b_seller,omitempty"`
	BProduct     *BProduct `protobuf:"bytes,3,opt,name=b_product,json=bProduct,proto3" json:"b_product,omitempty"`
	View         bool      `protobuf:"varint,4,opt,name=view,proto3" json:"view,omitempty"`
	ShopCode     string    `protobuf:"bytes,5,opt,name=shopCode,proto3" json:"shopCode,omitempty"`
	Url          string    `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	ProductPrice int64     `protobuf:"varint,7,opt,name=productPrice,proto3" json:"productPrice,omitempty"`
	ParsePrice   int64     `protobuf:"varint,8,opt,name=parsePrice,proto3" json:"parsePrice,omitempty"`
	Update       string    `protobuf:"bytes,9,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *DumpingData) Reset() {
	*x = DumpingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingData) ProtoMessage() {}

func (x *DumpingData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingData.ProtoReflect.Descriptor instead.
func (*DumpingData) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{1}
}

func (x *DumpingData) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DumpingData) GetBSeller() *BSeller {
	if x != nil {
		return x.BSeller
	}
	return nil
}

func (x *DumpingData) GetBProduct() *BProduct {
	if x != nil {
		return x.BProduct
	}
	return nil
}

func (x *DumpingData) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

func (x *DumpingData) GetShopCode() string {
	if x != nil {
		return x.ShopCode
	}
	return ""
}

func (x *DumpingData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DumpingData) GetProductPrice() int64 {
	if x != nil {
		return x.ProductPrice
	}
	return 0
}

func (x *DumpingData) GetParsePrice() int64 {
	if x != nil {
		return x.ParsePrice
	}
	return 0
}

func (x *DumpingData) GetUpdate() string {
	if x != nil {
		return x.Update
	}
	return ""
}

type DumpingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*DumpingData      `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Request    *DumpingListRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Pagination *Pagination         `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *DumpingList) Reset() {
	*x = DumpingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingList) ProtoMessage() {}

func (x *DumpingList) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingList.ProtoReflect.Descriptor instead.
func (*DumpingList) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{2}
}

func (x *DumpingList) GetList() []*DumpingData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *DumpingList) GetRequest() *DumpingListRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *DumpingList) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DumpingUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *Auth        `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Data *DumpingData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DumpingUpdate) Reset() {
	*x = DumpingUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpingUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpingUpdate) ProtoMessage() {}

func (x *DumpingUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpingUpdate.ProtoReflect.Descriptor instead.
func (*DumpingUpdate) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{3}
}

func (x *DumpingUpdate) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *DumpingUpdate) GetData() *DumpingData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Article string `protobuf:"bytes,3,opt,name=article,proto3" json:"article,omitempty"`
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	Preview string `protobuf:"bytes,5,opt,name=preview,proto3" json:"preview,omitempty"`
	Active  bool   `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	Updated string `protobuf:"bytes,7,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *BProduct) Reset() {
	*x = BProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BProduct) ProtoMessage() {}

func (x *BProduct) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BProduct.ProtoReflect.Descriptor instead.
func (*BProduct) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{4}
}

func (x *BProduct) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BProduct) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BProduct) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *BProduct) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BProduct) GetPreview() string {
	if x != nil {
		return x.Preview
	}
	return ""
}

func (x *BProduct) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *BProduct) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

type BProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BProducts []*BProduct `protobuf:"bytes,1,rep,name=b_products,json=bProducts,proto3" json:"b_products,omitempty"`
}

func (x *BProducts) Reset() {
	*x = BProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BProducts) ProtoMessage() {}

func (x *BProducts) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BProducts.ProtoReflect.Descriptor instead.
func (*BProducts) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{5}
}

func (x *BProducts) GetBProducts() []*BProduct {
	if x != nil {
		return x.BProducts
	}
	return nil
}

type BProductUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *Auth     `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	BProduct *BProduct `protobuf:"bytes,2,opt,name=b_product,json=bProduct,proto3" json:"b_product,omitempty"`
}

func (x *BProductUpsert) Reset() {
	*x = BProductUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BProductUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BProductUpsert) ProtoMessage() {}

func (x *BProductUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BProductUpsert.ProtoReflect.Descriptor instead.
func (*BProductUpsert) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{6}
}

func (x *BProductUpsert) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BProductUpsert) GetBProduct() *BProduct {
	if x != nil {
		return x.BProduct
	}
	return nil
}

type BFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename   string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	BProductID int64  `protobuf:"varint,2,opt,name=b_productID,json=bProductID,proto3" json:"b_productID,omitempty"`
}

func (x *BFileRequest) Reset() {
	*x = BFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BFileRequest) ProtoMessage() {}

func (x *BFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BFileRequest.ProtoReflect.Descriptor instead.
func (*BFileRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{7}
}

func (x *BFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *BFileRequest) GetBProductID() int64 {
	if x != nil {
		return x.BProductID
	}
	return 0
}

type BUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth       *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	BProductID int64  `protobuf:"varint,2,opt,name=b_productID,json=bProductID,proto3" json:"b_productID,omitempty"`
	Chunk      []byte `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Preview    bool   `protobuf:"varint,4,opt,name=preview,proto3" json:"preview,omitempty"`
	Filename   string `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename,omitempty"`
	Type       string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *BUploadRequest) Reset() {
	*x = BUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BUploadRequest) ProtoMessage() {}

func (x *BUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BUploadRequest.ProtoReflect.Descriptor instead.
func (*BUploadRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{8}
}

func (x *BUploadRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BUploadRequest) GetBProductID() int64 {
	if x != nil {
		return x.BProductID
	}
	return 0
}

func (x *BUploadRequest) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *BUploadRequest) GetPreview() bool {
	if x != nil {
		return x.Preview
	}
	return false
}

func (x *BUploadRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *BUploadRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type BPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BProductID int64  `protobuf:"varint,2,opt,name=b_productID,json=bProductID,proto3" json:"b_productID,omitempty"`
	Value      int64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Created    string `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *BPrice) Reset() {
	*x = BPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPrice) ProtoMessage() {}

func (x *BPrice) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPrice.ProtoReflect.Descriptor instead.
func (*BPrice) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{9}
}

func (x *BPrice) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BPrice) GetBProductID() int64 {
	if x != nil {
		return x.BProductID
	}
	return 0
}

func (x *BPrice) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BPrice) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

type BPrices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BPrices []*BPrice `protobuf:"bytes,1,rep,name=b_prices,json=bPrices,proto3" json:"b_prices,omitempty"`
}

func (x *BPrices) Reset() {
	*x = BPrices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPrices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPrices) ProtoMessage() {}

func (x *BPrices) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPrices.ProtoReflect.Descriptor instead.
func (*BPrices) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{10}
}

func (x *BPrices) GetBPrices() []*BPrice {
	if x != nil {
		return x.BPrices
	}
	return nil
}

type BPriceUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *Auth   `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	BPrice *BPrice `protobuf:"bytes,2,opt,name=b_price,json=bPrice,proto3" json:"b_price,omitempty"`
}

func (x *BPriceUpsert) Reset() {
	*x = BPriceUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BPriceUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BPriceUpsert) ProtoMessage() {}

func (x *BPriceUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BPriceUpsert.ProtoReflect.Descriptor instead.
func (*BPriceUpsert) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{11}
}

func (x *BPriceUpsert) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BPriceUpsert) GetBPrice() *BPrice {
	if x != nil {
		return x.BPrice
	}
	return nil
}

type BSeller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Person  string `protobuf:"bytes,4,opt,name=person,proto3" json:"person,omitempty"`
	Phone   string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Email   string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *BSeller) Reset() {
	*x = BSeller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSeller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSeller) ProtoMessage() {}

func (x *BSeller) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSeller.ProtoReflect.Descriptor instead.
func (*BSeller) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{12}
}

func (x *BSeller) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BSeller) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BSeller) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BSeller) GetPerson() string {
	if x != nil {
		return x.Person
	}
	return ""
}

func (x *BSeller) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *BSeller) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type BSellerUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *Auth    `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	BSeller *BSeller `protobuf:"bytes,2,opt,name=b_seller,json=bSeller,proto3" json:"b_seller,omitempty"`
}

func (x *BSellerUpsert) Reset() {
	*x = BSellerUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerUpsert) ProtoMessage() {}

func (x *BSellerUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerUpsert.ProtoReflect.Descriptor instead.
func (*BSellerUpsert) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{13}
}

func (x *BSellerUpsert) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BSellerUpsert) GetBSeller() *BSeller {
	if x != nil {
		return x.BSeller
	}
	return nil
}

type BSellers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BSellers []*BSeller `protobuf:"bytes,1,rep,name=b_sellers,json=bSellers,proto3" json:"b_sellers,omitempty"`
}

func (x *BSellers) Reset() {
	*x = BSellers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellers) ProtoMessage() {}

func (x *BSellers) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellers.ProtoReflect.Descriptor instead.
func (*BSellers) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{14}
}

func (x *BSellers) GetBSellers() []*BSeller {
	if x != nil {
		return x.BSellers
	}
	return nil
}

type BSellerCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	BSellerID int64 `protobuf:"varint,2,opt,name=b_sellerID,json=bSellerID,proto3" json:"b_sellerID,omitempty"`
	CompanyID int64 `protobuf:"varint,3,opt,name=companyID,proto3" json:"companyID,omitempty"`
}

func (x *BSellerCompanyRequest) Reset() {
	*x = BSellerCompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerCompanyRequest) ProtoMessage() {}

func (x *BSellerCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerCompanyRequest.ProtoReflect.Descriptor instead.
func (*BSellerCompanyRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{15}
}

func (x *BSellerCompanyRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BSellerCompanyRequest) GetBSellerID() int64 {
	if x != nil {
		return x.BSellerID
	}
	return 0
}

func (x *BSellerCompanyRequest) GetCompanyID() int64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

type BSellerCompanyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Company *Company `protobuf:"bytes,2,opt,name=company,proto3" json:"company,omitempty"`
}

func (x *BSellerCompanyData) Reset() {
	*x = BSellerCompanyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerCompanyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerCompanyData) ProtoMessage() {}

func (x *BSellerCompanyData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerCompanyData.ProtoReflect.Descriptor instead.
func (*BSellerCompanyData) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{16}
}

func (x *BSellerCompanyData) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BSellerCompanyData) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

type BSellerCompaniesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*BSellerCompanyData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BSellerCompaniesData) Reset() {
	*x = BSellerCompaniesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerCompaniesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerCompaniesData) ProtoMessage() {}

func (x *BSellerCompaniesData) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerCompaniesData.ProtoReflect.Descriptor instead.
func (*BSellerCompaniesData) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{17}
}

func (x *BSellerCompaniesData) GetData() []*BSellerCompanyData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BSellerCompanyProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	BSellerID int64 `protobuf:"varint,2,opt,name=b_sellerID,json=bSellerID,proto3" json:"b_sellerID,omitempty"`
	CompanyID int64 `protobuf:"varint,3,opt,name=companyID,proto3" json:"companyID,omitempty"`
	ID        int64 `protobuf:"varint,4,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *BSellerCompanyProductRequest) Reset() {
	*x = BSellerCompanyProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerCompanyProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerCompanyProductRequest) ProtoMessage() {}

func (x *BSellerCompanyProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerCompanyProductRequest.ProtoReflect.Descriptor instead.
func (*BSellerCompanyProductRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{18}
}

func (x *BSellerCompanyProductRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BSellerCompanyProductRequest) GetBSellerID() int64 {
	if x != nil {
		return x.BSellerID
	}
	return 0
}

func (x *BSellerCompanyProductRequest) GetCompanyID() int64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *BSellerCompanyProductRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type CompanyProductShopUrlAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Seller               *BSeller               `protobuf:"bytes,2,opt,name=seller,proto3" json:"seller,omitempty"`
	SellerCompany        *BSellerCompanyData    `protobuf:"bytes,3,opt,name=sellerCompany,proto3" json:"sellerCompany,omitempty"`
	SellerCompanyProduct *BSellerCompanyProduct `protobuf:"bytes,4,opt,name=sellerCompanyProduct,proto3" json:"sellerCompanyProduct,omitempty"`
	Alert                string                 `protobuf:"bytes,5,opt,name=alert,proto3" json:"alert,omitempty"`
	Created              string                 `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *CompanyProductShopUrlAlert) Reset() {
	*x = CompanyProductShopUrlAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyProductShopUrlAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyProductShopUrlAlert) ProtoMessage() {}

func (x *CompanyProductShopUrlAlert) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyProductShopUrlAlert.ProtoReflect.Descriptor instead.
func (*CompanyProductShopUrlAlert) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{19}
}

func (x *CompanyProductShopUrlAlert) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *CompanyProductShopUrlAlert) GetSeller() *BSeller {
	if x != nil {
		return x.Seller
	}
	return nil
}

func (x *CompanyProductShopUrlAlert) GetSellerCompany() *BSellerCompanyData {
	if x != nil {
		return x.SellerCompany
	}
	return nil
}

func (x *CompanyProductShopUrlAlert) GetSellerCompanyProduct() *BSellerCompanyProduct {
	if x != nil {
		return x.SellerCompanyProduct
	}
	return nil
}

func (x *CompanyProductShopUrlAlert) GetAlert() string {
	if x != nil {
		return x.Alert
	}
	return ""
}

func (x *CompanyProductShopUrlAlert) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

type CompanyProductShopUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Url   string                      `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Alert *CompanyProductShopUrlAlert `protobuf:"bytes,3,opt,name=alert,proto3" json:"alert,omitempty"`
}

func (x *CompanyProductShopUrl) Reset() {
	*x = CompanyProductShopUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyProductShopUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyProductShopUrl) ProtoMessage() {}

func (x *CompanyProductShopUrl) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyProductShopUrl.ProtoReflect.Descriptor instead.
func (*CompanyProductShopUrl) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{20}
}

func (x *CompanyProductShopUrl) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *CompanyProductShopUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CompanyProductShopUrl) GetAlert() *CompanyProductShopUrlAlert {
	if x != nil {
		return x.Alert
	}
	return nil
}

type CompanyProductShopUrls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shop string                   `protobuf:"bytes,1,opt,name=shop,proto3" json:"shop,omitempty"`
	Urls []*CompanyProductShopUrl `protobuf:"bytes,2,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *CompanyProductShopUrls) Reset() {
	*x = CompanyProductShopUrls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyProductShopUrls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyProductShopUrls) ProtoMessage() {}

func (x *CompanyProductShopUrls) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyProductShopUrls.ProtoReflect.Descriptor instead.
func (*CompanyProductShopUrls) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{21}
}

func (x *CompanyProductShopUrls) GetShop() string {
	if x != nil {
		return x.Shop
	}
	return ""
}

func (x *CompanyProductShopUrls) GetUrls() []*CompanyProductShopUrl {
	if x != nil {
		return x.Urls
	}
	return nil
}

type BSellerCompanyProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       int64                     `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Product  *Product                  `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
	BProduct *BProduct                 `protobuf:"bytes,3,opt,name=b_product,json=bProduct,proto3" json:"b_product,omitempty"`
	Urls     []*CompanyProductShopUrls `protobuf:"bytes,4,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *BSellerCompanyProduct) Reset() {
	*x = BSellerCompanyProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerCompanyProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerCompanyProduct) ProtoMessage() {}

func (x *BSellerCompanyProduct) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerCompanyProduct.ProtoReflect.Descriptor instead.
func (*BSellerCompanyProduct) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{22}
}

func (x *BSellerCompanyProduct) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BSellerCompanyProduct) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *BSellerCompanyProduct) GetBProduct() *BProduct {
	if x != nil {
		return x.BProduct
	}
	return nil
}

func (x *BSellerCompanyProduct) GetUrls() []*CompanyProductShopUrls {
	if x != nil {
		return x.Urls
	}
	return nil
}

type BSellerCompanyProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SellerCompanyProducts []*BSellerCompanyProduct `protobuf:"bytes,1,rep,name=seller_company_products,json=sellerCompanyProducts,proto3" json:"seller_company_products,omitempty"`
}

func (x *BSellerCompanyProducts) Reset() {
	*x = BSellerCompanyProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSellerCompanyProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSellerCompanyProducts) ProtoMessage() {}

func (x *BSellerCompanyProducts) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSellerCompanyProducts.ProtoReflect.Descriptor instead.
func (*BSellerCompanyProducts) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{23}
}

func (x *BSellerCompanyProducts) GetSellerCompanyProducts() []*BSellerCompanyProduct {
	if x != nil {
		return x.SellerCompanyProducts
	}
	return nil
}

type BSCPUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *Auth     `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Do        string    `protobuf:"bytes,2,opt,name=do,proto3" json:"do,omitempty"`
	ID        int64     `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
	SellerID  int64     `protobuf:"varint,4,opt,name=sellerID,proto3" json:"sellerID,omitempty"`
	CompanyID int64     `protobuf:"varint,5,opt,name=companyID,proto3" json:"companyID,omitempty"`
	Product   *Product  `protobuf:"bytes,6,opt,name=product,proto3" json:"product,omitempty"`
	BProduct  *BProduct `protobuf:"bytes,7,opt,name=b_product,json=bProduct,proto3" json:"b_product,omitempty"`
}

func (x *BSCPUpdateRequest) Reset() {
	*x = BSCPUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSCPUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSCPUpdateRequest) ProtoMessage() {}

func (x *BSCPUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSCPUpdateRequest.ProtoReflect.Descriptor instead.
func (*BSCPUpdateRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{24}
}

func (x *BSCPUpdateRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BSCPUpdateRequest) GetDo() string {
	if x != nil {
		return x.Do
	}
	return ""
}

func (x *BSCPUpdateRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BSCPUpdateRequest) GetSellerID() int64 {
	if x != nil {
		return x.SellerID
	}
	return 0
}

func (x *BSCPUpdateRequest) GetCompanyID() int64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *BSCPUpdateRequest) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *BSCPUpdateRequest) GetBProduct() *BProduct {
	if x != nil {
		return x.BProduct
	}
	return nil
}

type CreateBSellerNullProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth       *Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	BsellerID  int64 `protobuf:"varint,2,opt,name=BsellerID,proto3" json:"BsellerID,omitempty"`
	BProductID int64 `protobuf:"varint,3,opt,name=BProductID,proto3" json:"BProductID,omitempty"`
}

func (x *CreateBSellerNullProductRequest) Reset() {
	*x = CreateBSellerNullProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBSellerNullProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBSellerNullProductRequest) ProtoMessage() {}

func (x *CreateBSellerNullProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBSellerNullProductRequest.ProtoReflect.Descriptor instead.
func (*CreateBSellerNullProductRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{25}
}

func (x *CreateBSellerNullProductRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *CreateBSellerNullProductRequest) GetBsellerID() int64 {
	if x != nil {
		return x.BsellerID
	}
	return 0
}

func (x *CreateBSellerNullProductRequest) GetBProductID() int64 {
	if x != nil {
		return x.BProductID
	}
	return 0
}

type NullUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth          *Auth  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	NullProductID int64  `protobuf:"varint,2,opt,name=nullProductID,proto3" json:"nullProductID,omitempty"`
	ShopCode      string `protobuf:"bytes,3,opt,name=shopCode,proto3" json:"shopCode,omitempty"`
	Url           string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *NullUrlRequest) Reset() {
	*x = NullUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullUrlRequest) ProtoMessage() {}

func (x *NullUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullUrlRequest.ProtoReflect.Descriptor instead.
func (*NullUrlRequest) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{26}
}

func (x *NullUrlRequest) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *NullUrlRequest) GetNullProductID() int64 {
	if x != nil {
		return x.NullProductID
	}
	return 0
}

func (x *NullUrlRequest) GetShopCode() string {
	if x != nil {
		return x.ShopCode
	}
	return ""
}

func (x *NullUrlRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ID                     int64  `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	SellerID               int64  `protobuf:"varint,3,opt,name=sellerID,proto3" json:"sellerID,omitempty"`
	SellerCompanyID        int64  `protobuf:"varint,4,opt,name=sellerCompanyID,proto3" json:"sellerCompanyID,omitempty"`
	SellerCompanyProductID int64  `protobuf:"varint,5,opt,name=sellerCompanyProductID,proto3" json:"sellerCompanyProductID,omitempty"`
	Message                string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{27}
}

func (x *Alert) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Alert) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Alert) GetSellerID() int64 {
	if x != nil {
		return x.SellerID
	}
	return 0
}

func (x *Alert) GetSellerCompanyID() int64 {
	if x != nil {
		return x.SellerCompanyID
	}
	return 0
}

func (x *Alert) GetSellerCompanyProductID() int64 {
	if x != nil {
		return x.SellerCompanyProductID
	}
	return 0
}

func (x *Alert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Alerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alerts []*Alert `protobuf:"bytes,1,rep,name=alerts,proto3" json:"alerts,omitempty"`
}

func (x *Alerts) Reset() {
	*x = Alerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brand_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alerts) ProtoMessage() {}

func (x *Alerts) ProtoReflect() protoreflect.Message {
	mi := &file_brand_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alerts.ProtoReflect.Descriptor instead.
func (*Alerts) Descriptor() ([]byte, []int) {
	return file_brand_proto_rawDescGZIP(), []int{28}
}

func (x *Alerts) GetAlerts() []*Alert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

var File_brand_proto protoreflect.FileDescriptor

var file_brand_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x1a, 0x0d, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x0b, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x08, 0x62, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x07, 0x62, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x22, 0xa3, 0x01, 0x0a, 0x0b, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x0d, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xb0, 0x01, 0x0a, 0x08, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x3d, 0x0a, 0x09, 0x42, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x09, 0x62, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x63, 0x0a, 0x0e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x09, 0x62,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x08, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x4b, 0x0a, 0x0c, 0x42,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x42, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x69, 0x0a, 0x06, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x35, 0x0a, 0x07, 0x42, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x07, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x73, 0x22, 0x5b, 0x0a, 0x0c, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x07, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x8b,
	0x01, 0x0a, 0x07, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x5f, 0x0a, 0x0d,
	0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x12, 0x2b, 0x0a, 0x08, 0x62, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x07, 0x62, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x39, 0x0a,
	0x08, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x62, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x08,
	0x62, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x77, 0x0a, 0x15, 0x42, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x44, 0x22, 0x50, 0x0a, 0x12, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x22, 0x47, 0x0a, 0x14, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a,
	0x1c, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x9d, 0x02,
	0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x68, 0x6f, 0x70, 0x55, 0x72, 0x6c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x06,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x06,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x52, 0x0a, 0x14, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x74, 0x0a,
	0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x68, 0x6f, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x68, 0x6f, 0x70, 0x55, 0x72, 0x6c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x05, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x22, 0x60, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x68, 0x6f,
	0x70, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x72, 0x6c, 0x52,
	0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x15, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x62,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x08, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x75,
	0x72, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x72, 0x6c, 0x73, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73,
	0x22, 0x70, 0x0a, 0x16, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x17, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x15, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x11, 0x42, 0x53, 0x43, 0x50, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x64,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x2e, 0x0a, 0x09, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x22, 0x82, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x87, 0x01, 0x0a, 0x0e, 0x4e, 0x75, 0x6c, 0x6c, 0x55,
	0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d,
	0x6e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x22, 0xc3, 0x01, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x30, 0x0a, 0x06, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x26, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x32, 0xd4, 0x12, 0x0a, 0x06, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x0e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x1a, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x1a, 0x11, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x15, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x17, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x36, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x14, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x79, 0x49, 0x44, 0x1a, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x0f, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x15, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x1a, 0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x12, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x1a, 0x10, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x31, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12,
	0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x11,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x73, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x1e,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x1e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x12, 0x1e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x25, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x53, 0x43, 0x50, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x28, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x18, 0x53, 0x65, 0x74, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x12, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a,
	0x0f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0d, 0x2e,
	0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x13, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x1a, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44,
	0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70,
	0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42,
	0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e,
	0x73, 0x61, 0x6e, 0x79, 0x63, 0x68, 0x2f, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brand_proto_rawDescOnce sync.Once
	file_brand_proto_rawDescData = file_brand_proto_rawDesc
)

func file_brand_proto_rawDescGZIP() []byte {
	file_brand_proto_rawDescOnce.Do(func() {
		file_brand_proto_rawDescData = protoimpl.X.CompressGZIP(file_brand_proto_rawDescData)
	})
	return file_brand_proto_rawDescData
}

var file_brand_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_brand_proto_goTypes = []interface{}{
	(*DumpingListRequest)(nil),              // 0: cerasus.DumpingListRequest
	(*DumpingData)(nil),                     // 1: cerasus.DumpingData
	(*DumpingList)(nil),                     // 2: cerasus.DumpingList
	(*DumpingUpdate)(nil),                   // 3: cerasus.DumpingUpdate
	(*BProduct)(nil),                        // 4: cerasus.BProduct
	(*BProducts)(nil),                       // 5: cerasus.BProducts
	(*BProductUpsert)(nil),                  // 6: cerasus.BProductUpsert
	(*BFileRequest)(nil),                    // 7: cerasus.BFileRequest
	(*BUploadRequest)(nil),                  // 8: cerasus.BUploadRequest
	(*BPrice)(nil),                          // 9: cerasus.BPrice
	(*BPrices)(nil),                         // 10: cerasus.BPrices
	(*BPriceUpsert)(nil),                    // 11: cerasus.BPriceUpsert
	(*BSeller)(nil),                         // 12: cerasus.BSeller
	(*BSellerUpsert)(nil),                   // 13: cerasus.BSellerUpsert
	(*BSellers)(nil),                        // 14: cerasus.BSellers
	(*BSellerCompanyRequest)(nil),           // 15: cerasus.BSellerCompanyRequest
	(*BSellerCompanyData)(nil),              // 16: cerasus.BSellerCompanyData
	(*BSellerCompaniesData)(nil),            // 17: cerasus.BSellerCompaniesData
	(*BSellerCompanyProductRequest)(nil),    // 18: cerasus.BSellerCompanyProductRequest
	(*CompanyProductShopUrlAlert)(nil),      // 19: cerasus.CompanyProductShopUrlAlert
	(*CompanyProductShopUrl)(nil),           // 20: cerasus.CompanyProductShopUrl
	(*CompanyProductShopUrls)(nil),          // 21: cerasus.CompanyProductShopUrls
	(*BSellerCompanyProduct)(nil),           // 22: cerasus.BSellerCompanyProduct
	(*BSellerCompanyProducts)(nil),          // 23: cerasus.BSellerCompanyProducts
	(*BSCPUpdateRequest)(nil),               // 24: cerasus.BSCPUpdateRequest
	(*CreateBSellerNullProductRequest)(nil), // 25: cerasus.CreateBSellerNullProductRequest
	(*NullUrlRequest)(nil),                  // 26: cerasus.NullUrlRequest
	(*Alert)(nil),                           // 27: cerasus.Alert
	(*Alerts)(nil),                          // 28: cerasus.Alerts
	(*Auth)(nil),                            // 29: cerasus.Auth
	(*Pagination)(nil),                      // 30: cerasus.Pagination
	(*Company)(nil),                         // 31: cerasus.Company
	(*Product)(nil),                         // 32: cerasus.Product
	(*PingRequest)(nil),                     // 33: cerasus.PingRequest
	(*RequestByID)(nil),                     // 34: cerasus.RequestByID
	(*GetPricerItemRequest)(nil),            // 35: cerasus.GetPricerItemRequest
	(*SetPricerItemRequest)(nil),            // 36: cerasus.SetPricerItemRequest
	(*PingReply)(nil),                       // 37: cerasus.PingReply
	(*Brand)(nil),                           // 38: cerasus.Brand
	(*BoolReply)(nil),                       // 39: cerasus.BoolReply
	(*ImageReply)(nil),                      // 40: cerasus.ImageReply
	(*IDRequest)(nil),                       // 41: cerasus.IDRequest
	(*GetPricerItemReply)(nil),              // 42: cerasus.GetPricerItemReply
	(*CountReply)(nil),                      // 43: cerasus.CountReply
}
var file_brand_proto_depIdxs = []int32{
	29, // 0: cerasus.DumpingListRequest.auth:type_name -> cerasus.Auth
	12, // 1: cerasus.DumpingData.b_seller:type_name -> cerasus.BSeller
	4,  // 2: cerasus.DumpingData.b_product:type_name -> cerasus.BProduct
	1,  // 3: cerasus.DumpingList.list:type_name -> cerasus.DumpingData
	0,  // 4: cerasus.DumpingList.request:type_name -> cerasus.DumpingListRequest
	30, // 5: cerasus.DumpingList.pagination:type_name -> cerasus.Pagination
	29, // 6: cerasus.DumpingUpdate.auth:type_name -> cerasus.Auth
	1,  // 7: cerasus.DumpingUpdate.data:type_name -> cerasus.DumpingData
	4,  // 8: cerasus.BProducts.b_products:type_name -> cerasus.BProduct
	29, // 9: cerasus.BProductUpsert.auth:type_name -> cerasus.Auth
	4,  // 10: cerasus.BProductUpsert.b_product:type_name -> cerasus.BProduct
	29, // 11: cerasus.BUploadRequest.auth:type_name -> cerasus.Auth
	9,  // 12: cerasus.BPrices.b_prices:type_name -> cerasus.BPrice
	29, // 13: cerasus.BPriceUpsert.auth:type_name -> cerasus.Auth
	9,  // 14: cerasus.BPriceUpsert.b_price:type_name -> cerasus.BPrice
	29, // 15: cerasus.BSellerUpsert.auth:type_name -> cerasus.Auth
	12, // 16: cerasus.BSellerUpsert.b_seller:type_name -> cerasus.BSeller
	12, // 17: cerasus.BSellers.b_sellers:type_name -> cerasus.BSeller
	29, // 18: cerasus.BSellerCompanyRequest.auth:type_name -> cerasus.Auth
	31, // 19: cerasus.BSellerCompanyData.company:type_name -> cerasus.Company
	16, // 20: cerasus.BSellerCompaniesData.data:type_name -> cerasus.BSellerCompanyData
	29, // 21: cerasus.BSellerCompanyProductRequest.auth:type_name -> cerasus.Auth
	12, // 22: cerasus.CompanyProductShopUrlAlert.seller:type_name -> cerasus.BSeller
	16, // 23: cerasus.CompanyProductShopUrlAlert.sellerCompany:type_name -> cerasus.BSellerCompanyData
	22, // 24: cerasus.CompanyProductShopUrlAlert.sellerCompanyProduct:type_name -> cerasus.BSellerCompanyProduct
	19, // 25: cerasus.CompanyProductShopUrl.alert:type_name -> cerasus.CompanyProductShopUrlAlert
	20, // 26: cerasus.CompanyProductShopUrls.urls:type_name -> cerasus.CompanyProductShopUrl
	32, // 27: cerasus.BSellerCompanyProduct.product:type_name -> cerasus.Product
	4,  // 28: cerasus.BSellerCompanyProduct.b_product:type_name -> cerasus.BProduct
	21, // 29: cerasus.BSellerCompanyProduct.urls:type_name -> cerasus.CompanyProductShopUrls
	22, // 30: cerasus.BSellerCompanyProducts.seller_company_products:type_name -> cerasus.BSellerCompanyProduct
	29, // 31: cerasus.BSCPUpdateRequest.auth:type_name -> cerasus.Auth
	32, // 32: cerasus.BSCPUpdateRequest.product:type_name -> cerasus.Product
	4,  // 33: cerasus.BSCPUpdateRequest.b_product:type_name -> cerasus.BProduct
	29, // 34: cerasus.CreateBSellerNullProductRequest.auth:type_name -> cerasus.Auth
	29, // 35: cerasus.NullUrlRequest.auth:type_name -> cerasus.Auth
	27, // 36: cerasus.Alerts.alerts:type_name -> cerasus.Alert
	33, // 37: cerasus.Brands.Ping:input_type -> cerasus.PingRequest
	29, // 38: cerasus.Brands.GetBrandData:input_type -> cerasus.Auth
	29, // 39: cerasus.Brands.GetBProducts:input_type -> cerasus.Auth
	34, // 40: cerasus.Brands.GetBProduct:input_type -> cerasus.RequestByID
	6,  // 41: cerasus.Brands.CreateBProduct:input_type -> cerasus.BProductUpsert
	6,  // 42: cerasus.Brands.UpdateBProduct:input_type -> cerasus.BProductUpsert
	34, // 43: cerasus.Brands.DeleteBProduct:input_type -> cerasus.RequestByID
	7,  // 44: cerasus.Brands.GetBFile:input_type -> cerasus.BFileRequest
	8,  // 45: cerasus.Brands.UploadBFile:input_type -> cerasus.BUploadRequest
	34, // 46: cerasus.Brands.GetBPrices:input_type -> cerasus.RequestByID
	34, // 47: cerasus.Brands.GetBPrice:input_type -> cerasus.RequestByID
	11, // 48: cerasus.Brands.CreateBPrice:input_type -> cerasus.BPriceUpsert
	34, // 49: cerasus.Brands.DeleteBPrice:input_type -> cerasus.RequestByID
	13, // 50: cerasus.Brands.CreateBSeller:input_type -> cerasus.BSellerUpsert
	29, // 51: cerasus.Brands.GetBSellers:input_type -> cerasus.Auth
	34, // 52: cerasus.Brands.GetBSeller:input_type -> cerasus.RequestByID
	13, // 53: cerasus.Brands.UpdateBSeller:input_type -> cerasus.BSellerUpsert
	34, // 54: cerasus.Brands.DeleteBSeller:input_type -> cerasus.RequestByID
	15, // 55: cerasus.Brands.GetBSellerCompanies:input_type -> cerasus.BSellerCompanyRequest
	15, // 56: cerasus.Brands.GetBSellerCompany:input_type -> cerasus.BSellerCompanyRequest
	15, // 57: cerasus.Brands.GetBSellerCompanyProducts:input_type -> cerasus.BSellerCompanyRequest
	18, // 58: cerasus.Brands.GetBSellerCompanyProduct:input_type -> cerasus.BSellerCompanyProductRequest
	24, // 59: cerasus.Brands.UpdateBSellerCompanyProduct:input_type -> cerasus.BSCPUpdateRequest
	25, // 60: cerasus.Brands.CreateBSellerNullProduct:input_type -> cerasus.CreateBSellerNullProductRequest
	34, // 61: cerasus.Brands.DeleteBSellerNullProduct:input_type -> cerasus.RequestByID
	26, // 62: cerasus.Brands.SetBSellerNullProductURL:input_type -> cerasus.NullUrlRequest
	34, // 63: cerasus.Brands.DeleteBSellerNullProductURL:input_type -> cerasus.RequestByID
	29, // 64: cerasus.Brands.GetAlerts:input_type -> cerasus.Auth
	35, // 65: cerasus.Brands.GetDumpingItem:input_type -> cerasus.GetPricerItemRequest
	36, // 66: cerasus.Brands.SetDumpingItem:input_type -> cerasus.SetPricerItemRequest
	29, // 67: cerasus.Brands.GetProductsCount:input_type -> cerasus.Auth
	29, // 68: cerasus.Brands.GetSellersCount:input_type -> cerasus.Auth
	0,  // 69: cerasus.Brands.GetDumpingList:input_type -> cerasus.DumpingListRequest
	29, // 70: cerasus.Brands.GetDumpingCount:input_type -> cerasus.Auth
	34, // 71: cerasus.Brands.GetDumpingData:input_type -> cerasus.RequestByID
	3,  // 72: cerasus.Brands.UpdateDumpingData:input_type -> cerasus.DumpingUpdate
	37, // 73: cerasus.Brands.Ping:output_type -> cerasus.PingReply
	38, // 74: cerasus.Brands.GetBrandData:output_type -> cerasus.Brand
	5,  // 75: cerasus.Brands.GetBProducts:output_type -> cerasus.BProducts
	4,  // 76: cerasus.Brands.GetBProduct:output_type -> cerasus.BProduct
	4,  // 77: cerasus.Brands.CreateBProduct:output_type -> cerasus.BProduct
	39, // 78: cerasus.Brands.UpdateBProduct:output_type -> cerasus.BoolReply
	39, // 79: cerasus.Brands.DeleteBProduct:output_type -> cerasus.BoolReply
	40, // 80: cerasus.Brands.GetBFile:output_type -> cerasus.ImageReply
	40, // 81: cerasus.Brands.UploadBFile:output_type -> cerasus.ImageReply
	10, // 82: cerasus.Brands.GetBPrices:output_type -> cerasus.BPrices
	9,  // 83: cerasus.Brands.GetBPrice:output_type -> cerasus.BPrice
	9,  // 84: cerasus.Brands.CreateBPrice:output_type -> cerasus.BPrice
	39, // 85: cerasus.Brands.DeleteBPrice:output_type -> cerasus.BoolReply
	12, // 86: cerasus.Brands.CreateBSeller:output_type -> cerasus.BSeller
	14, // 87: cerasus.Brands.GetBSellers:output_type -> cerasus.BSellers
	12, // 88: cerasus.Brands.GetBSeller:output_type -> cerasus.BSeller
	39, // 89: cerasus.Brands.UpdateBSeller:output_type -> cerasus.BoolReply
	39, // 90: cerasus.Brands.DeleteBSeller:output_type -> cerasus.BoolReply
	17, // 91: cerasus.Brands.GetBSellerCompanies:output_type -> cerasus.BSellerCompaniesData
	16, // 92: cerasus.Brands.GetBSellerCompany:output_type -> cerasus.BSellerCompanyData
	23, // 93: cerasus.Brands.GetBSellerCompanyProducts:output_type -> cerasus.BSellerCompanyProducts
	22, // 94: cerasus.Brands.GetBSellerCompanyProduct:output_type -> cerasus.BSellerCompanyProduct
	39, // 95: cerasus.Brands.UpdateBSellerCompanyProduct:output_type -> cerasus.BoolReply
	41, // 96: cerasus.Brands.CreateBSellerNullProduct:output_type -> cerasus.IDRequest
	39, // 97: cerasus.Brands.DeleteBSellerNullProduct:output_type -> cerasus.BoolReply
	39, // 98: cerasus.Brands.SetBSellerNullProductURL:output_type -> cerasus.BoolReply
	39, // 99: cerasus.Brands.DeleteBSellerNullProductURL:output_type -> cerasus.BoolReply
	28, // 100: cerasus.Brands.GetAlerts:output_type -> cerasus.Alerts
	42, // 101: cerasus.Brands.GetDumpingItem:output_type -> cerasus.GetPricerItemReply
	39, // 102: cerasus.Brands.SetDumpingItem:output_type -> cerasus.BoolReply
	43, // 103: cerasus.Brands.GetProductsCount:output_type -> cerasus.CountReply
	43, // 104: cerasus.Brands.GetSellersCount:output_type -> cerasus.CountReply
	2,  // 105: cerasus.Brands.GetDumpingList:output_type -> cerasus.DumpingList
	43, // 106: cerasus.Brands.GetDumpingCount:output_type -> cerasus.CountReply
	1,  // 107: cerasus.Brands.GetDumpingData:output_type -> cerasus.DumpingData
	39, // 108: cerasus.Brands.UpdateDumpingData:output_type -> cerasus.BoolReply
	73, // [73:109] is the sub-list for method output_type
	37, // [37:73] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_brand_proto_init() }
func file_brand_proto_init() {
	if File_brand_proto != nil {
		return
	}
	file_cerasus_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_brand_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpingUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BProductUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPrices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BPriceUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSeller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerCompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerCompanyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerCompaniesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerCompanyProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyProductShopUrlAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyProductShopUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyProductShopUrls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerCompanyProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSellerCompanyProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSCPUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBSellerNullProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brand_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brand_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brand_proto_goTypes,
		DependencyIndexes: file_brand_proto_depIdxs,
		MessageInfos:      file_brand_proto_msgTypes,
	}.Build()
	File_brand_proto = out.File
	file_brand_proto_rawDesc = nil
	file_brand_proto_goTypes = nil
	file_brand_proto_depIdxs = nil
}
