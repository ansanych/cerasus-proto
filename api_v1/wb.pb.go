// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: wb.proto

package cerasus_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShopWBAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Error bool   `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ShopWBAuth) Reset() {
	*x = ShopWBAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopWBAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopWBAuth) ProtoMessage() {}

func (x *ShopWBAuth) ProtoReflect() protoreflect.Message {
	mi := &file_wb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopWBAuth.ProtoReflect.Descriptor instead.
func (*ShopWBAuth) Descriptor() ([]byte, []int) {
	return file_wb_proto_rawDescGZIP(), []int{0}
}

func (x *ShopWBAuth) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ShopWBAuth) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

type SetWBAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *Auth       `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	ShopAuth *ShopWBAuth `protobuf:"bytes,2,opt,name=shopAuth,proto3" json:"shopAuth,omitempty"`
}

func (x *SetWBAuth) Reset() {
	*x = SetWBAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWBAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWBAuth) ProtoMessage() {}

func (x *SetWBAuth) ProtoReflect() protoreflect.Message {
	mi := &file_wb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWBAuth.ProtoReflect.Descriptor instead.
func (*SetWBAuth) Descriptor() ([]byte, []int) {
	return file_wb_proto_rawDescGZIP(), []int{1}
}

func (x *SetWBAuth) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SetWBAuth) GetShopAuth() *ShopWBAuth {
	if x != nil {
		return x.ShopAuth
	}
	return nil
}

type ForCounterRequestWB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID     int64   `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
	ShopProductID []int64 `protobuf:"varint,2,rep,packed,name=shopProductID,proto3" json:"shopProductID,omitempty"`
}

func (x *ForCounterRequestWB) Reset() {
	*x = ForCounterRequestWB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForCounterRequestWB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForCounterRequestWB) ProtoMessage() {}

func (x *ForCounterRequestWB) ProtoReflect() protoreflect.Message {
	mi := &file_wb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForCounterRequestWB.ProtoReflect.Descriptor instead.
func (*ForCounterRequestWB) Descriptor() ([]byte, []int) {
	return file_wb_proto_rawDescGZIP(), []int{2}
}

func (x *ForCounterRequestWB) GetCompanyID() int64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *ForCounterRequestWB) GetShopProductID() []int64 {
	if x != nil {
		return x.ShopProductID
	}
	return nil
}

type ForCounterProductDataWB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopProductID int64    `protobuf:"varint,1,opt,name=shopProductID,proto3" json:"shopProductID,omitempty"`
	Skus          []string `protobuf:"bytes,2,rep,name=skus,proto3" json:"skus,omitempty"`
	NmID          int64    `protobuf:"varint,3,opt,name=NmID,proto3" json:"NmID,omitempty"`
}

func (x *ForCounterProductDataWB) Reset() {
	*x = ForCounterProductDataWB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForCounterProductDataWB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForCounterProductDataWB) ProtoMessage() {}

func (x *ForCounterProductDataWB) ProtoReflect() protoreflect.Message {
	mi := &file_wb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForCounterProductDataWB.ProtoReflect.Descriptor instead.
func (*ForCounterProductDataWB) Descriptor() ([]byte, []int) {
	return file_wb_proto_rawDescGZIP(), []int{3}
}

func (x *ForCounterProductDataWB) GetShopProductID() int64 {
	if x != nil {
		return x.ShopProductID
	}
	return 0
}

func (x *ForCounterProductDataWB) GetSkus() []string {
	if x != nil {
		return x.Skus
	}
	return nil
}

func (x *ForCounterProductDataWB) GetNmID() int64 {
	if x != nil {
		return x.NmID
	}
	return 0
}

type CompanyWarehouse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OfficeID     int64  `protobuf:"varint,3,opt,name=officeID,proto3" json:"officeID,omitempty"`
	WarehouseID  int64  `protobuf:"varint,4,opt,name=warehouseID,proto3" json:"warehouseID,omitempty"`
	CargoType    int32  `protobuf:"varint,5,opt,name=cargoType,proto3" json:"cargoType,omitempty"`
	DeliveryType int32  `protobuf:"varint,6,opt,name=deliveryType,proto3" json:"deliveryType,omitempty"`
	Active       bool   `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`
	Updated      string `protobuf:"bytes,8,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *CompanyWarehouse) Reset() {
	*x = CompanyWarehouse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyWarehouse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyWarehouse) ProtoMessage() {}

func (x *CompanyWarehouse) ProtoReflect() protoreflect.Message {
	mi := &file_wb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyWarehouse.ProtoReflect.Descriptor instead.
func (*CompanyWarehouse) Descriptor() ([]byte, []int) {
	return file_wb_proto_rawDescGZIP(), []int{4}
}

func (x *CompanyWarehouse) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *CompanyWarehouse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompanyWarehouse) GetOfficeID() int64 {
	if x != nil {
		return x.OfficeID
	}
	return 0
}

func (x *CompanyWarehouse) GetWarehouseID() int64 {
	if x != nil {
		return x.WarehouseID
	}
	return 0
}

func (x *CompanyWarehouse) GetCargoType() int32 {
	if x != nil {
		return x.CargoType
	}
	return 0
}

func (x *CompanyWarehouse) GetDeliveryType() int32 {
	if x != nil {
		return x.DeliveryType
	}
	return 0
}

func (x *CompanyWarehouse) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *CompanyWarehouse) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

type ForCounterReplyWB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopWBAuth *ShopWBAuth                `protobuf:"bytes,1,opt,name=shopWBAuth,proto3" json:"shopWBAuth,omitempty"`
	Data       []*ForCounterProductDataWB `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	Warehouses []*CompanyWarehouse        `protobuf:"bytes,3,rep,name=warehouses,proto3" json:"warehouses,omitempty"`
}

func (x *ForCounterReplyWB) Reset() {
	*x = ForCounterReplyWB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForCounterReplyWB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForCounterReplyWB) ProtoMessage() {}

func (x *ForCounterReplyWB) ProtoReflect() protoreflect.Message {
	mi := &file_wb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForCounterReplyWB.ProtoReflect.Descriptor instead.
func (*ForCounterReplyWB) Descriptor() ([]byte, []int) {
	return file_wb_proto_rawDescGZIP(), []int{5}
}

func (x *ForCounterReplyWB) GetShopWBAuth() *ShopWBAuth {
	if x != nil {
		return x.ShopWBAuth
	}
	return nil
}

func (x *ForCounterReplyWB) GetData() []*ForCounterProductDataWB {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ForCounterReplyWB) GetWarehouses() []*CompanyWarehouse {
	if x != nil {
		return x.Warehouses
	}
	return nil
}

var File_wb_proto protoreflect.FileDescriptor

var file_wb_proto_rawDesc = []byte{
	0x0a, 0x08, 0x77, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x1a, 0x0d, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x38, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x70, 0x57, 0x42, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5f, 0x0a, 0x09,
	0x53, 0x65, 0x74, 0x57, 0x42, 0x41, 0x75, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x08,
	0x73, 0x68, 0x6f, 0x70, 0x41, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x57, 0x42, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x41, 0x75, 0x74, 0x68, 0x22, 0x59, 0x0a,
	0x13, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x57, 0x42, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x70, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x67, 0x0a, 0x17, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x57, 0x42, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x70,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x6d, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x4e, 0x6d, 0x49,
	0x44, 0x22, 0xe8, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x72,
	0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xb9, 0x01, 0x0a,
	0x11, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x57, 0x42, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x70, 0x57, 0x42, 0x41, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x57, 0x42, 0x41, 0x75, 0x74, 0x68, 0x52, 0x0a, 0x73, 0x68, 0x6f,
	0x70, 0x57, 0x42, 0x41, 0x75, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x57, 0x42, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a,
	0x0a, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x0a, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x32, 0xd5, 0x0a, 0x0a, 0x02, 0x57, 0x42, 0x12,
	0x33, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x12, 0x12, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x42, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x12,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x13,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x57, 0x42, 0x41,
	0x75, 0x74, 0x68, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x6e,
	0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x13, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53,
	0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x53, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1f, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x70,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x68, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x70,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75,
	0x73, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x79, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12,
	0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x17,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x61, 0x79, 0x73, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x68,
	0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x61, 0x6c, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x1c,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63,
	0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x12, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e,
	0x4d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x61, 0x69,
	0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e, 0x63, 0x65,
	0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0d, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x68, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x68, 0x6f, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6e, 0x75,
	0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61,
	0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x15, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73,
	0x75, 0x73, 0x2e, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x22,
	0x00, 0x12, 0x39, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x73, 0x12, 0x0d, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x1a, 0x15, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x57, 0x65,
	0x65, 0x6b, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10,
	0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x57, 0x42,
	0x12, 0x1c, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x42, 0x1a, 0x1a,
	0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x57, 0x42, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x04,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x6e, 0x73, 0x61, 0x6e, 0x79, 0x63, 0x68, 0x2f, 0x63, 0x65, 0x72, 0x61, 0x73, 0x75, 0x73, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wb_proto_rawDescOnce sync.Once
	file_wb_proto_rawDescData = file_wb_proto_rawDesc
)

func file_wb_proto_rawDescGZIP() []byte {
	file_wb_proto_rawDescOnce.Do(func() {
		file_wb_proto_rawDescData = protoimpl.X.CompressGZIP(file_wb_proto_rawDescData)
	})
	return file_wb_proto_rawDescData
}

var file_wb_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_wb_proto_goTypes = []interface{}{
	(*ShopWBAuth)(nil),               // 0: cerasus.ShopWBAuth
	(*SetWBAuth)(nil),                // 1: cerasus.SetWBAuth
	(*ForCounterRequestWB)(nil),      // 2: cerasus.ForCounterRequestWB
	(*ForCounterProductDataWB)(nil),  // 3: cerasus.ForCounterProductDataWB
	(*CompanyWarehouse)(nil),         // 4: cerasus.CompanyWarehouse
	(*ForCounterReplyWB)(nil),        // 5: cerasus.ForCounterReplyWB
	(*Auth)(nil),                     // 6: cerasus.Auth
	(*ShopProductListRequest)(nil),   // 7: cerasus.ShopProductListRequest
	(*ShopProductRequest)(nil),       // 8: cerasus.ShopProductRequest
	(*ShopProductUpdateRequest)(nil), // 9: cerasus.ShopProductUpdateRequest
	(*SalesRequest)(nil),             // 10: cerasus.SalesRequest
	(*ShopServiceRequest)(nil),       // 11: cerasus.ShopServiceRequest
	(*SaleDetailsRequest)(nil),       // 12: cerasus.SaleDetailsRequest
	(*ProductSalesRequest)(nil),      // 13: cerasus.ProductSalesRequest
	(*MainGraphicRequest)(nil),       // 14: cerasus.MainGraphicRequest
	(*ImageRequest)(nil),             // 15: cerasus.ImageRequest
	(*PingRequest)(nil),              // 16: cerasus.PingRequest
	(*BoolReply)(nil),                // 17: cerasus.BoolReply
	(*CountReply)(nil),               // 18: cerasus.CountReply
	(*ShopProductListReply)(nil),     // 19: cerasus.ShopProductListReply
	(*ShopProduct)(nil),              // 20: cerasus.ShopProduct
	(*DaysSalesReply)(nil),           // 21: cerasus.DaysSalesReply
	(*SalesReply)(nil),               // 22: cerasus.SalesReply
	(*ShopServiceReply)(nil),         // 23: cerasus.ShopServiceReply
	(*SaleDetailsReply)(nil),         // 24: cerasus.SaleDetailsReply
	(*MainGraphicReply)(nil),         // 25: cerasus.MainGraphicReply
	(*ImageReply)(nil),               // 26: cerasus.ImageReply
	(*CompanyShopData)(nil),          // 27: cerasus.CompanyShopData
	(*DonutGraphic)(nil),             // 28: cerasus.DonutGraphic
	(*WeekGraphics)(nil),             // 29: cerasus.WeekGraphics
	(*PingReply)(nil),                // 30: cerasus.PingReply
}
var file_wb_proto_depIdxs = []int32{
	6,  // 0: cerasus.SetWBAuth.auth:type_name -> cerasus.Auth
	0,  // 1: cerasus.SetWBAuth.shopAuth:type_name -> cerasus.ShopWBAuth
	0,  // 2: cerasus.ForCounterReplyWB.shopWBAuth:type_name -> cerasus.ShopWBAuth
	3,  // 3: cerasus.ForCounterReplyWB.data:type_name -> cerasus.ForCounterProductDataWB
	4,  // 4: cerasus.ForCounterReplyWB.warehouses:type_name -> cerasus.CompanyWarehouse
	1,  // 5: cerasus.WB.SetAuth:input_type -> cerasus.SetWBAuth
	6,  // 6: cerasus.WB.GetAuth:input_type -> cerasus.Auth
	6,  // 7: cerasus.WB.ErrorAuth:input_type -> cerasus.Auth
	6,  // 8: cerasus.WB.GetUnsortedCount:input_type -> cerasus.Auth
	7,  // 9: cerasus.WB.GetUnsortedList:input_type -> cerasus.ShopProductListRequest
	6,  // 10: cerasus.WB.GetProductCount:input_type -> cerasus.Auth
	7,  // 11: cerasus.WB.GetProductList:input_type -> cerasus.ShopProductListRequest
	8,  // 12: cerasus.WB.GetProduct:input_type -> cerasus.ShopProductRequest
	9,  // 13: cerasus.WB.UpdateProduct:input_type -> cerasus.ShopProductUpdateRequest
	6,  // 14: cerasus.WB.GetDaySales:input_type -> cerasus.Auth
	10, // 15: cerasus.WB.GetSales:input_type -> cerasus.SalesRequest
	11, // 16: cerasus.WB.GetShopServices:input_type -> cerasus.ShopServiceRequest
	12, // 17: cerasus.WB.GetSaleDetail:input_type -> cerasus.SaleDetailsRequest
	13, // 18: cerasus.WB.GetProductSales:input_type -> cerasus.ProductSalesRequest
	14, // 19: cerasus.WB.GetMainGraphic:input_type -> cerasus.MainGraphicRequest
	15, // 20: cerasus.WB.GetImage:input_type -> cerasus.ImageRequest
	6,  // 21: cerasus.WB.CheckShopData:input_type -> cerasus.Auth
	6,  // 22: cerasus.WB.GetDonutGraphics:input_type -> cerasus.Auth
	6,  // 23: cerasus.WB.GetWeekGraphics:input_type -> cerasus.Auth
	2,  // 24: cerasus.WB.ForCounterDataWB:input_type -> cerasus.ForCounterRequestWB
	16, // 25: cerasus.WB.Ping:input_type -> cerasus.PingRequest
	17, // 26: cerasus.WB.SetAuth:output_type -> cerasus.BoolReply
	0,  // 27: cerasus.WB.GetAuth:output_type -> cerasus.ShopWBAuth
	17, // 28: cerasus.WB.ErrorAuth:output_type -> cerasus.BoolReply
	18, // 29: cerasus.WB.GetUnsortedCount:output_type -> cerasus.CountReply
	19, // 30: cerasus.WB.GetUnsortedList:output_type -> cerasus.ShopProductListReply
	18, // 31: cerasus.WB.GetProductCount:output_type -> cerasus.CountReply
	19, // 32: cerasus.WB.GetProductList:output_type -> cerasus.ShopProductListReply
	20, // 33: cerasus.WB.GetProduct:output_type -> cerasus.ShopProduct
	17, // 34: cerasus.WB.UpdateProduct:output_type -> cerasus.BoolReply
	21, // 35: cerasus.WB.GetDaySales:output_type -> cerasus.DaysSalesReply
	22, // 36: cerasus.WB.GetSales:output_type -> cerasus.SalesReply
	23, // 37: cerasus.WB.GetShopServices:output_type -> cerasus.ShopServiceReply
	24, // 38: cerasus.WB.GetSaleDetail:output_type -> cerasus.SaleDetailsReply
	22, // 39: cerasus.WB.GetProductSales:output_type -> cerasus.SalesReply
	25, // 40: cerasus.WB.GetMainGraphic:output_type -> cerasus.MainGraphicReply
	26, // 41: cerasus.WB.GetImage:output_type -> cerasus.ImageReply
	27, // 42: cerasus.WB.CheckShopData:output_type -> cerasus.CompanyShopData
	28, // 43: cerasus.WB.GetDonutGraphics:output_type -> cerasus.DonutGraphic
	29, // 44: cerasus.WB.GetWeekGraphics:output_type -> cerasus.WeekGraphics
	5,  // 45: cerasus.WB.ForCounterDataWB:output_type -> cerasus.ForCounterReplyWB
	30, // 46: cerasus.WB.Ping:output_type -> cerasus.PingReply
	26, // [26:47] is the sub-list for method output_type
	5,  // [5:26] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_wb_proto_init() }
func file_wb_proto_init() {
	if File_wb_proto != nil {
		return
	}
	file_cerasus_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopWBAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWBAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForCounterRequestWB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForCounterProductDataWB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyWarehouse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForCounterReplyWB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wb_proto_goTypes,
		DependencyIndexes: file_wb_proto_depIdxs,
		MessageInfos:      file_wb_proto_msgTypes,
	}.Build()
	File_wb_proto = out.File
	file_wb_proto_rawDesc = nil
	file_wb_proto_goTypes = nil
	file_wb_proto_depIdxs = nil
}
