// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: ozon.proto

package cerasus_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OzonClient is the client API for Ozon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OzonClient interface {
	SetAuth(ctx context.Context, in *SetOzonAuth, opts ...grpc.CallOption) (*BoolReply, error)
	GetAuth(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*ShopOzonAuth, error)
	ErrorAuth(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*BoolReply, error)
	GetUnsortedCount(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*CountReply, error)
	GetUnsortedList(ctx context.Context, in *ShopProductListRequest, opts ...grpc.CallOption) (*ShopProductListReply, error)
	GetProductCount(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*CountReply, error)
	GetProductList(ctx context.Context, in *ShopProductListRequest, opts ...grpc.CallOption) (*ShopProductListReply, error)
	GetProduct(ctx context.Context, in *ShopProductRequest, opts ...grpc.CallOption) (*ShopProduct, error)
	GetDaySales(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*DaysSalesReply, error)
	GetSales(ctx context.Context, in *SalesRequest, opts ...grpc.CallOption) (*SalesReply, error)
	GetSaleDetail(ctx context.Context, in *SaleDetailsRequest, opts ...grpc.CallOption) (*SaleDetailsReply, error)
}

type ozonClient struct {
	cc grpc.ClientConnInterface
}

func NewOzonClient(cc grpc.ClientConnInterface) OzonClient {
	return &ozonClient{cc}
}

func (c *ozonClient) SetAuth(ctx context.Context, in *SetOzonAuth, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/cerasus.Ozon/SetAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ozonClient) GetAuth(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*ShopOzonAuth, error) {
	out := new(ShopOzonAuth)
	err := c.cc.Invoke(ctx, "/cerasus.Ozon/GetAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ozonClient) ErrorAuth(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/cerasus.Ozon/ErrorAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ozonClient) GetUnsortedCount(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/cerasus.Ozon/GetUnsortedCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ozonClient) GetUnsortedList(ctx context.Context, in *ShopProductListRequest, opts ...grpc.CallOption) (*ShopProductListReply, error) {
	out := new(ShopProductListReply)
	err := c.cc.Invoke(ctx, "/cerasus.Ozon/GetUnsortedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ozonClient) GetProductCount(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/cerasus.Ozon/GetProductCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ozonClient) GetProductList(ctx context.Context, in *ShopProductListRequest, opts ...grpc.CallOption) (*ShopProductListReply, error) {
	out := new(ShopProductListReply)
	err := c.cc.Invoke(ctx, "/cerasus.Ozon/GetProductList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ozonClient) GetProduct(ctx context.Context, in *ShopProductRequest, opts ...grpc.CallOption) (*ShopProduct, error) {
	out := new(ShopProduct)
	err := c.cc.Invoke(ctx, "/cerasus.Ozon/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ozonClient) GetDaySales(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*DaysSalesReply, error) {
	out := new(DaysSalesReply)
	err := c.cc.Invoke(ctx, "/cerasus.Ozon/GetDaySales", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ozonClient) GetSales(ctx context.Context, in *SalesRequest, opts ...grpc.CallOption) (*SalesReply, error) {
	out := new(SalesReply)
	err := c.cc.Invoke(ctx, "/cerasus.Ozon/GetSales", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ozonClient) GetSaleDetail(ctx context.Context, in *SaleDetailsRequest, opts ...grpc.CallOption) (*SaleDetailsReply, error) {
	out := new(SaleDetailsReply)
	err := c.cc.Invoke(ctx, "/cerasus.Ozon/GetSaleDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OzonServer is the server API for Ozon service.
// All implementations must embed UnimplementedOzonServer
// for forward compatibility
type OzonServer interface {
	SetAuth(context.Context, *SetOzonAuth) (*BoolReply, error)
	GetAuth(context.Context, *Auth) (*ShopOzonAuth, error)
	ErrorAuth(context.Context, *Auth) (*BoolReply, error)
	GetUnsortedCount(context.Context, *Auth) (*CountReply, error)
	GetUnsortedList(context.Context, *ShopProductListRequest) (*ShopProductListReply, error)
	GetProductCount(context.Context, *Auth) (*CountReply, error)
	GetProductList(context.Context, *ShopProductListRequest) (*ShopProductListReply, error)
	GetProduct(context.Context, *ShopProductRequest) (*ShopProduct, error)
	GetDaySales(context.Context, *Auth) (*DaysSalesReply, error)
	GetSales(context.Context, *SalesRequest) (*SalesReply, error)
	GetSaleDetail(context.Context, *SaleDetailsRequest) (*SaleDetailsReply, error)
	mustEmbedUnimplementedOzonServer()
}

// UnimplementedOzonServer must be embedded to have forward compatible implementations.
type UnimplementedOzonServer struct {
}

func (UnimplementedOzonServer) SetAuth(context.Context, *SetOzonAuth) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAuth not implemented")
}
func (UnimplementedOzonServer) GetAuth(context.Context, *Auth) (*ShopOzonAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuth not implemented")
}
func (UnimplementedOzonServer) ErrorAuth(context.Context, *Auth) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ErrorAuth not implemented")
}
func (UnimplementedOzonServer) GetUnsortedCount(context.Context, *Auth) (*CountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnsortedCount not implemented")
}
func (UnimplementedOzonServer) GetUnsortedList(context.Context, *ShopProductListRequest) (*ShopProductListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnsortedList not implemented")
}
func (UnimplementedOzonServer) GetProductCount(context.Context, *Auth) (*CountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCount not implemented")
}
func (UnimplementedOzonServer) GetProductList(context.Context, *ShopProductListRequest) (*ShopProductListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductList not implemented")
}
func (UnimplementedOzonServer) GetProduct(context.Context, *ShopProductRequest) (*ShopProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedOzonServer) GetDaySales(context.Context, *Auth) (*DaysSalesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDaySales not implemented")
}
func (UnimplementedOzonServer) GetSales(context.Context, *SalesRequest) (*SalesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSales not implemented")
}
func (UnimplementedOzonServer) GetSaleDetail(context.Context, *SaleDetailsRequest) (*SaleDetailsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSaleDetail not implemented")
}
func (UnimplementedOzonServer) mustEmbedUnimplementedOzonServer() {}

// UnsafeOzonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OzonServer will
// result in compilation errors.
type UnsafeOzonServer interface {
	mustEmbedUnimplementedOzonServer()
}

func RegisterOzonServer(s grpc.ServiceRegistrar, srv OzonServer) {
	s.RegisterService(&Ozon_ServiceDesc, srv)
}

func _Ozon_SetAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOzonAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OzonServer).SetAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Ozon/SetAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OzonServer).SetAuth(ctx, req.(*SetOzonAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ozon_GetAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OzonServer).GetAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Ozon/GetAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OzonServer).GetAuth(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ozon_ErrorAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OzonServer).ErrorAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Ozon/ErrorAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OzonServer).ErrorAuth(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ozon_GetUnsortedCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OzonServer).GetUnsortedCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Ozon/GetUnsortedCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OzonServer).GetUnsortedCount(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ozon_GetUnsortedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OzonServer).GetUnsortedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Ozon/GetUnsortedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OzonServer).GetUnsortedList(ctx, req.(*ShopProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ozon_GetProductCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OzonServer).GetProductCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Ozon/GetProductCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OzonServer).GetProductCount(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ozon_GetProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OzonServer).GetProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Ozon/GetProductList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OzonServer).GetProductList(ctx, req.(*ShopProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ozon_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OzonServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Ozon/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OzonServer).GetProduct(ctx, req.(*ShopProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ozon_GetDaySales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OzonServer).GetDaySales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Ozon/GetDaySales",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OzonServer).GetDaySales(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ozon_GetSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OzonServer).GetSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Ozon/GetSales",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OzonServer).GetSales(ctx, req.(*SalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ozon_GetSaleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OzonServer).GetSaleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Ozon/GetSaleDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OzonServer).GetSaleDetail(ctx, req.(*SaleDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ozon_ServiceDesc is the grpc.ServiceDesc for Ozon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ozon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cerasus.Ozon",
	HandlerType: (*OzonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAuth",
			Handler:    _Ozon_SetAuth_Handler,
		},
		{
			MethodName: "GetAuth",
			Handler:    _Ozon_GetAuth_Handler,
		},
		{
			MethodName: "ErrorAuth",
			Handler:    _Ozon_ErrorAuth_Handler,
		},
		{
			MethodName: "GetUnsortedCount",
			Handler:    _Ozon_GetUnsortedCount_Handler,
		},
		{
			MethodName: "GetUnsortedList",
			Handler:    _Ozon_GetUnsortedList_Handler,
		},
		{
			MethodName: "GetProductCount",
			Handler:    _Ozon_GetProductCount_Handler,
		},
		{
			MethodName: "GetProductList",
			Handler:    _Ozon_GetProductList_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _Ozon_GetProduct_Handler,
		},
		{
			MethodName: "GetDaySales",
			Handler:    _Ozon_GetDaySales_Handler,
		},
		{
			MethodName: "GetSales",
			Handler:    _Ozon_GetSales_Handler,
		},
		{
			MethodName: "GetSaleDetail",
			Handler:    _Ozon_GetSaleDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ozon.proto",
}
