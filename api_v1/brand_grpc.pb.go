// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: brand.proto

package cerasus_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrandsClient is the client API for Brands service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrandsClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	GetBrandData(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Brand, error)
	GetBProducts(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*BProducts, error)
	GetBProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BProduct, error)
	CreateBProduct(ctx context.Context, in *BProductUpsert, opts ...grpc.CallOption) (*BProduct, error)
	UpdateBProduct(ctx context.Context, in *BProductUpsert, opts ...grpc.CallOption) (*BoolReply, error)
	DeleteBProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BoolReply, error)
	GetBFile(ctx context.Context, in *BFileRequest, opts ...grpc.CallOption) (*ImageReply, error)
	UploadBFile(ctx context.Context, in *BUploadRequest, opts ...grpc.CallOption) (*ImageReply, error)
	GetBPrices(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BPrices, error)
	GetBPrice(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BPrice, error)
	CreateBPrice(ctx context.Context, in *BPriceUpsert, opts ...grpc.CallOption) (*BPrice, error)
	DeleteBPrice(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BoolReply, error)
	CreateBSeller(ctx context.Context, in *BSellerUpsert, opts ...grpc.CallOption) (*BSeller, error)
	GetBSellers(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*BSellers, error)
	GetBSeller(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BSeller, error)
	UpdateBSeller(ctx context.Context, in *BSellerUpsert, opts ...grpc.CallOption) (*BoolReply, error)
	DeleteBSeller(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BoolReply, error)
	GetBSellerCompanies(ctx context.Context, in *BSellerCompanyRequest, opts ...grpc.CallOption) (*BSellerCompaniesData, error)
	GetBSellerCompany(ctx context.Context, in *BSellerCompanyRequest, opts ...grpc.CallOption) (*BSellerCompanyData, error)
	GetBSellerCompanyProducts(ctx context.Context, in *BSellerCompanyRequest, opts ...grpc.CallOption) (*BSellerCompanyProducts, error)
	GetBSellerCompanyProduct(ctx context.Context, in *BSellerCompanyProductRequest, opts ...grpc.CallOption) (*BSellerCompanyProduct, error)
	UpdateBSellerCompanyProduct(ctx context.Context, in *BSCPUpdateRequest, opts ...grpc.CallOption) (*BoolReply, error)
	CreateBSellerNullProduct(ctx context.Context, in *CreateBSellerNullProductRequest, opts ...grpc.CallOption) (*IDRequest, error)
	DeleteBSellerNullProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BoolReply, error)
	SetBSellerNullProductURL(ctx context.Context, in *NullUrlRequest, opts ...grpc.CallOption) (*BoolReply, error)
	DeleteBSellerNullProductURL(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BoolReply, error)
	GetAlerts(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Alerts, error)
	GetDumpingItem(ctx context.Context, in *GetPricerItemRequest, opts ...grpc.CallOption) (*GetPricerItemReply, error)
	SetDumpingItem(ctx context.Context, in *SetPricerItemRequest, opts ...grpc.CallOption) (*BoolReply, error)
	GetProductsCount(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*CountReply, error)
	GetSellersCount(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*CountReply, error)
	GetDumpingList(ctx context.Context, in *DumpingListRequest, opts ...grpc.CallOption) (*DumpingList, error)
	GetDumpingCount(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*CountReply, error)
	GetDumpingData(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*DumpingData, error)
	UpdateDumpingData(ctx context.Context, in *DumpingUpdate, opts ...grpc.CallOption) (*BoolReply, error)
}

type brandsClient struct {
	cc grpc.ClientConnInterface
}

func NewBrandsClient(cc grpc.ClientConnInterface) BrandsClient {
	return &brandsClient{cc}
}

func (c *brandsClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetBrandData(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Brand, error) {
	out := new(Brand)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetBrandData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetBProducts(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*BProducts, error) {
	out := new(BProducts)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetBProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetBProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BProduct, error) {
	out := new(BProduct)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetBProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) CreateBProduct(ctx context.Context, in *BProductUpsert, opts ...grpc.CallOption) (*BProduct, error) {
	out := new(BProduct)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/CreateBProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) UpdateBProduct(ctx context.Context, in *BProductUpsert, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/UpdateBProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) DeleteBProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/DeleteBProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetBFile(ctx context.Context, in *BFileRequest, opts ...grpc.CallOption) (*ImageReply, error) {
	out := new(ImageReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetBFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) UploadBFile(ctx context.Context, in *BUploadRequest, opts ...grpc.CallOption) (*ImageReply, error) {
	out := new(ImageReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/UploadBFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetBPrices(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BPrices, error) {
	out := new(BPrices)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetBPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetBPrice(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BPrice, error) {
	out := new(BPrice)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetBPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) CreateBPrice(ctx context.Context, in *BPriceUpsert, opts ...grpc.CallOption) (*BPrice, error) {
	out := new(BPrice)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/CreateBPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) DeleteBPrice(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/DeleteBPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) CreateBSeller(ctx context.Context, in *BSellerUpsert, opts ...grpc.CallOption) (*BSeller, error) {
	out := new(BSeller)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/CreateBSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetBSellers(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*BSellers, error) {
	out := new(BSellers)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetBSellers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetBSeller(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BSeller, error) {
	out := new(BSeller)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetBSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) UpdateBSeller(ctx context.Context, in *BSellerUpsert, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/UpdateBSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) DeleteBSeller(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/DeleteBSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetBSellerCompanies(ctx context.Context, in *BSellerCompanyRequest, opts ...grpc.CallOption) (*BSellerCompaniesData, error) {
	out := new(BSellerCompaniesData)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetBSellerCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetBSellerCompany(ctx context.Context, in *BSellerCompanyRequest, opts ...grpc.CallOption) (*BSellerCompanyData, error) {
	out := new(BSellerCompanyData)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetBSellerCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetBSellerCompanyProducts(ctx context.Context, in *BSellerCompanyRequest, opts ...grpc.CallOption) (*BSellerCompanyProducts, error) {
	out := new(BSellerCompanyProducts)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetBSellerCompanyProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetBSellerCompanyProduct(ctx context.Context, in *BSellerCompanyProductRequest, opts ...grpc.CallOption) (*BSellerCompanyProduct, error) {
	out := new(BSellerCompanyProduct)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetBSellerCompanyProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) UpdateBSellerCompanyProduct(ctx context.Context, in *BSCPUpdateRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/UpdateBSellerCompanyProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) CreateBSellerNullProduct(ctx context.Context, in *CreateBSellerNullProductRequest, opts ...grpc.CallOption) (*IDRequest, error) {
	out := new(IDRequest)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/CreateBSellerNullProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) DeleteBSellerNullProduct(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/DeleteBSellerNullProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) SetBSellerNullProductURL(ctx context.Context, in *NullUrlRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/SetBSellerNullProductURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) DeleteBSellerNullProductURL(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/DeleteBSellerNullProductURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetAlerts(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Alerts, error) {
	out := new(Alerts)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetDumpingItem(ctx context.Context, in *GetPricerItemRequest, opts ...grpc.CallOption) (*GetPricerItemReply, error) {
	out := new(GetPricerItemReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetDumpingItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) SetDumpingItem(ctx context.Context, in *SetPricerItemRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/SetDumpingItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetProductsCount(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetProductsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetSellersCount(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetSellersCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetDumpingList(ctx context.Context, in *DumpingListRequest, opts ...grpc.CallOption) (*DumpingList, error) {
	out := new(DumpingList)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetDumpingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetDumpingCount(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetDumpingCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) GetDumpingData(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*DumpingData, error) {
	out := new(DumpingData)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/GetDumpingData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) UpdateDumpingData(ctx context.Context, in *DumpingUpdate, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/cerasus.Brands/UpdateDumpingData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrandsServer is the server API for Brands service.
// All implementations must embed UnimplementedBrandsServer
// for forward compatibility
type BrandsServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	GetBrandData(context.Context, *Auth) (*Brand, error)
	GetBProducts(context.Context, *Auth) (*BProducts, error)
	GetBProduct(context.Context, *RequestByID) (*BProduct, error)
	CreateBProduct(context.Context, *BProductUpsert) (*BProduct, error)
	UpdateBProduct(context.Context, *BProductUpsert) (*BoolReply, error)
	DeleteBProduct(context.Context, *RequestByID) (*BoolReply, error)
	GetBFile(context.Context, *BFileRequest) (*ImageReply, error)
	UploadBFile(context.Context, *BUploadRequest) (*ImageReply, error)
	GetBPrices(context.Context, *RequestByID) (*BPrices, error)
	GetBPrice(context.Context, *RequestByID) (*BPrice, error)
	CreateBPrice(context.Context, *BPriceUpsert) (*BPrice, error)
	DeleteBPrice(context.Context, *RequestByID) (*BoolReply, error)
	CreateBSeller(context.Context, *BSellerUpsert) (*BSeller, error)
	GetBSellers(context.Context, *Auth) (*BSellers, error)
	GetBSeller(context.Context, *RequestByID) (*BSeller, error)
	UpdateBSeller(context.Context, *BSellerUpsert) (*BoolReply, error)
	DeleteBSeller(context.Context, *RequestByID) (*BoolReply, error)
	GetBSellerCompanies(context.Context, *BSellerCompanyRequest) (*BSellerCompaniesData, error)
	GetBSellerCompany(context.Context, *BSellerCompanyRequest) (*BSellerCompanyData, error)
	GetBSellerCompanyProducts(context.Context, *BSellerCompanyRequest) (*BSellerCompanyProducts, error)
	GetBSellerCompanyProduct(context.Context, *BSellerCompanyProductRequest) (*BSellerCompanyProduct, error)
	UpdateBSellerCompanyProduct(context.Context, *BSCPUpdateRequest) (*BoolReply, error)
	CreateBSellerNullProduct(context.Context, *CreateBSellerNullProductRequest) (*IDRequest, error)
	DeleteBSellerNullProduct(context.Context, *RequestByID) (*BoolReply, error)
	SetBSellerNullProductURL(context.Context, *NullUrlRequest) (*BoolReply, error)
	DeleteBSellerNullProductURL(context.Context, *RequestByID) (*BoolReply, error)
	GetAlerts(context.Context, *Auth) (*Alerts, error)
	GetDumpingItem(context.Context, *GetPricerItemRequest) (*GetPricerItemReply, error)
	SetDumpingItem(context.Context, *SetPricerItemRequest) (*BoolReply, error)
	GetProductsCount(context.Context, *Auth) (*CountReply, error)
	GetSellersCount(context.Context, *Auth) (*CountReply, error)
	GetDumpingList(context.Context, *DumpingListRequest) (*DumpingList, error)
	GetDumpingCount(context.Context, *Auth) (*CountReply, error)
	GetDumpingData(context.Context, *RequestByID) (*DumpingData, error)
	UpdateDumpingData(context.Context, *DumpingUpdate) (*BoolReply, error)
	mustEmbedUnimplementedBrandsServer()
}

// UnimplementedBrandsServer must be embedded to have forward compatible implementations.
type UnimplementedBrandsServer struct {
}

func (UnimplementedBrandsServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBrandsServer) GetBrandData(context.Context, *Auth) (*Brand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandData not implemented")
}
func (UnimplementedBrandsServer) GetBProducts(context.Context, *Auth) (*BProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBProducts not implemented")
}
func (UnimplementedBrandsServer) GetBProduct(context.Context, *RequestByID) (*BProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBProduct not implemented")
}
func (UnimplementedBrandsServer) CreateBProduct(context.Context, *BProductUpsert) (*BProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBProduct not implemented")
}
func (UnimplementedBrandsServer) UpdateBProduct(context.Context, *BProductUpsert) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBProduct not implemented")
}
func (UnimplementedBrandsServer) DeleteBProduct(context.Context, *RequestByID) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBProduct not implemented")
}
func (UnimplementedBrandsServer) GetBFile(context.Context, *BFileRequest) (*ImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBFile not implemented")
}
func (UnimplementedBrandsServer) UploadBFile(context.Context, *BUploadRequest) (*ImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadBFile not implemented")
}
func (UnimplementedBrandsServer) GetBPrices(context.Context, *RequestByID) (*BPrices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBPrices not implemented")
}
func (UnimplementedBrandsServer) GetBPrice(context.Context, *RequestByID) (*BPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBPrice not implemented")
}
func (UnimplementedBrandsServer) CreateBPrice(context.Context, *BPriceUpsert) (*BPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBPrice not implemented")
}
func (UnimplementedBrandsServer) DeleteBPrice(context.Context, *RequestByID) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBPrice not implemented")
}
func (UnimplementedBrandsServer) CreateBSeller(context.Context, *BSellerUpsert) (*BSeller, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBSeller not implemented")
}
func (UnimplementedBrandsServer) GetBSellers(context.Context, *Auth) (*BSellers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBSellers not implemented")
}
func (UnimplementedBrandsServer) GetBSeller(context.Context, *RequestByID) (*BSeller, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBSeller not implemented")
}
func (UnimplementedBrandsServer) UpdateBSeller(context.Context, *BSellerUpsert) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBSeller not implemented")
}
func (UnimplementedBrandsServer) DeleteBSeller(context.Context, *RequestByID) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBSeller not implemented")
}
func (UnimplementedBrandsServer) GetBSellerCompanies(context.Context, *BSellerCompanyRequest) (*BSellerCompaniesData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBSellerCompanies not implemented")
}
func (UnimplementedBrandsServer) GetBSellerCompany(context.Context, *BSellerCompanyRequest) (*BSellerCompanyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBSellerCompany not implemented")
}
func (UnimplementedBrandsServer) GetBSellerCompanyProducts(context.Context, *BSellerCompanyRequest) (*BSellerCompanyProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBSellerCompanyProducts not implemented")
}
func (UnimplementedBrandsServer) GetBSellerCompanyProduct(context.Context, *BSellerCompanyProductRequest) (*BSellerCompanyProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBSellerCompanyProduct not implemented")
}
func (UnimplementedBrandsServer) UpdateBSellerCompanyProduct(context.Context, *BSCPUpdateRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBSellerCompanyProduct not implemented")
}
func (UnimplementedBrandsServer) CreateBSellerNullProduct(context.Context, *CreateBSellerNullProductRequest) (*IDRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBSellerNullProduct not implemented")
}
func (UnimplementedBrandsServer) DeleteBSellerNullProduct(context.Context, *RequestByID) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBSellerNullProduct not implemented")
}
func (UnimplementedBrandsServer) SetBSellerNullProductURL(context.Context, *NullUrlRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBSellerNullProductURL not implemented")
}
func (UnimplementedBrandsServer) DeleteBSellerNullProductURL(context.Context, *RequestByID) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBSellerNullProductURL not implemented")
}
func (UnimplementedBrandsServer) GetAlerts(context.Context, *Auth) (*Alerts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlerts not implemented")
}
func (UnimplementedBrandsServer) GetDumpingItem(context.Context, *GetPricerItemRequest) (*GetPricerItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDumpingItem not implemented")
}
func (UnimplementedBrandsServer) SetDumpingItem(context.Context, *SetPricerItemRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDumpingItem not implemented")
}
func (UnimplementedBrandsServer) GetProductsCount(context.Context, *Auth) (*CountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsCount not implemented")
}
func (UnimplementedBrandsServer) GetSellersCount(context.Context, *Auth) (*CountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellersCount not implemented")
}
func (UnimplementedBrandsServer) GetDumpingList(context.Context, *DumpingListRequest) (*DumpingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDumpingList not implemented")
}
func (UnimplementedBrandsServer) GetDumpingCount(context.Context, *Auth) (*CountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDumpingCount not implemented")
}
func (UnimplementedBrandsServer) GetDumpingData(context.Context, *RequestByID) (*DumpingData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDumpingData not implemented")
}
func (UnimplementedBrandsServer) UpdateDumpingData(context.Context, *DumpingUpdate) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDumpingData not implemented")
}
func (UnimplementedBrandsServer) mustEmbedUnimplementedBrandsServer() {}

// UnsafeBrandsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrandsServer will
// result in compilation errors.
type UnsafeBrandsServer interface {
	mustEmbedUnimplementedBrandsServer()
}

func RegisterBrandsServer(s grpc.ServiceRegistrar, srv BrandsServer) {
	s.RegisterService(&Brands_ServiceDesc, srv)
}

func _Brands_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetBrandData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetBrandData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetBrandData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetBrandData(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetBProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetBProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetBProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetBProducts(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetBProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetBProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetBProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetBProduct(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_CreateBProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BProductUpsert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).CreateBProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/CreateBProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).CreateBProduct(ctx, req.(*BProductUpsert))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_UpdateBProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BProductUpsert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).UpdateBProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/UpdateBProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).UpdateBProduct(ctx, req.(*BProductUpsert))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_DeleteBProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).DeleteBProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/DeleteBProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).DeleteBProduct(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetBFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetBFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetBFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetBFile(ctx, req.(*BFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_UploadBFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).UploadBFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/UploadBFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).UploadBFile(ctx, req.(*BUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetBPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetBPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetBPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetBPrices(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetBPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetBPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetBPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetBPrice(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_CreateBPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BPriceUpsert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).CreateBPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/CreateBPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).CreateBPrice(ctx, req.(*BPriceUpsert))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_DeleteBPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).DeleteBPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/DeleteBPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).DeleteBPrice(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_CreateBSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BSellerUpsert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).CreateBSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/CreateBSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).CreateBSeller(ctx, req.(*BSellerUpsert))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetBSellers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetBSellers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetBSellers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetBSellers(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetBSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetBSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetBSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetBSeller(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_UpdateBSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BSellerUpsert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).UpdateBSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/UpdateBSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).UpdateBSeller(ctx, req.(*BSellerUpsert))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_DeleteBSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).DeleteBSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/DeleteBSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).DeleteBSeller(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetBSellerCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BSellerCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetBSellerCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetBSellerCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetBSellerCompanies(ctx, req.(*BSellerCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetBSellerCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BSellerCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetBSellerCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetBSellerCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetBSellerCompany(ctx, req.(*BSellerCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetBSellerCompanyProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BSellerCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetBSellerCompanyProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetBSellerCompanyProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetBSellerCompanyProducts(ctx, req.(*BSellerCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetBSellerCompanyProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BSellerCompanyProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetBSellerCompanyProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetBSellerCompanyProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetBSellerCompanyProduct(ctx, req.(*BSellerCompanyProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_UpdateBSellerCompanyProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BSCPUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).UpdateBSellerCompanyProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/UpdateBSellerCompanyProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).UpdateBSellerCompanyProduct(ctx, req.(*BSCPUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_CreateBSellerNullProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBSellerNullProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).CreateBSellerNullProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/CreateBSellerNullProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).CreateBSellerNullProduct(ctx, req.(*CreateBSellerNullProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_DeleteBSellerNullProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).DeleteBSellerNullProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/DeleteBSellerNullProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).DeleteBSellerNullProduct(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_SetBSellerNullProductURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).SetBSellerNullProductURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/SetBSellerNullProductURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).SetBSellerNullProductURL(ctx, req.(*NullUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_DeleteBSellerNullProductURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).DeleteBSellerNullProductURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/DeleteBSellerNullProductURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).DeleteBSellerNullProductURL(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetAlerts(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetDumpingItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPricerItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetDumpingItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetDumpingItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetDumpingItem(ctx, req.(*GetPricerItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_SetDumpingItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPricerItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).SetDumpingItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/SetDumpingItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).SetDumpingItem(ctx, req.(*SetPricerItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetProductsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetProductsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetProductsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetProductsCount(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetSellersCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetSellersCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetSellersCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetSellersCount(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetDumpingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetDumpingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetDumpingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetDumpingList(ctx, req.(*DumpingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetDumpingCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetDumpingCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetDumpingCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetDumpingCount(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_GetDumpingData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).GetDumpingData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/GetDumpingData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).GetDumpingData(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brands_UpdateDumpingData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpingUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServer).UpdateDumpingData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerasus.Brands/UpdateDumpingData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServer).UpdateDumpingData(ctx, req.(*DumpingUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// Brands_ServiceDesc is the grpc.ServiceDesc for Brands service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Brands_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cerasus.Brands",
	HandlerType: (*BrandsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Brands_Ping_Handler,
		},
		{
			MethodName: "GetBrandData",
			Handler:    _Brands_GetBrandData_Handler,
		},
		{
			MethodName: "GetBProducts",
			Handler:    _Brands_GetBProducts_Handler,
		},
		{
			MethodName: "GetBProduct",
			Handler:    _Brands_GetBProduct_Handler,
		},
		{
			MethodName: "CreateBProduct",
			Handler:    _Brands_CreateBProduct_Handler,
		},
		{
			MethodName: "UpdateBProduct",
			Handler:    _Brands_UpdateBProduct_Handler,
		},
		{
			MethodName: "DeleteBProduct",
			Handler:    _Brands_DeleteBProduct_Handler,
		},
		{
			MethodName: "GetBFile",
			Handler:    _Brands_GetBFile_Handler,
		},
		{
			MethodName: "UploadBFile",
			Handler:    _Brands_UploadBFile_Handler,
		},
		{
			MethodName: "GetBPrices",
			Handler:    _Brands_GetBPrices_Handler,
		},
		{
			MethodName: "GetBPrice",
			Handler:    _Brands_GetBPrice_Handler,
		},
		{
			MethodName: "CreateBPrice",
			Handler:    _Brands_CreateBPrice_Handler,
		},
		{
			MethodName: "DeleteBPrice",
			Handler:    _Brands_DeleteBPrice_Handler,
		},
		{
			MethodName: "CreateBSeller",
			Handler:    _Brands_CreateBSeller_Handler,
		},
		{
			MethodName: "GetBSellers",
			Handler:    _Brands_GetBSellers_Handler,
		},
		{
			MethodName: "GetBSeller",
			Handler:    _Brands_GetBSeller_Handler,
		},
		{
			MethodName: "UpdateBSeller",
			Handler:    _Brands_UpdateBSeller_Handler,
		},
		{
			MethodName: "DeleteBSeller",
			Handler:    _Brands_DeleteBSeller_Handler,
		},
		{
			MethodName: "GetBSellerCompanies",
			Handler:    _Brands_GetBSellerCompanies_Handler,
		},
		{
			MethodName: "GetBSellerCompany",
			Handler:    _Brands_GetBSellerCompany_Handler,
		},
		{
			MethodName: "GetBSellerCompanyProducts",
			Handler:    _Brands_GetBSellerCompanyProducts_Handler,
		},
		{
			MethodName: "GetBSellerCompanyProduct",
			Handler:    _Brands_GetBSellerCompanyProduct_Handler,
		},
		{
			MethodName: "UpdateBSellerCompanyProduct",
			Handler:    _Brands_UpdateBSellerCompanyProduct_Handler,
		},
		{
			MethodName: "CreateBSellerNullProduct",
			Handler:    _Brands_CreateBSellerNullProduct_Handler,
		},
		{
			MethodName: "DeleteBSellerNullProduct",
			Handler:    _Brands_DeleteBSellerNullProduct_Handler,
		},
		{
			MethodName: "SetBSellerNullProductURL",
			Handler:    _Brands_SetBSellerNullProductURL_Handler,
		},
		{
			MethodName: "DeleteBSellerNullProductURL",
			Handler:    _Brands_DeleteBSellerNullProductURL_Handler,
		},
		{
			MethodName: "GetAlerts",
			Handler:    _Brands_GetAlerts_Handler,
		},
		{
			MethodName: "GetDumpingItem",
			Handler:    _Brands_GetDumpingItem_Handler,
		},
		{
			MethodName: "SetDumpingItem",
			Handler:    _Brands_SetDumpingItem_Handler,
		},
		{
			MethodName: "GetProductsCount",
			Handler:    _Brands_GetProductsCount_Handler,
		},
		{
			MethodName: "GetSellersCount",
			Handler:    _Brands_GetSellersCount_Handler,
		},
		{
			MethodName: "GetDumpingList",
			Handler:    _Brands_GetDumpingList_Handler,
		},
		{
			MethodName: "GetDumpingCount",
			Handler:    _Brands_GetDumpingCount_Handler,
		},
		{
			MethodName: "GetDumpingData",
			Handler:    _Brands_GetDumpingData_Handler,
		},
		{
			MethodName: "UpdateDumpingData",
			Handler:    _Brands_UpdateDumpingData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brand.proto",
}
